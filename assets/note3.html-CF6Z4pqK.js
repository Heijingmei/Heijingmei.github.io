import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,a as s,b as n,d as i,e as l}from"./app-DFf-xDda.js";const c={},u={href:"https://bornforthis.cn/column/Rust/01.html",target:"_blank",rel:"noopener noreferrer"},r=l(`<h2 id="_2-rust-中的控制流" tabindex="-1"><a class="header-anchor" href="#_2-rust-中的控制流"><span>2. Rust 中的控制流</span></a></h2><p>下面我们来了解一下 Rust 语言的控制流语句。</p><h4 id="_1-分支语句-if-else" tabindex="-1"><a class="header-anchor" href="#_1-分支语句-if-else"><span>1. 分支语句 <code>if else</code></span></a></h4><p>Rust 中使用 if else 来构造分支。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断数字number能被4，3，2中的哪一个数字整除</span>
    <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number is divisible by 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number is divisible by 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number is divisible by 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number is not divisible by 4, 3, or 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与其他 C 系语言不同，Rust 中 if 后面的条件表达式不推荐用 <code>()</code> 包裹起来，因为 Rust 设计者认为那个是不必要的，是多余的语法噪音。</p><p>还要注意一点，if else <strong>支持表达式返回</strong>。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 在这里，if else 返回了值</span>
    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token comment">// 代码块结尾最后一句不加分号，表示把值返回回去</span>
        <span class="token number">100</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 代码块结尾最后一句不加分号，表示把值返回回去</span>
        <span class="token number">101</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;y is {}&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像上面这样的代码，其实已经实现了类似于 C 语言中的<strong>三目运算符</strong>这样的设计，在 Rust 中，不需要额外提供那样的特殊语法。</p><h3 id="_2-循环语句" tabindex="-1"><a class="header-anchor" href="#_2-循环语句"><span>2. 循环语句</span></a></h3><p>Rust 中有三种循环语句，分别是 loop、while、for。</p><h4 id="loop-用于无条件-无限-循环。" tabindex="-1"><a class="header-anchor" href="#loop-用于无条件-无限-循环。"><span><code>loop</code> 用于无条件（无限）循环。</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 这里，接收从循环体中返回的值，对result进行初始化</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> counter <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">{</span>
            <span class="token comment">// 使用break跳出循环，同时带一个返回值回去</span>
            <span class="token keyword">break</span> counter <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The result is {result}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请仔细品味这个例子，这种<strong>返回一个值到外面对一个变量初始化的方式</strong>，是 Rust 中的习惯用法，这能让代码更紧凑。</p><h4 id="while-循环为条件判断循环。" tabindex="-1"><a class="header-anchor" href="#while-循环为条件判断循环。"><span><code>while</code> 循环为条件判断循环。</span></a></h4><p>当后面的条件为真的时候，执行循环体里面的代码。和前面的 if 语句一样，Rust 中的 while 后面的条件表达式不推荐用 <code>()</code> 包裹起来。比如：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{number}!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        number <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;LIFTOFF!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="for-循环在-rust-中-基本上只用于-迭代器-的遍历。" tabindex="-1"><a class="header-anchor" href="#for-循环在-rust-中-基本上只用于-迭代器-的遍历。"><span><code>for</code> 循环在 Rust 中，基本上只用于**<u>迭代器</u>**的遍历。</span></a></h4><p>Rust 中没有 C 语言那种 for 循环风格的语法支持，因为那被认为是一种不好的设计。</p><p>你可以看一下下面的代码，就是对一个数组进行遍历。</p><h6 id="for-element-in" tabindex="-1"><a class="header-anchor" href="#for-element-in"><span><code>for</code>+ element+ <code> in</code></span></a></h6><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> element <span class="token keyword">in</span> a <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;the value is: {element}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码对动态数组 Vec 的遍历阻止了越界的可能性，因此用这种方式访问 Vec 比用下标索引的方式访问更加安全。</p><p>对于循环的场景，Rust 还提供了一个便捷的语法来生成遍历区间： <code>..</code>（两个点）。</p><p>请看下面的示例。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 左闭右开区间</span>
    <span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">4</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{number}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在for循环可以这么用，但是打印其他内容不可以</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 左闭右闭区间</span>
    <span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">4</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{number}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 反向</span>
    <span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{number}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token operator">-</span><span class="token operator">-</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
<span class="token operator">-</span><span class="token operator">-</span>
<span class="token number">3</span>
<span class="token number">2</span>
<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再来试试打印字符。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">..=</span><span class="token char">&#39;z&#39;</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{ch}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出：</span>
a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
y
z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>嘿，Rust 很智能啊！</p>`,29);function d(k,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[s("p",null,[n("本文摘编自："),s("a",u,[n("快速入门：Rust中有哪些你不得不了解的基础语法？"),i(a)]),n("（著作权归AI悦创所有）")]),r])}const f=e(c,[["render",d],["__file","note3.html.vue"]]),h=JSON.parse('{"path":"/zh/Lilya/program/Rust/note3.html","title":"03-控制流和代码块","lang":"zh-CN","frontmatter":{"title":"03-控制流和代码块","author":"黑静美","category":["编程"],"tag":["rust"],"icon":"/ico/Rust.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"本文摘编自：快速入门：Rust中有哪些你不得不了解的基础语法？（著作权归AI悦创所有） 2. Rust 中的控制流 下面我们来了解一下 Rust 语言的控制流语句。 1. 分支语句 if else Rust 中使用 if else 来构造分支。 与其他 C 系语言不同，Rust 中 if 后面的条件表达式不推荐用 () 包裹起来，因为 Rust 设计者...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/Rust/note3.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"03-控制流和代码块"}],["meta",{"property":"og:description","content":"本文摘编自：快速入门：Rust中有哪些你不得不了解的基础语法？（著作权归AI悦创所有） 2. Rust 中的控制流 下面我们来了解一下 Rust 语言的控制流语句。 1. 分支语句 if else Rust 中使用 if else 来构造分支。 与其他 C 系语言不同，Rust 中 if 后面的条件表达式不推荐用 () 包裹起来，因为 Rust 设计者..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T16:18:15.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:modified_time","content":"2024-06-19T16:18:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03-控制流和代码块\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-19T16:18:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":2,"title":"2. Rust 中的控制流","slug":"_2-rust-中的控制流","link":"#_2-rust-中的控制流","children":[{"level":4,"title":"1. 分支语句 if else","slug":"_1-分支语句-if-else","link":"#_1-分支语句-if-else","children":[]},{"level":3,"title":"2. 循环语句","slug":"_2-循环语句","link":"#_2-循环语句","children":[{"level":4,"title":"loop 用于无条件（无限）循环。","slug":"loop-用于无条件-无限-循环。","link":"#loop-用于无条件-无限-循环。","children":[]},{"level":4,"title":"while 循环为条件判断循环。","slug":"while-循环为条件判断循环。","link":"#while-循环为条件判断循环。","children":[]},{"level":4,"title":"for 循环在 Rust 中，基本上只用于**迭代器**的遍历。","slug":"for-循环在-rust-中-基本上只用于-迭代器-的遍历。","link":"#for-循环在-rust-中-基本上只用于-迭代器-的遍历。","children":[{"level":6,"title":"for+ element+  in","slug":"for-element-in","link":"#for-element-in","children":[]}]}]}]}],"git":{"createdTime":1718813895000,"updatedTime":1718813895000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":3.03,"words":909},"filePathRelative":"zh/Lilya/program/Rust/note3.md","localizedDate":"2024年6月19日","excerpt":"<p>本文摘编自：<a href=\\"https://bornforthis.cn/column/Rust/01.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">快速入门：Rust中有哪些你不得不了解的基础语法？</a>（著作权归AI悦创所有）</p>\\n<h2>2. Rust 中的控制流</h2>\\n<p>下面我们来了解一下 Rust 语言的控制流语句。</p>\\n<h4>1. 分支语句 <code>if else</code></h4>\\n<p>Rust 中使用 if else 来构造分支。</p>\\n<div class=\\"language-rust\\" data-ext=\\"rs\\" data-title=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> number <span class=\\"token operator\\">=</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 判断数字number能被4，3，2中的哪一个数字整除</span>\\n    <span class=\\"token keyword\\">if</span> number <span class=\\"token operator\\">%</span> <span class=\\"token number\\">4</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"number is divisible by 4\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> number <span class=\\"token operator\\">%</span> <span class=\\"token number\\">3</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"number is divisible by 3\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> number <span class=\\"token operator\\">%</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"number is divisible by 2\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"number is not divisible by 4, 3, or 2\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{f as comp,h as data};
