import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-D2a_B70u.js";const p="/assets/image-20240612114705541-DF5U-Dov.png",e={},c=t(`<h2 id="box-t" tabindex="-1"><a class="header-anchor" href="#box-t"><span><code>Box&lt;T&gt;</code></span></a></h2><h2 id="rc-t" tabindex="-1"><a class="header-anchor" href="#rc-t"><span><code>RC&lt;T&gt;</code></span></a></h2><p>由于rust的数据的所有权默认随着赋值（读取）而转移，但有时一个值会有多个所有者，为了<strong>支持多重所有权</strong>，我们使用：<code>RC&lt;T&gt;</code></p><p>比如数据需要被程序的多个部分读取(<strong>只读</strong>)，编译者无法确定哪个部分最后使用完这些数据时应该使用<code>RC&lt;T&gt;</code></p><h5 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h5><ul><li><p>支持多重所有权</p></li><li><p>只适用于单线程场景</p></li><li><p><strong>不可变</strong>引用，共享<strong>只读</strong>数据</p></li><li><h6 id="rc-t-不在预倒入模块-需要使用std-rc-rc导入" tabindex="-1"><a class="header-anchor" href="#rc-t-不在预倒入模块-需要使用std-rc-rc导入"><span><code>RC&lt;T&gt;</code>不在预倒入模块，需要使用<code>std::rc::Rc</code>导入</span></a></h6></li></ul><h5 id="引用方式" tabindex="-1"><a class="header-anchor" href="#引用方式"><span>引用方式</span></a></h5><ul><li><code>Rc::clone(&amp;a)</code>: 增加引用计数</li><li><code>Rc::strong_count(&amp;a)</code>: 获得引用计数(强引用) <ul><li><code>Rc::weak_count</code>: 获得引用计数(弱引用)。</li></ul></li></ul><h4 id="报错-因为无法两次调用" tabindex="-1"><a class="header-anchor" href="#报错-因为无法两次调用"><span>报错：因为无法两次调用</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">List</span><span class="token punctuation">{</span>
    <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>
                 <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>
                               <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>将<code>Box&lt;T&gt;</code>替换为<code>Rc&lt;T&gt;</code></li></ul><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">use</span> stand
<span class="token keyword">enum</span> <span class="token type-definition class-name">List</span><span class="token punctuation">{</span>
    <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>
                         <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>
                                      <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">4</span>， <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token comment">// todo 打印引用的次数</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>rc<span class="token punctuation">::</span></span><span class="token class-name">Rc</span><span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">List</span><span class="token punctuation">{</span>
    <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>
                         <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>
                                      <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;count after creating a: {}&quot;</span><span class="token punctuation">,</span>
             <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">strong_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;count after creating b: {}&quot;</span><span class="token punctuation">,</span>
             <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">strong_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;count after creating b: {}&quot;</span><span class="token punctuation">,</span>
                 <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">strong_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>                      <span class="token comment">// todo 上节课内容，所有权以括号内部计算</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;count after c goes out of scope: {}&quot;</span><span class="token punctuation">,</span>
             <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">strong_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>count after creating a: 1
count after creating b: 2
count after creating b: 3
count after c goes out of scope: 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),o=[c];function l(i,u){return s(),a("div",null,o)}const d=n(e,[["render",l],["__file","note7.html.vue"]]),m=JSON.parse('{"path":"/zh/Lilya/program/Rust/note7.html","title":"07-(多重所有权RC<T>)和(Refcell<T>)","lang":"zh-CN","frontmatter":{"title":"07-(多重所有权RC<T>)和(Refcell<T>)","author":"黑静美","category":["编程"],"tag":["rust"],"icon":"/ico/Rust.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"Box<T> RC<T> 由于rust的数据的所有权默认随着赋值（读取）而转移，但有时一个值会有多个所有者，为了支持多重所有权，我们使用：RC<T> 比如数据需要被程序的多个部分读取(只读)，编译者无法确定哪个部分最后使用完这些数据时应该使用RC<T> 特点 支持多重所有权 只适用于单线程场景 不可变引用，共享只读数据 RC<T>不在预倒入模块，需要使...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/Rust/note7.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"07-(多重所有权RC<T>)和(Refcell<T>)"}],["meta",{"property":"og:description","content":"Box<T> RC<T> 由于rust的数据的所有权默认随着赋值（读取）而转移，但有时一个值会有多个所有者，为了支持多重所有权，我们使用：RC<T> 比如数据需要被程序的多个部分读取(只读)，编译者无法确定哪个部分最后使用完这些数据时应该使用RC<T> 特点 支持多重所有权 只适用于单线程场景 不可变引用，共享只读数据 RC<T>不在预倒入模块，需要使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T09:10:12.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:modified_time","content":"2024-06-19T09:10:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07-(多重所有权RC<T>)和(Refcell<T>)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-19T09:10:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":2,"title":"Box<T>","slug":"box-t","link":"#box-t","children":[]},{"level":2,"title":"RC<T>","slug":"rc-t","link":"#rc-t","children":[{"level":5,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":5,"title":"引用方式","slug":"引用方式","link":"#引用方式","children":[]},{"level":4,"title":"报错：因为无法两次调用","slug":"报错-因为无法两次调用","link":"#报错-因为无法两次调用","children":[]}]}],"git":{"createdTime":1718788212000,"updatedTime":1718788212000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":1.54,"words":462},"filePathRelative":"zh/Lilya/program/Rust/note7.md","localizedDate":"2024年6月19日","excerpt":"<h2><code>Box&lt;T&gt;</code></h2>\\n<h2><code>RC&lt;T&gt;</code></h2>\\n<p>由于rust的数据的所有权默认随着赋值（读取）而转移，但有时一个值会有多个所有者，为了<strong>支持多重所有权</strong>，我们使用：<code>RC&lt;T&gt;</code></p>\\n<p>比如数据需要被程序的多个部分读取(<strong>只读</strong>)，编译者无法确定哪个部分最后使用完这些数据时应该使用<code>RC&lt;T&gt;</code></p>\\n<h5>特点</h5>\\n<ul>\\n<li>\\n<p>支持多重所有权</p>\\n</li>\\n<li>\\n<p>只适用于单线程场景</p>\\n</li>\\n<li>\\n<p><strong>不可变</strong>引用，共享<strong>只读</strong>数据</p>\\n</li>\\n<li>\\n<h6><code>RC&lt;T&gt;</code>不在预倒入模块，需要使用<code>std::rc::Rc</code>导入</h6>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,m as data};
