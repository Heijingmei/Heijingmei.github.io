import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as i,e as a}from"./app-DmCgshGM.js";const n={},r=a('<h2 id="队列" tabindex="-1"><a class="header-anchor" href="#队列"><span>队列</span></a></h2><p>遵循先进先出<strong>FIFO</strong>（first in first out）的原则。在这种结构中，数据被依次添加到队列末端，并从队列的前端移除。类似于结账排队。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>队列主要支持以下几种操作</p><ul><li>Enqueue：将一个元素添加到队列的尾部</li><li>Dequeue：从队列头部移除一个元素</li><li>Front：获取头部元素（不移除）</li><li>IsEmpty：检查队列是否为空</li><li>Size：返回队列中元素的数量</li></ul><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h3><p>队列可以通过多种方式实现:</p><h5 id="使用数组或列表" tabindex="-1"><a class="header-anchor" href="#使用数组或列表"><span>使用数组或列表</span></a></h5><h5 id="使用链表" tabindex="-1"><a class="header-anchor" href="#使用链表"><span>使用链表</span></a></h5><p>可以在O(1)的时间复杂度内进行插入和删除操作</p><h6 id="" tabindex="-1"><a class="header-anchor" href="#"><span>__</span></a></h6><ul><li>使用库queue.Queue: 这是Python标准库提供的一个线程安全的队列实现，适用于多线程环境</li><li>使用双端队列(duque): Python 的 collections.deque提供了一个优化的双端队列实现，适合用作队列</li></ul>',12),l=[r];function o(s,c){return t(),i("div",null,l)}const u=e(n,[["render",o],["__file","note3.html.vue"]]),d=JSON.parse('{"path":"/zh/Lilya/program/data-structure/note3.html","title":"数据结构--队列","lang":"zh-CN","frontmatter":{"title":"数据结构--队列","author":"黑静美","category":["编程"],"tag":["python","数据结构"],"isOriginal":true,"icon":"/ico/Python.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"队列 遵循先进先出FIFO（first in first out）的原则。在这种结构中，数据被依次添加到队列末端，并从队列的前端移除。类似于结账排队。 操作 队列主要支持以下几种操作 Enqueue：将一个元素添加到队列的尾部 Dequeue：从队列头部移除一个元素 Front：获取头部元素（不移除） IsEmpty：检查队列是否为空 Size：返回队...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/data-structure/note3.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"数据结构--队列"}],["meta",{"property":"og:description","content":"队列 遵循先进先出FIFO（first in first out）的原则。在这种结构中，数据被依次添加到队列末端，并从队列的前端移除。类似于结账排队。 操作 队列主要支持以下几种操作 Enqueue：将一个元素添加到队列的尾部 Dequeue：从队列头部移除一个元素 Front：获取头部元素（不移除） IsEmpty：检查队列是否为空 Size：返回队..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-03T17:55:08.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:modified_time","content":"2024-06-03T17:55:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构--队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-03T17:55:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":2,"title":"队列","slug":"队列","link":"#队列","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[{"level":5,"title":"使用数组或列表","slug":"使用数组或列表","link":"#使用数组或列表","children":[]},{"level":5,"title":"使用链表","slug":"使用链表","link":"#使用链表","children":[{"level":6,"title":"__","slug":"","link":"#","children":[]}]}]}]}],"git":{"createdTime":1717437308000,"updatedTime":1717437308000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":0.92,"words":277},"filePathRelative":"zh/Lilya/program/data-structure/note3.md","localizedDate":"2024年6月3日","excerpt":"<h2>队列</h2>\\n<p>遵循先进先出<strong>FIFO</strong>（first in first out）的原则。在这种结构中，数据被依次添加到队列末端，并从队列的前端移除。类似于结账排队。</p>\\n<h2>操作</h2>\\n<p>队列主要支持以下几种操作</p>\\n<ul>\\n<li>Enqueue：将一个元素添加到队列的尾部</li>\\n<li>Dequeue：从队列头部移除一个元素</li>\\n<li>Front：获取头部元素（不移除）</li>\\n<li>IsEmpty：检查队列是否为空</li>\\n<li>Size：返回队列中元素的数量</li>\\n</ul>\\n<h3>实现</h3>","autoDesc":true}');export{u as comp,d as data};
