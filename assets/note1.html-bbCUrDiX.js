import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-BB2CE0D9.js";const t="/assets/image-20240416122646662-BBGnWA7Q.png",i="/assets/image-20240416100207349-B3EMgPai.png",l="/assets/image-20240416100740962-ChPprLfh.png",p="/assets/image-20240416121632963-qXWeNZfy.png",o="/assets/image-20240419155100018-BqO9aFlK.png",c="/assets/image-20240419160315216-Cte2rEY-.png",r="/assets/image-20240419160602105-CbTE0Vbd.png",d="/assets/image-20240419172451998-CNdY3X8e.png",u="/assets/image-20240419172645682-Bue6ujrQ.png",h="/assets/image-20240419173735595-L79IBRRD.png",g="/assets/image-20240419173400533-CSCCqr22.png",k={},m=e(`<h1 id="来个传统" tabindex="-1"><a class="header-anchor" href="#来个传统"><span>来个传统</span></a></h1><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span> <span class="token string">&quot;hello word&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><details class="hint-container details"><summary>Python中的变量</summary><p>变量就是在内存中开辟空间。</p><p>每个变量用的是同一块内存空间，所以新一次改变变量（如：<strong>赋值</strong>），变量旧的属性被覆盖（新的值取代旧的值）。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 1赋值给了x，x代表1</span>
x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">10</span> <span class="token comment"># x+10等价于 1+10，最后得出11，11赋值给x</span>
<span class="token comment"># 也就是说11 覆盖了 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 打印x 结果：11</span>
<span class="token comment"># 用来注释（注意井号后面有空格）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">井号 # 用来注释，解释某一行代码的功能和作用</p></div></details><div class="hint-container info"><p class="hint-container-title">代码的运行逻辑：</p><p>从上到下，从右到左，最后才是赋值</p></div><p>也可以通过变量把一个变量的值直接赋给另一个变量</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>name1 <span class="token operator">=</span> <span class="token string">&quot;lilei&quot;</span>
name2 <span class="token operator">=</span> name1
<span class="token keyword">print</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-输出print" tabindex="-1"><a class="header-anchor" href="#_1-输出print"><span>1.输出print</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-同时输出变量" tabindex="-1"><a class="header-anchor" href="#_1-同时输出变量"><span>1.同时输出变量</span></a></h3><p>python支持同一命令同时输出变量，<strong>默认</strong>以空格（占位字符）输出变量</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
c <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>使用<code>sep =</code> 更改间隔的内容</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
c <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">&quot;间隔&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><p>不同行的<code>print</code>默认输出换行</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用<code>end = </code>改变换行内容</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&quot;结束&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&quot;结束&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&quot;结束&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>end</code> 可以和<code>sep</code>同时使用</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
c <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;~&quot;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;love Python&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果将没有换行,如有需要添加<code>peint()</code>换行</p><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-变量" tabindex="-1"><a class="header-anchor" href="#_2-变量"><span>2. 变量</span></a></h2><h2 id="_1-赋值方式" tabindex="-1"><a class="header-anchor" href="#_1-赋值方式"><span>1. 赋值方式</span></a></h2><ul><li><p>变量基本赋值方式如上，将右边的值赋给左边</p></li><li><p>变量也可以同时赋值</p></li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>同时赋同一个值</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Austin = &quot;Coke&quot; # 该赋值可以理解为倒果汁的过程
Jaden = &quot;juice&quot; # 该赋值可以理解为倒果汁的过程 
Austin, Jaden = Jaden, Austin  #先右边取值，先认定杯子
 # 直接交换杯子（赋值），这样就不需要一个新杯子换果汁了
print(&quot;Austin&quot;, Austin)       
print(&quot;Jaden&quot;, Jaden)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-变量的命名规则" tabindex="-1"><a class="header-anchor" href="#_2-变量的命名规则"><span>2. 变量的命名规则</span></a></h3><ul><li>大小写英文、数字和<code>_</code>下划线的结合，且不能用数字开头； 【数字开头报错1】 <ul><li>不能包含空格，请用下划线代替 【报错2】</li></ul></li><li>Python中变量名<strong>区分大小写</strong>；</li><li>**<u>系统关键词</u>**不能做变量名使用「获取关键词列表：<code>help(&#39;keywords&#39;)</code>」【报错类型3】</li><li>不要使用Python内置函数名称做变量(如：<code>print</code>) 【4】</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>Here <span class="token keyword">is</span> a <span class="token builtin">list</span> of the Python keywords<span class="token punctuation">.</span>  Enter <span class="token builtin">any</span> keyword to get more <span class="token builtin">help</span><span class="token punctuation">.</span>

<span class="token boolean">False</span>               <span class="token keyword">break</span>               <span class="token keyword">for</span>                 <span class="token keyword">not</span>
<span class="token boolean">None</span>                <span class="token keyword">class</span>               <span class="token class-name">from</span>                <span class="token keyword">or</span>
<span class="token boolean">True</span>                <span class="token keyword">continue</span>            <span class="token keyword">global</span>              <span class="token keyword">pass</span>
__peg_parser__      <span class="token keyword">def</span>                 <span class="token keyword">if</span>                  <span class="token keyword">raise</span>
<span class="token keyword">and</span>                 <span class="token keyword">del</span>                 <span class="token keyword">import</span>              <span class="token keyword">return</span>
<span class="token keyword">as</span>                  <span class="token keyword">elif</span>                <span class="token keyword">in</span>                  <span class="token keyword">try</span>
<span class="token keyword">assert</span>              <span class="token keyword">else</span>                <span class="token keyword">is</span>                  <span class="token keyword">while</span>
<span class="token keyword">async</span>               <span class="token keyword">except</span>              <span class="token keyword">lambda</span>              <span class="token keyword">with</span>
<span class="token keyword">await</span>               <span class="token keyword">finally</span>             <span class="token keyword">nonlocal</span>            <span class="token keyword">yield</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::tab</p><p>@tab【报错1】</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>1n = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>@tab 【报错2】</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>n n = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>@tab 【报错3】</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">await</span> <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>@tab 【4】</p><p>没报错。但是不能运行</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>print = 1
print(print)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>:::</p><h3 id="_3-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-数据类型"><span>3. 数据类型</span></a></h3><p>python不需要要求申明数据类型，会根据值自动分配一个默认的数据类型</p><h4 id="布尔型-boolean" tabindex="-1"><a class="header-anchor" href="#布尔型-boolean"><span>布尔型 boolean</span></a></h4><h5 id="关键词-bool" tabindex="-1"><a class="header-anchor" href="#关键词-bool"><span>关键词： <code>bool()</code></span></a></h5><h4 id="数字型-integer" tabindex="-1"><a class="header-anchor" href="#数字型-integer"><span>数字型 integer</span></a></h4><h5 id="整型-int" tabindex="-1"><a class="header-anchor" href="#整型-int"><span>整型：<code>int()</code></span></a></h5><h5 id="浮点型-float" tabindex="-1"><a class="header-anchor" href="#浮点型-float"><span>浮点型：<code>float()</code></span></a></h5><h4 id="字符串-string" tabindex="-1"><a class="header-anchor" href="#字符串-string"><span>字符串 String</span></a></h4><h5 id="关键词-str" tabindex="-1"><a class="header-anchor" href="#关键词-str"><span>关键词：<code>str()</code></span></a></h5><h4 id="元组-tuple" tabindex="-1"><a class="header-anchor" href="#元组-tuple"><span>元组 Tuple</span></a></h4><h5 id="关键词-tuple" tabindex="-1"><a class="header-anchor" href="#关键词-tuple"><span>关键词：<code>tuple()</code></span></a></h5><h4 id="字典-dictionary" tabindex="-1"><a class="header-anchor" href="#字典-dictionary"><span>字典 dictionary</span></a></h4><h5 id="关键词-dict" tabindex="-1"><a class="header-anchor" href="#关键词-dict"><span>关键词：<code>dict()</code></span></a></h5><h4 id="集合-set" tabindex="-1"><a class="header-anchor" href="#集合-set"><span>集合 set</span></a></h4><h5 id="关键词-set" tabindex="-1"><a class="header-anchor" href="#关键词-set"><span>关键词：<code>set()</code></span></a></h5><h4 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list"><span>列表 list</span></a></h4><h5 id="关键词-list" tabindex="-1"><a class="header-anchor" href="#关键词-list"><span>关键词：<code>list()</code></span></a></h5><h3 id="_5-练习" tabindex="-1"><a class="header-anchor" href="#_5-练习"><span>5. 练习</span></a></h3><ol><li><p>在 Python 中，变量名可以以数字开始。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p>在 Python 中，以下哪个变量名是有效的？</p><ul><li>[ ] 2myVar</li><li>[x] myVar2</li><li>[ ] my-var</li><li>[ ] my var</li></ul></li><li><p>在 Python 中，变量名区分大小写。</p><ul><li>[x] 对</li><li>[ ] 错</li></ul></li><li><p>在 Python 中，<code>my_var</code> 和 <code>myVar</code> 是同一个变量。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p>变量名可以是 Python 中的关键字。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p><code>None</code> 是 Python 中的特殊类型，表示没有值或空值。</p><ul><li>[x] 对</li><li>[ ] 错</li></ul></li><li><p>在 Python 中，以下哪个是有效的变量赋值？</p><ul><li>[ ] 123abc = &quot;hello&quot;</li><li>[ ] for = &quot;world&quot;</li><li>[x] _hidden = &quot;secret&quot;</li><li>[ ] import = 123</li></ul></li><li><p>在 Python 中，一个变量可以同时被赋予多个值。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p>在 Python 中，以下哪个是多变量赋值？</p><ul><li>[x] a, b, c = 1, 2, 3</li><li>[ ] a = 1, b = 2, c = 3</li><li>[ ] a; b; c = 1; 2; 3</li><li>[ ] a = 1; b = 2; c = 3;</li></ul></li><li><p>变量在使用之前必须被赋值。</p><ul><li>[x] 对</li><li>[ ] 错</li></ul></li><li><p>Python 中变量的类型是静态的，一旦赋值就不能改变。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p>在 Python 中，以下哪个表示全局变量？</p><ul><li>[ ] var = &quot;hello&quot;</li><li>[x] global var</li><li>[ ] var(global)</li><li>[ ] def var():</li></ul></li><li><p>以下哪个表示删除变量？</p><ul><li>[ ] delete x</li><li>[x] del x</li><li>[ ] remove x</li><li>[ ] destroy x</li></ul></li><li><p><code>x = 5</code> 之后 <code>y = x</code>，现在改变 <code>y</code> 的值，<code>x</code> 的值也会改变。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><p>⚠️<code>x = [1, 2, 3]</code> 之后 <code>y = x</code>，现在改变 <code>y</code> 的列表内容，<code>x</code> 的内容也会改变。</p><ul><li>[x] 对</li><li>[ ] 错</li></ul></li><li><p>在 Python 中，变量只能存储基本数据类型的值，如整数或字符串。</p><ul><li>[ ] 对</li><li>[x] 错</li></ul></li></ol>',73),v=[m];function y(b,x){return a(),s("div",null,v)}const w=n(k,[["render",y],["__file","note1.html.vue"]]),q=JSON.parse('{"path":"/zh/Lilya/program/python/note1.html","title":"01-python第一课","lang":"zh-CN","frontmatter":{"title":"01-python第一课","author":"黑静美","isOriginal":true,"category":["编程"],"tag":["python"],"icon":"/img/Python.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"来个传统 Python中的变量 变量就是在内存中开辟空间。 每个变量用的是同一块内存空间，所以新一次改变变量（如：赋值），变量旧的属性被覆盖（新的值取代旧的值）。 井号 # 用来注释，解释某一行代码的功能和作用 代码的运行逻辑： 从上到下，从右到左，最后才是赋值 也可以通过变量把一个变量的值直接赋给另一个变量 1.输出print 1.同时输出变量 py...","head":[["link",{"rel":"alternate","hreflang":"ger-de","href":"https://github.com/Heijingmei/Heijingmei.github.io/de/Lilya/program/python/note1.html"}],["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/python/note1.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"01-python第一课"}],["meta",{"property":"og:description","content":"来个传统 Python中的变量 变量就是在内存中开辟空间。 每个变量用的是同一块内存空间，所以新一次改变变量（如：赋值），变量旧的属性被覆盖（新的值取代旧的值）。 井号 # 用来注释，解释某一行代码的功能和作用 代码的运行逻辑： 从上到下，从右到左，最后才是赋值 也可以通过变量把一个变量的值直接赋给另一个变量 1.输出print 1.同时输出变量 py..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"ger-De"}],["meta",{"property":"og:updated_time","content":"2024-04-20T02:42:21.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:modified_time","content":"2024-04-20T02:42:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01-python第一课\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-20T02:42:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":1,"title":"来个传统","slug":"来个传统","link":"#来个传统","children":[{"level":2,"title":"1.输出print","slug":"_1-输出print","link":"#_1-输出print","children":[{"level":3,"title":"1.同时输出变量","slug":"_1-同时输出变量","link":"#_1-同时输出变量","children":[]}]},{"level":2,"title":"2. 变量","slug":"_2-变量","link":"#_2-变量","children":[]},{"level":2,"title":"1. 赋值方式","slug":"_1-赋值方式","link":"#_1-赋值方式","children":[{"level":3,"title":"2. 变量的命名规则","slug":"_2-变量的命名规则","link":"#_2-变量的命名规则","children":[]},{"level":3,"title":"3. 数据类型","slug":"_3-数据类型","link":"#_3-数据类型","children":[{"level":4,"title":"布尔型 boolean","slug":"布尔型-boolean","link":"#布尔型-boolean","children":[{"level":5,"title":"关键词： bool()","slug":"关键词-bool","link":"#关键词-bool","children":[]}]},{"level":4,"title":"数字型 integer","slug":"数字型-integer","link":"#数字型-integer","children":[{"level":5,"title":"整型：int()","slug":"整型-int","link":"#整型-int","children":[]},{"level":5,"title":"浮点型：float()","slug":"浮点型-float","link":"#浮点型-float","children":[]}]},{"level":4,"title":"字符串 String","slug":"字符串-string","link":"#字符串-string","children":[{"level":5,"title":"关键词：str()","slug":"关键词-str","link":"#关键词-str","children":[]}]},{"level":4,"title":"元组 Tuple","slug":"元组-tuple","link":"#元组-tuple","children":[{"level":5,"title":"关键词：tuple()","slug":"关键词-tuple","link":"#关键词-tuple","children":[]}]},{"level":4,"title":"字典 dictionary","slug":"字典-dictionary","link":"#字典-dictionary","children":[{"level":5,"title":"关键词：dict()","slug":"关键词-dict","link":"#关键词-dict","children":[]}]},{"level":4,"title":"集合 set","slug":"集合-set","link":"#集合-set","children":[{"level":5,"title":"关键词：set()","slug":"关键词-set","link":"#关键词-set","children":[]}]},{"level":4,"title":"列表 list","slug":"列表-list","link":"#列表-list","children":[{"level":5,"title":"关键词：list()","slug":"关键词-list","link":"#关键词-list","children":[]}]}]},{"level":3,"title":"5. 练习","slug":"_5-练习","link":"#_5-练习","children":[]}]}]}],"git":{"createdTime":1713580941000,"updatedTime":1713580941000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":4.05,"words":1215},"filePathRelative":"zh/Lilya/program/python/note1.md","localizedDate":"2024年4月20日","excerpt":"\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">print</span> <span class=\\"token string\\">\\"hello word\\"</span>\\n</code></pre></div><figure><figcaption></figcaption></figure>\\n<hr>\\n<details class=\\"hint-container details\\"><summary>Python中的变量</summary>\\n<p>变量就是在内存中开辟空间。</p>\\n<p>每个变量用的是同一块内存空间，所以新一次改变变量（如：<strong>赋值</strong>），变量旧的属性被覆盖（新的值取代旧的值）。</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code>x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span>  <span class=\\"token comment\\"># 1赋值给了x，x代表1</span>\\nx <span class=\\"token operator\\">=</span> x <span class=\\"token operator\\">+</span> <span class=\\"token number\\">10</span> <span class=\\"token comment\\"># x+10等价于 1+10，最后得出11，11赋值给x</span>\\n<span class=\\"token comment\\"># 也就是说11 覆盖了 1</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\"># 打印x 结果：11</span>\\n<span class=\\"token comment\\"># 用来注释（注意井号后面有空格）</span>\\n</code></pre></div><div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">井号 # 用来注释，解释某一行代码的功能和作用</p>\\n</div>\\n</details>","autoDesc":true}');export{w as comp,q as data};
