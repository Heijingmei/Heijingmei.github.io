import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as p,c as e,e as a,a as n,b as s}from"./app-_tdSEuND.js";const o="/assets/image-20240515151645384-BmRiI1zY.png",i={},l=a('<h2 id="_1-字符串的定义" tabindex="-1"><a class="header-anchor" href="#_1-字符串的定义"><span>1.字符串的定义</span></a></h2><p>字符串是由字母、数字和特殊字符组成的序列。</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-创建字符串" tabindex="-1"><a class="header-anchor" href="#_2-创建字符串"><span>2. 创建字符串</span></a></h2><p>——使用单引号、双引号、或者<code>三个单(双)引号</code>(段落)</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;好&quot;</span>
number <span class="token operator">=</span> <span class="token string">&quot;18&quot;</span>
paragraph <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;Hello!
Hallo!&#39;&#39;&#39;</span>
paragraph_two <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;Hello!
Hallo!&quot;&quot;&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> number<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么<strong>Python</strong>同时支持三种创建字符串的方法？</p><ol><li>单引号，双引号</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#string = &#39;I&#39;m Lilei.&#39; 报错</span>
string <span class="token operator">=</span> <span class="token string">&quot;I&#39;m Lilei.&quot;</span> <span class="token comment">#支持单引号</span>
string <span class="token operator">=</span> <span class="token string">&quot;I&#39;m Lilei.&quot;</span>
string2 <span class="token operator">=</span><span class="token string">&#39;&quot;不好&quot;&#39;</span> <span class="token comment">#支持双引号</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">避免单双引号混用</p></div><ol start="2"><li>三个引号</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string3 <span class="token operator">=</span> &#39;<span class="token number">111</span>\\
\\
<span class="token number">222</span>\\
\\
<span class="token number">333</span>\\
&#39;
<span class="token keyword">print</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token comment">#结果不能分段</span>

string3 <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;111
222
333
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ol><li>可以原样输出（保留段落格式）</li><li>实现多行注释</li></ol></div><p>使用<code>len()</code>获取字符串长度</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;0123456789&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>10

Process finished with exit code 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-获取字符" tabindex="-1"><a class="header-anchor" href="#_3-获取字符"><span>3. 获取字符</span></a></h2><h3 id="_1-通过索引获取" tabindex="-1"><a class="header-anchor" href="#_1-通过索引获取"><span>1. 通过索引获取</span></a></h3><h4 id="_1-提取单个字符" tabindex="-1"><a class="header-anchor" href="#_1-提取单个字符"><span>1. 提取单个字符</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;123456789&quot;</span>
<span class="token comment"># 1</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
<span class="token comment"># 9</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-提取多个字符" tabindex="-1"><a class="header-anchor" href="#_2-提取多个字符"><span>2. 提取多个字符</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">#取到前面一位</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不连续字符串</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;0123456789&quot;</span>
<span class="token comment">#13579</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token comment">#              [start:end:sep] sep默认为1 start默认为最开始一位（正序为0） end默认为遍历（正序为最后一位+1，倒叙-1）</span>
<span class="token comment">#02468</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#02468</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># start默认为最开始一位 end遍历可省略</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>sep正负控制方向，大小控制步长</p></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#9876543210</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#相同</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#倒叙从-1开始</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
<span class="token comment"># select = string[-1:-11] 后者比前者小，不加-1默认无法显示</span>
string <span class="token operator">=</span> <span class="token string">&quot;I&#39;m Lilei.&quot;</span>
select <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3" tabindex="-1"><a class="header-anchor" href="#_3"><span>3.</span></a></h3><h4 id="_1-upper" tabindex="-1"><a class="header-anchor" href="#_1-upper"><span>1. <code>.upper()</code></span></a></h4><p>将字符串全部大写</p><h4 id="_2-lower" tabindex="-1"><a class="header-anchor" href="#_2-lower"><span>2. <code>.lower()</code></span></a></h4><p>将字符串全部转换为小写</p><h4 id="_3-captalize" tabindex="-1"><a class="header-anchor" href="#_3-captalize"><span>3. <code>.captalize()</code></span></a></h4><p>将字符串首字母转换为大写，其余转换为小写。（只针对第一个字母）</p><h4 id="_4-title" tabindex="-1"><a class="header-anchor" href="#_4-title"><span>4. <code>.title()</code></span></a></h4><p>将字符串中每个单词的首字母转化为大写，其余为小写。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>
up_str <span class="token operator">=</span> string<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>up_str<span class="token punctuation">)</span>
low_up_str <span class="token operator">=</span> up_str<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>low_up_str<span class="token punctuation">)</span>
cap_str <span class="token operator">=</span> string<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>cap_str<span class="token punctuation">)</span>
title_str <span class="token operator">=</span> string<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>title_str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ieliL m&#39;I
I&#39;M LILEI.
I&#39;M LILEI.
i&#39;m lilei.
I&#39;m lilei.
I&#39;M Lilei.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_5-startwith" tabindex="-1"><a class="header-anchor" href="#_5-startwith"><span>5. <code>.startwith()</code></span></a></h4><p>检测字符串是不是以特定字符或单词开头，并返回<code>布尔值</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;I&#39;m Lilei.&quot;</span>
start_i_str <span class="token operator">=</span> string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>start_i_str<span class="token punctuation">)</span>
start_I_str <span class="token operator">=</span> string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;I&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>start_I_str<span class="token punctuation">)</span>
start_I_str <span class="token operator">=</span> string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;I&#39;m&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>start_I_str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-endwith" tabindex="-1"><a class="header-anchor" href="#_6-endwith"><span>6. <code>.endwith()</code></span></a></h4><p>检测字符串是不是以特定字符或单词结尾，并返回<code>布尔值</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>end_doc_str <span class="token operator">=</span> string<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>start_i_str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-count" tabindex="-1"><a class="header-anchor" href="#_7-count"><span>7. <code>.count()</code></span></a></h4><p>计算特定字符串或者单词在目标字符串中存在的次数</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>count_i_str <span class="token operator">=</span> string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>count_i_str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>False
True
True
False
2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_8-find" tabindex="-1"><a class="header-anchor" href="#_8-find"><span>8. <code>.find()</code></span></a></h4><p>寻找特定字符或单词在特定 字符串中<strong>第一次</strong>出现的下标。（后面出现的不再记入）</p><p>如果查找的字符不存在，则返回<code>-1</code>。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>find_i_str <span class="token operator">=</span> string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>find_i_str<span class="token punctuation">)</span>
find_1_str <span class="token operator">=</span> string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>find_1_str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>5
-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_9-index" tabindex="-1"><a class="header-anchor" href="#_9-index"><span>9. <code>.index()</code></span></a></h4><p>寻找目标字符或单词在特定字符串中，第一次出现的下标。如果是查找单词，那么 index() 返回目标单词的第一个字符的下标。</p><p>如果查找的单词不存在则会报错。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>find_i_str <span class="token operator">=</span> string<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>find_i_str<span class="token punctuation">)</span>

<span class="token comment"># 5</span>

<span class="token comment"># index_1_str = string.index(&quot;1&quot;)</span>
<span class="token comment"># print(index_1_str)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    index_1_str = string.index(&quot;1&quot;)
ValueError: substring not found
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_10-isdigit" tabindex="-1"><a class="header-anchor" href="#_10-isdigit"><span>10. <code>.isdigit()</code></span></a></h4><p>判断字符串是不是纯数字字符串，如果存在非数字（比如下方空格）则报错</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;12345678&quot;</span>            <span class="token comment">#True</span>
isdigit_ <span class="token operator">=</span> string<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>isdigit_<span class="token punctuation">)</span>

string2 <span class="token operator">=</span> <span class="token string">&quot;123 45678&quot;</span>          <span class="token comment">#False</span>
isdigit_2 <span class="token operator">=</span> string2<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>isdigit_2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-isalpha" tabindex="-1"><a class="header-anchor" href="#_11-isalpha"><span>11. <code>.isalpha()</code></span></a></h4><p>判断字符串是不是纯字母字符串，如果存在非字母（比如下方空格）则报错</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;goodjob&quot;</span>            <span class="token comment">#True</span>
isalpha_<span class="token operator">=</span>string<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>isalpha_<span class="token punctuation">)</span>

string2 <span class="token operator">=</span> <span class="token string">&quot;good job&quot;</span>          <span class="token comment">#False</span>
isalpha_2 <span class="token operator">=</span> string2<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>isalpha_2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-isalpha" tabindex="-1"><a class="header-anchor" href="#_12-isalpha"><span>12. <code>.isalpha()</code></span></a></h4>`,70),c=n("p",null,[s("(10)"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mstyle",{mathcolor:"#cc0000"},[n("mtext",null,"\\and")])]),n("annotation",{encoding:"application/x-tex"},"\\and")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord text",style:{color:"#cc0000"}},[n("span",{class:"mord",style:{color:"#cc0000"}},"\\and")])])])]),s("​(11)")],-1),u=a(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;1niceday&quot;</span>            <span class="token comment">#True</span>
isalnum_<span class="token operator">=</span>string<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>isalnum_<span class="token punctuation">)</span>

string2 <span class="token operator">=</span> <span class="token string">&quot;1nice day&quot;</span>          <span class="token comment">#False</span>
isalnum_2 <span class="token operator">=</span> string2<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>isalnum_2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_13-isupper" tabindex="-1"><a class="header-anchor" href="#_13-isupper"><span>13. <code>.isupper()</code></span></a></h4><p>判断是否全部为大写</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;I&#39;m Lilei.&quot;</span>
up_str <span class="token operator">=</span> string<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>up_str<span class="token punctuation">)</span>
up_result <span class="token operator">=</span> up_str<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>up_result<span class="token punctuation">)</span>  <span class="token comment"># True 空格等其他内容不作判断</span>

string2 <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span>
up_str2 <span class="token operator">=</span> string2<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>up_str2<span class="token punctuation">)</span>
up_result <span class="token operator">=</span> up_str2<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>up_result<span class="token punctuation">)</span> <span class="token comment"># False 不存在字母</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_14-islower" tabindex="-1"><a class="header-anchor" href="#_14-islower"><span>14.<code>.islower()</code></span></a></h4><p>判断是否全部为小写</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> I&#39;M LILEI<span class="token punctuation">.</span>
low_str <span class="token operator">=</span> string<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>low_str<span class="token punctuation">)</span>
low_result <span class="token operator">=</span> low_str<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>low_result<span class="token punctuation">)</span>               <span class="token comment"># True</span>

string2 <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span>
low_str2 <span class="token operator">=</span> string2<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>low_str2<span class="token punctuation">)</span>
low_result <span class="token operator">=</span> low_str2<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>up_result<span class="token punctuation">)</span>                <span class="token comment"># False</span>
string2 <span class="token operator">=</span> <span class="token string">&quot;你好a&quot;</span>
low_str2 <span class="token operator">=</span> string2<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>low_str2<span class="token punctuation">)</span>
low_result <span class="token operator">=</span> low_str2<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>low_result<span class="token punctuation">)</span>               <span class="token comment"># True 存在字母，且字母都为小写</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_15-isspapce" tabindex="-1"><a class="header-anchor" href="#_15-isspapce"><span>15. <code>.isspapce()</code></span></a></h4><p>判断是否全部为<code>空字符</code>（空格），纯空格返回<code>True</code>，否则返回<code>False</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
place_ <span class="token operator">=</span> string<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>place_<span class="token punctuation">)</span>                 <span class="token comment">#False</span>

string <span class="token operator">=</span> <span class="token string">&quot; &quot;</span>
place_ <span class="token operator">=</span> string<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>place_<span class="token punctuation">)</span>                 <span class="token comment">#True</span>

string <span class="token operator">=</span> <span class="token string">&quot;                                                                                                                                      &quot;</span> <span class="token comment">#文本换行，但是实际没有换行</span>
place_ <span class="token operator">=</span> string<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>place_<span class="token punctuation">)</span>                 <span class="token comment">#True</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_16-strip" tabindex="-1"><a class="header-anchor" href="#_16-strip"><span>16. <code>.strip()</code></span></a></h4><p>默认去掉字符串前后的<code>空白字符</code>，如果指定参数，则去掉指定字符。</p><p>去掉字符的个数不限，但是只能去掉连续的内容</p><p>想要去掉所有的内容，可以用[.replace()](#__21. \`.replace())实现</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;  0123456  &quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;string&gt;&gt;&gt;&#39;</span><span class="token punctuation">,</span> string<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
strip_ <span class="token operator">=</span> string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;strip&gt;&gt;&gt;&#39;</span><span class="token punctuation">,</span> strip_<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>

string <span class="token operator">=</span> <span class="token string">&quot; &quot;</span>
strip_ <span class="token operator">=</span> string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>strip_<span class="token punctuation">)</span> <span class="token comment"># 什么都没有了</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;注意上方还有一个知识点&quot;</span><span class="token punctuation">)</span>
string <span class="token operator">=</span> <span class="token string">&quot;11101234561111&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;string&gt;&gt;&gt;&#39;</span><span class="token punctuation">,</span> string<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 所有&quot;1&quot;都去掉，个数不限，但是</span>
strip_ <span class="token operator">=</span> string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;strip&quot;1”&gt;&gt;&gt;&#39;</span><span class="token punctuation">,</span> strip_<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>   <span class="token comment"># 只能去掉连续的内容</span>

string <span class="token operator">=</span> <span class="token string">&quot;111 1234561111&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\nstring&gt;&gt;&gt;&#39;</span><span class="token punctuation">,</span> string<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> 
strip_ <span class="token operator">=</span> string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;strip&gt;&gt;&gt;&#39;</span><span class="token punctuation">,</span> strip_<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>   <span class="token comment"># 只能去掉连续的内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>string&gt;&gt;&gt;  0123456  
strip&gt;&gt;&gt;0123456

注意上方还有一个知识点
string&gt;&gt;&gt;11101234561111
strip&quot;1”&gt;&gt;&gt;0123456

string&gt;&gt;&gt;111 1234561111
strip&gt;&gt;&gt; 123456
\\
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>⚠️注意</p><p>如果想去掉两种及以上内容，写出.strip(“”,“”)是 不对的</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>strip_ <span class="token operator">=</span> string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>TypeError: strip expected at most 1 argument, got 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接在strip(“”)写入两种（及以上）内容即可。去掉的内容不计前后顺序</p></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;111 1234561111&quot;</span>
strip_ <span class="token operator">=</span> string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot;1 &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;strip&quot;1 &quot;&gt;&gt;&gt;&#39;</span><span class="token punctuation">,</span> strip_<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>    <span class="token comment"># 不计前后顺序</span>
strip_2 <span class="token operator">=</span> string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot; 1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;strip&quot; 1&quot;&gt;&gt;&gt;&#39;</span><span class="token punctuation">,</span> strip_2<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>   <span class="token comment"># 不计前后顺序</span>
strip_2 <span class="token operator">=</span> string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;strip&quot;11&quot;&gt;&gt;&gt;&#39;</span><span class="token punctuation">,</span> strip_2<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>   <span class="token comment"># 不计前后顺序，等价于.strip(&quot;1&quot;)</span>
strip_2 <span class="token operator">=</span> string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot;2 1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;strip&quot;2 1&quot;&gt;&gt;&gt;&#39;</span><span class="token punctuation">,</span> strip_2<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_17-lstrip" tabindex="-1"><a class="header-anchor" href="#_17-lstrip"><span>17. <code>.lstrip()</code></span></a></h4><p>默认去掉字符串左边（前边）的<code>空白字符</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;  0123456  &quot;</span>
strip_ <span class="token operator">=</span> string<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>strip_<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_18-rstrip" tabindex="-1"><a class="header-anchor" href="#_18-rstrip"><span>18. <code>.rstrip()</code></span></a></h4><p>默认去掉字符串右边（后边）的<code>空白字符</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;  0123456  &quot;</span>
strip_ <span class="token operator">=</span> string<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>strip_<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_19-split" tabindex="-1"><a class="header-anchor" href="#_19-split"><span>19. <code>.split()</code></span></a></h4><p>split(<code>sep</code>)进行指定分割</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string2<span class="token operator">=</span> string_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span>

string3 <span class="token operator">=</span> <span class="token string">&quot;1-2-3-4-5-6-7-8-9&quot;</span>
split_str3 <span class="token operator">=</span> string3<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>split_str3<span class="token punctuation">)</span>
split_str3<span class="token operator">=</span> string3<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>split_str3<span class="token punctuation">)</span>

string4 <span class="token operator">=</span> <span class="token string">&quot;1---2--3-4-5-6-7-8-9&quot;</span>
split_str4 <span class="token operator">=</span> string4<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>split_str4<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>split(<code>sep</code>,<code>maxsplit</code>)指定分割次数</p><h4 id="_20-rplit" tabindex="-1"><a class="header-anchor" href="#_20-rplit"><span>20. <code>.rplit()</code></span></a></h4><p><code>rplit(sep, maxsplit)</code>从字符串右边进行分割，也可以传入参数<code>sep</code>。<code>maxsplit</code>指定分割次数</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>split_str4 <span class="token operator">=</span> string4<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>split_str4<span class="token punctuation">)</span>

split_str4 <span class="token operator">=</span> string4<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>split_str4<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不指定<code>maxsplit</code> 二者相同</p><hr><h4 id="_21-replace" tabindex="-1"><a class="header-anchor" href="#_21-replace"><span>21. <code>.replace()</code></span></a></h4><p><code>.replace(old,new,count)</code>，<code>count</code>表示替换多少次，比如其中有4处可替换文本，但是<code>count</code>数目等于<code>3</code>，只替换前<code>3</code>次</p><p>如果没有数目默认全部替换</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string_ <span class="token operator">=</span> <span class="token string">&quot;Ue b e r s e t z u n g&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string_<span class="token punctuation">)</span>

string <span class="token operator">=</span> string_<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-join" tabindex="-1"><a class="header-anchor" href="#_4-join"><span>4. <code>join</code></span></a></h3><p>以特定字符串进行间隔</p><p>&quot;<code>字符内容</code>&quot;.join(string)</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Übersetzung&quot;</span>
join_str <span class="token operator">=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>join_str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-字符串格式化输出" tabindex="-1"><a class="header-anchor" href="#_5-字符串格式化输出"><span>5. 字符串格式化输出</span></a></h3><h4 id="_2-字符串变量-相加" tabindex="-1"><a class="header-anchor" href="#_2-字符串变量-相加"><span>2. 字符串变量“相加”</span></a></h4><p>可以将字符串变量“相加”，即按先后顺序排列到一起</p><p>和数字加法不同，因此数字型和字符型不能相加</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token comment">#Hi,welcome to Xiameng </span>
<span class="token comment">#Hi,welcome to Xiameng </span>
<span class="token comment">#Hi,welcome to Xiameng </span>
<span class="token comment">#Hi, welcome  to  Xiameng  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-一并输出数字" tabindex="-1"><a class="header-anchor" href="#_2-一并输出数字"><span>2. 一并输出数字</span></a></h5><p>如果想一并输出数字，可以使用<code>str</code>将数字（数字型变量）转换为字符串</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>time <span class="token operator">=</span> <span class="token number">2024</span>
string <span class="token operator">=</span> str1 <span class="token operator">+</span> str2 <span class="token operator">+</span> str3 <span class="token operator">+</span> str4 <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
string <span class="token operator">=</span> str1 <span class="token operator">+</span> str2 <span class="token operator">+</span> str3 <span class="token operator">+</span> str4 <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-在文本内部插入其他输入内容" tabindex="-1"><a class="header-anchor" href="#_3-在文本内部插入其他输入内容"><span>3. 在文本内部插入其他输入内容</span></a></h5><p>如果想从一段文本中间插入内容，而不是补到末尾，可以使用<code>带“{}”的字符串</code>+<code>.format(&quot;&quot;)</code>将文本填入“{}”中</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>template_str <span class="token operator">=</span> <span class="token string">&quot;Hi {}, welcome to Xiameng 2024&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>template_str<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>template_str<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;Lilei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
string1 <span class="token operator">=</span> str1 <span class="token operator">+</span><span class="token string">&quot;{}, &quot;</span><span class="token operator">+</span> str2 <span class="token operator">+</span> str3 <span class="token operator">+</span> str4 <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string1<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;Lilei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>如果有多个“<code>{}</code>”，则用<code>,</code>分割填入的内容，按从左到右的顺序填充</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string2 <span class="token operator">=</span> <span class="token string">&quot;Hi {}, welcome to {}&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string2<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;W&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;厦门&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#---output---</span>
<span class="token comment">#Hi W, welcome to 厦门</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="指定参数" tabindex="-1"><a class="header-anchor" href="#指定参数"><span>指定参数</span></a></h4><h5 id="_4-参数顺序指定-改变填充顺序" tabindex="-1"><a class="header-anchor" href="#_4-参数顺序指定-改变填充顺序"><span>4. 参数顺序指定（改变填充顺序）</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string3 <span class="token operator">=</span> <span class="token string">&quot;Hi {1}, welcome to {0}&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string3<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span> <span class="token string">&quot;厦门&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;W&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#---output---</span>
<span class="token comment">#Hi W, welcome to 厦门</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="_5-参数名称指定-固定模版在先" tabindex="-1"><a class="header-anchor" href="#_5-参数名称指定-固定模版在先"><span>5. 参数名称指定(固定模版在先)</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Hi {name},welcome to {region}.&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;W&quot;</span><span class="token punctuation">,</span> region<span class="token operator">=</span><span class="token string">&quot;Germany&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
template_str <span class="token operator">=</span> <span class="token string">&quot;Hi {name},welcome to {region}&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>template_str<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>region<span class="token operator">=</span><span class="token string">&quot;Germany&quot;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;W&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#可以改变顺序</span>
<span class="token comment">#---output---</span>
<span class="token comment">#Hi W,welcome to Germany.</span>
<span class="token comment">#Hi W,welcome to Germany.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_5-2-直接读取变量-传入参数在先" tabindex="-1"><a class="header-anchor" href="#_5-2-直接读取变量-传入参数在先"><span>5.2.直接读取变量（传入参数在先）</span></a></h6><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;Lilei&quot;</span>
region <span class="token operator">=</span> <span class="token string">&quot;厦门&quot;</span>
string <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;Hi </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">, welcome to </span><span class="token interpolation"><span class="token punctuation">{</span>region<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token comment">#---output---</span>
<span class="token comment">#Hi Lilei, welcome to 厦门</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-插入数字型-并保留特定小数位" tabindex="-1"><a class="header-anchor" href="#_6-插入数字型-并保留特定小数位"><span>6.插入数字型，并保留特定小数位</span></a></h5><p>使用<code>带“{:.type}”的数字型</code>+<code>.format(&quot;&quot;)</code>将文本填入“{}”中</p><p><code>:.type</code> 可以为下方的</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Money is {:.3f}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">)</span>  <span class="token comment"># .3f 浮点数保留三位小数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

<span class="token comment">#---output---</span>
<span class="token comment">#Money is 190.000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_6-2-传入参数在先" tabindex="-1"><a class="header-anchor" href="#_6-2-传入参数在先"><span>6.2.（传入参数在先）</span></a></h6><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>money <span class="token operator">=</span> <span class="token number">190</span>
string <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;Money is </span><span class="token interpolation"><span class="token punctuation">{</span>money<span class="token punctuation">:</span><span class="token format-spec">.3f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token comment">#---output---</span>
<span class="token comment">#Money is 190.000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="以上两次第二种方法均用到了f-内为文本内容-的形式" tabindex="-1"><a class="header-anchor" href="#以上两次第二种方法均用到了f-内为文本内容-的形式"><span>以上两次第二种方法均用到了<code>f&quot;&quot;</code> (““内为文本内容)的形式</span></a></h4><h3 id="_6-格式化-固定模版在先" tabindex="-1"><a class="header-anchor" href="#_6-格式化-固定模版在先"><span>6. %格式化（固定模版在先）</span></a></h3><ul><li><code>%d</code> 整数</li><li><code>%s</code> 字符串</li><li><code>%f</code> 浮点数</li></ul><h4 id="_1-单个位置传入" tabindex="-1"><a class="header-anchor" href="#_1-单个位置传入"><span>1. 单个位置传入</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Money is %d&quot;</span> <span class="token comment">#i</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token operator">%</span><span class="token number">13</span><span class="token punctuation">)</span>  <span class="token comment">#1</span>

new_s <span class="token operator">=</span> string <span class="token operator">%</span> <span class="token number">13</span>  <span class="token comment">#2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_s<span class="token punctuation">)</span>

string <span class="token operator">=</span> <span class="token string">&quot;Money is %d&quot;</span> <span class="token operator">%</span><span class="token number">13</span> <span class="token comment">#i1\\ i2\\ 3 是等价的</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

<span class="token comment">#---output---#</span>
<span class="token comment">#Money is 13</span>
<span class="token comment">#Money is 13</span>
<span class="token comment">#Money is 13</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-多个位置传入" tabindex="-1"><a class="header-anchor" href="#_2-多个位置传入"><span>2. 多个位置传入</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Money is %d, %s&quot;</span>

new_s <span class="token operator">=</span> string <span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">1300</span><span class="token punctuation">,</span> <span class="token string">&quot;超有钱&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_s<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">1300</span><span class="token punctuation">,</span><span class="token string">&#39;超有钱&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

string <span class="token operator">=</span> <span class="token string">&quot;Money is %d, %s&quot;</span> <span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">1300</span><span class="token punctuation">,</span><span class="token string">&#39;超有钱&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

<span class="token comment">#---output---#</span>
<span class="token comment">#Money is 1300, 超有钱</span>
<span class="token comment">#Money is 1300, 超有钱</span>
<span class="token comment">#Money is 1300, 超有钱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-保留小数位" tabindex="-1"><a class="header-anchor" href="#_3-保留小数位"><span>3.保留小数位</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Money is %.2f&quot;</span>
new_s <span class="token operator">=</span> string <span class="token operator">%</span> <span class="token number">18</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_s<span class="token punctuation">)</span>

string <span class="token operator">=</span> <span class="token string">&quot;Money is %.2f&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token operator">%</span><span class="token number">18</span><span class="token punctuation">)</span>

string <span class="token operator">=</span> <span class="token string">&quot;Money is %.2f&quot;</span> <span class="token operator">%</span><span class="token number">18</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

<span class="token comment">#---output---</span>
<span class="token comment"># Money is 18.00</span>
<span class="token comment"># Money is 18.00</span>
<span class="token comment"># Money is 180.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-字符串不可变性" tabindex="-1"><a class="header-anchor" href="#_7-字符串不可变性"><span>7. 字符串不可变性</span></a></h4><p>字符串是不可变的，除重新赋值外，不可以改变字符串中的任何元素。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#output:h</span>

<span class="token comment"># s[0] = &quot;a&quot;</span>
<span class="token comment"># Traceback (most recent call last):</span>
<span class="token comment">#     s[0] = &quot;a&quot;</span>
<span class="token comment"># TypeError: &#39;str&#39; object does not support item assignment</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要改变字符串中的元素，则需要新建一个字符串。</p><p>或者使用<code>replace</code>替代掉之前的一些字符。</p><p>此外还可以使用**<u>字符串拼接</u>**</p><h5 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span>字符串拼接</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
news <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token operator">+</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">#s[1:]为第1位到最后</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span>

<span class="token comment">#---output---</span>
<span class="token comment">#aello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-字符串转义" tabindex="-1"><a class="header-anchor" href="#_8-字符串转义"><span>8. 字符串转义</span></a></h4><table><thead><tr><th>转义字符</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td><code>\\\\</code></td><td>在字符串中得到<code>\\</code></td><td><code>s = &quot;a\\\\b\\\\c&quot;</code></td></tr><tr><td><code>\\b</code></td><td>退格，删除<code>\\b</code>前一位的内容，类似删除键</td><td><code>s = &quot;a\\\\\\b\\\\c&quot;</code><br><code>s = &quot;a\\b\\\\c&quot;</code></td></tr><tr><td><code>\\t</code></td><td>在字符串中得到<strong>制表符</strong></td><td><code>s = &quot;a\\tb\\\\c&quot;</code></td></tr><tr><td><code>\\n</code></td><td>换行</td><td><code>s = &quot;a\\nb\\\\c&quot;</code></td></tr><tr><td></td><td></td><td></td></tr><tr><td><code>r</code>或<code>R</code></td><td>取消转义</td><td><code>s = r&quot;a\\\\\\b\\\\c&quot;</code><br><code>s = r&quot;a\\b\\c&quot;</code></td></tr></tbody></table><blockquote><p>output</p><p>a\\b\\c a\\c \\c a b\\c a b\\c</p></blockquote><blockquote><p>a\\\\\\b\\c a\\b\\c</p></blockquote><h4 id="_9-字符串的连接-含字符串-乘法" tabindex="-1"><a class="header-anchor" href="#_9-字符串的连接-含字符串-乘法"><span>9. 字符串的连接(含字符串“乘法”)</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>s1 <span class="token operator">=</span><span class="token string">&quot;Happy&quot;</span>
s2 <span class="token operator">=</span> <span class="token string">&quot;Birthday&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">+</span>s2<span class="token punctuation">)</span> <span class="token comment">#形成了一个新的字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span> <span class="token comment">#两个独立的字符串（且输出默认有空格间隔）</span>

<span class="token comment"># “乘法”</span>
s1 <span class="token operator">=</span><span class="token string">&quot;-Happy&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot;-\\n&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>HappyBirthday
Happy Birthday
-Happy-Happy-Happy-Happy-Happy-Happy-Happy-Happy-Happy-Happy
-Happy-Happy-Happy-Happy-Happy-Happy-Happy-Happy-Happy-Happy-
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-读取用户输入input" tabindex="-1"><a class="header-anchor" href="#_10-读取用户输入input"><span>10.读取用户输入<code>input()</code></span></a></h4><h5 id="_1-使用input" tabindex="-1"><a class="header-anchor" href="#_1-使用input"><span>1. 使用<code>input</code></span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>user_input<span class="token punctuation">)</span>

<span class="token comment">#---terminal---</span>
<span class="token comment"># 123</span>
<span class="token comment"># output</span>
<span class="token comment"># 123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-在input里面输入打印提示" tabindex="-1"><a class="header-anchor" href="#_2-在input里面输入打印提示"><span>2. 在<code>input</code>里面输入打印提示</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your name&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>user_input<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>Enter your name<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>W
W
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="注-input里面得到的都是字符串" tabindex="-1"><a class="header-anchor" href="#注-input里面得到的都是字符串"><span>注：<code>input</code>里面得到的都是字符串</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token punctuation">(</span><span class="token punctuation">.</span>venv<span class="token punctuation">)</span> ➜  pythonProject ✗ ipython

In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>good job
Out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">str</span>

In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">123</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">str</span>

In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">123.1</span>
Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">str</span>

In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">str</span>

In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
Out<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">str</span>

In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>
Out<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">str</span>

In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span>
Out<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">str</span>

In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token boolean">True</span>
Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">str</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要输入其他类型，需要进行<strong>类型转换</strong></p><h5 id="_3-类型转换" tabindex="-1"><a class="header-anchor" href="#_3-类型转换"><span>3. 类型转换</span></a></h5><h5 id="方法1-强制类型转换" tabindex="-1"><a class="header-anchor" href="#方法1-强制类型转换"><span>方法1: 强制类型转换</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">12</span>

In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">int</span>

In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment">#list存在一些问题</span>

In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">123</span>

In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> l <span class="token comment">#该输入内容会被强制转换为列表</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span>

In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">list</span>

In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  
Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;\\udce3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">]</span>

<span class="token comment">#所以按照之前list的格式放入input反而是错误的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>适合：确定变量类型中的：数字（整数、浮点数）、字符串、布尔型</li><li>不适合：列表、元组、字典、集合；不确定的变量类型</li></ul><h5 id="方法2-使用eval" tabindex="-1"><a class="header-anchor" href="#方法2-使用eval"><span>方法2：使用<code>eval()</code></span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">12</span>

In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">12.1</span>

In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">12.1</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   

In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>        

In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span> 

In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token boolean">True</span>

In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="eval-不能识别的内容" tabindex="-1"><a class="header-anchor" href="#eval-不能识别的内容"><span><code>eval()</code>不能识别的内容</span></a></h6><ul><li>空白的内容</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code> <span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
 <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 File <span class="token string">&quot;&lt;string&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">0</span>
    
SyntaxError<span class="token punctuation">:</span> unexpected EOF <span class="token keyword">while</span> parsing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>❌未加引号的字符串</li></ul><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>In [13]: s = eval(input(&#39;:&gt;&gt;&gt;&#39;))
:&gt;&gt;&gt;string        
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In[13], line 1
----&gt; 1 s = eval(input(&#39;:&gt;&gt;&gt;&#39;))

File &lt;string&gt;:1

NameError: name &#39;string&#39; is not defined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>string</code>被识别为了一个变量，由于这个变量没有给出所以报错</p></blockquote><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>print(string)
s = eval(input(&#39;:&gt;&gt;&gt;&#39;))
print(s)

# string
# :&gt;&gt;&gt;string
# string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="eval-如何实现数据类型转换" tabindex="-1"><a class="header-anchor" href="#eval-如何实现数据类型转换"><span><code>eval()</code>如何实现数据类型转换</span></a></h6><p>字符串是外部存在引号。<code>eval()</code>则是把这样的引号去除。</p><blockquote><p>上文的<code>string</code> 没有这样的引号，如果没有定义，用于给其他变量赋值等也会报错</p></blockquote><hr><ul><li>加入引号</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>:&gt;&gt;&gt;&quot;string&quot;
string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="实现运算两个数字间的运算" tabindex="-1"><a class="header-anchor" href="#实现运算两个数字间的运算"><span>实现运算两个数字间的运算</span></a></h6><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#------</span>
<span class="token comment"># :&gt;&gt;&gt;1+1</span>
<span class="token comment"># 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span>
Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span>

In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">3</span>
Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span>

In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span>
Out<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0.6666666666666666</span>

In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;:&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span>
Out<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>练习</p><details class="hint-container details"><summary>通过一个input，实现两个数字的运算</summary><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>add <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;two numbers separated by&quot; &quot;&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">float</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

sub <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;two numbers separated by&quot; &quot;&gt;&gt;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span><span class="token string">&quot;+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,129),r=[l,c,u];function d(k,v){return p(),e("div",null,r)}const g=t(i,[["render",d],["__file","note3.html.vue"]]),h=JSON.parse(`{"path":"/zh/Lilya/program/python/note3.html","title":"03-字符串","lang":"zh-CN","frontmatter":{"title":"03-字符串","author":"黑静美","category":["编程"],"tag":["python"],"icon":"/ico/Python.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"1.字符串的定义 字符串是由字母、数字和特殊字符组成的序列。 2. 创建字符串 ——使用单引号、双引号、或者三个单(双)引号(段落) 为什么Python同时支持三种创建字符串的方法？ 单引号，双引号 避免单双引号混用 三个引号 相关信息 可以原样输出（保留段落格式） 实现多行注释 使用len()获取字符串长度 3. 获取字符 1. 通过索引获取 1. ...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/python/note3.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"03-字符串"}],["meta",{"property":"og:description","content":"1.字符串的定义 字符串是由字母、数字和特殊字符组成的序列。 2. 创建字符串 ——使用单引号、双引号、或者三个单(双)引号(段落) 为什么Python同时支持三种创建字符串的方法？ 单引号，双引号 避免单双引号混用 三个引号 相关信息 可以原样输出（保留段落格式） 实现多行注释 使用len()获取字符串长度 3. 获取字符 1. 通过索引获取 1. ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-12T09:02:01.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:modified_time","content":"2024-06-12T09:02:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03-字符串\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-12T09:02:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":2,"title":"1.字符串的定义","slug":"_1-字符串的定义","link":"#_1-字符串的定义","children":[]},{"level":2,"title":"2. 创建字符串","slug":"_2-创建字符串","link":"#_2-创建字符串","children":[]},{"level":2,"title":"3. 获取字符","slug":"_3-获取字符","link":"#_3-获取字符","children":[{"level":3,"title":"1. 通过索引获取","slug":"_1-通过索引获取","link":"#_1-通过索引获取","children":[{"level":4,"title":"1. 提取单个字符","slug":"_1-提取单个字符","link":"#_1-提取单个字符","children":[]},{"level":4,"title":"2. 提取多个字符","slug":"_2-提取多个字符","link":"#_2-提取多个字符","children":[]}]},{"level":3,"title":"3.","slug":"_3","link":"#_3","children":[{"level":4,"title":"1. .upper()","slug":"_1-upper","link":"#_1-upper","children":[]},{"level":4,"title":"2. .lower()","slug":"_2-lower","link":"#_2-lower","children":[]},{"level":4,"title":"3. .captalize()","slug":"_3-captalize","link":"#_3-captalize","children":[]},{"level":4,"title":"4. .title()","slug":"_4-title","link":"#_4-title","children":[]},{"level":4,"title":"5. .startwith()","slug":"_5-startwith","link":"#_5-startwith","children":[]},{"level":4,"title":"6. .endwith()","slug":"_6-endwith","link":"#_6-endwith","children":[]},{"level":4,"title":"7. .count()","slug":"_7-count","link":"#_7-count","children":[]},{"level":4,"title":"8. .find()","slug":"_8-find","link":"#_8-find","children":[]},{"level":4,"title":"9. .index()","slug":"_9-index","link":"#_9-index","children":[]},{"level":4,"title":"10. .isdigit()","slug":"_10-isdigit","link":"#_10-isdigit","children":[]},{"level":4,"title":"11. .isalpha()","slug":"_11-isalpha","link":"#_11-isalpha","children":[]},{"level":4,"title":"12. .isalpha()","slug":"_12-isalpha","link":"#_12-isalpha","children":[]},{"level":4,"title":"13. .isupper()","slug":"_13-isupper","link":"#_13-isupper","children":[]},{"level":4,"title":"14..islower()","slug":"_14-islower","link":"#_14-islower","children":[]},{"level":4,"title":"15. .isspapce()","slug":"_15-isspapce","link":"#_15-isspapce","children":[]},{"level":4,"title":"16. .strip()","slug":"_16-strip","link":"#_16-strip","children":[]},{"level":4,"title":"17. .lstrip()","slug":"_17-lstrip","link":"#_17-lstrip","children":[]},{"level":4,"title":"18. .rstrip()","slug":"_18-rstrip","link":"#_18-rstrip","children":[]},{"level":4,"title":"19. .split()","slug":"_19-split","link":"#_19-split","children":[]},{"level":4,"title":"20. .rplit()","slug":"_20-rplit","link":"#_20-rplit","children":[]},{"level":4,"title":"21. .replace()","slug":"_21-replace","link":"#_21-replace","children":[]}]},{"level":3,"title":"4. join","slug":"_4-join","link":"#_4-join","children":[]},{"level":3,"title":"5. 字符串格式化输出","slug":"_5-字符串格式化输出","link":"#_5-字符串格式化输出","children":[{"level":4,"title":"2. 字符串变量“相加”","slug":"_2-字符串变量-相加","link":"#_2-字符串变量-相加","children":[{"level":5,"title":"2. 一并输出数字","slug":"_2-一并输出数字","link":"#_2-一并输出数字","children":[]},{"level":5,"title":"3. 在文本内部插入其他输入内容","slug":"_3-在文本内部插入其他输入内容","link":"#_3-在文本内部插入其他输入内容","children":[]}]},{"level":4,"title":"指定参数","slug":"指定参数","link":"#指定参数","children":[{"level":5,"title":"4. 参数顺序指定（改变填充顺序）","slug":"_4-参数顺序指定-改变填充顺序","link":"#_4-参数顺序指定-改变填充顺序","children":[]},{"level":5,"title":"5. 参数名称指定(固定模版在先)","slug":"_5-参数名称指定-固定模版在先","link":"#_5-参数名称指定-固定模版在先","children":[{"level":6,"title":"5.2.直接读取变量（传入参数在先）","slug":"_5-2-直接读取变量-传入参数在先","link":"#_5-2-直接读取变量-传入参数在先","children":[]}]},{"level":5,"title":"6.插入数字型，并保留特定小数位","slug":"_6-插入数字型-并保留特定小数位","link":"#_6-插入数字型-并保留特定小数位","children":[{"level":6,"title":"6.2.（传入参数在先）","slug":"_6-2-传入参数在先","link":"#_6-2-传入参数在先","children":[]}]}]},{"level":4,"title":"以上两次第二种方法均用到了f\\"\\" (““内为文本内容)的形式","slug":"以上两次第二种方法均用到了f-内为文本内容-的形式","link":"#以上两次第二种方法均用到了f-内为文本内容-的形式","children":[]}]},{"level":3,"title":"6. %格式化（固定模版在先）","slug":"_6-格式化-固定模版在先","link":"#_6-格式化-固定模版在先","children":[{"level":4,"title":"1. 单个位置传入","slug":"_1-单个位置传入","link":"#_1-单个位置传入","children":[]},{"level":4,"title":"2. 多个位置传入","slug":"_2-多个位置传入","link":"#_2-多个位置传入","children":[]},{"level":4,"title":"3.保留小数位","slug":"_3-保留小数位","link":"#_3-保留小数位","children":[]},{"level":4,"title":"7. 字符串不可变性","slug":"_7-字符串不可变性","link":"#_7-字符串不可变性","children":[{"level":5,"title":"字符串拼接","slug":"字符串拼接","link":"#字符串拼接","children":[]}]},{"level":4,"title":"8. 字符串转义","slug":"_8-字符串转义","link":"#_8-字符串转义","children":[]},{"level":4,"title":"9. 字符串的连接(含字符串“乘法”)","slug":"_9-字符串的连接-含字符串-乘法","link":"#_9-字符串的连接-含字符串-乘法","children":[]},{"level":4,"title":"10.读取用户输入input()","slug":"_10-读取用户输入input","link":"#_10-读取用户输入input","children":[{"level":5,"title":"1. 使用input","slug":"_1-使用input","link":"#_1-使用input","children":[]},{"level":5,"title":"2. 在input里面输入打印提示","slug":"_2-在input里面输入打印提示","link":"#_2-在input里面输入打印提示","children":[]},{"level":5,"title":"注：input里面得到的都是字符串","slug":"注-input里面得到的都是字符串","link":"#注-input里面得到的都是字符串","children":[]},{"level":5,"title":"3. 类型转换","slug":"_3-类型转换","link":"#_3-类型转换","children":[]},{"level":5,"title":"方法1: 强制类型转换","slug":"方法1-强制类型转换","link":"#方法1-强制类型转换","children":[]},{"level":5,"title":"方法2：使用eval()","slug":"方法2-使用eval","link":"#方法2-使用eval","children":[{"level":6,"title":"eval()不能识别的内容","slug":"eval-不能识别的内容","link":"#eval-不能识别的内容","children":[]},{"level":6,"title":"eval()如何实现数据类型转换","slug":"eval-如何实现数据类型转换","link":"#eval-如何实现数据类型转换","children":[]},{"level":6,"title":"实现运算两个数字间的运算","slug":"实现运算两个数字间的运算","link":"#实现运算两个数字间的运算","children":[]}]}]}]}]}],"git":{"createdTime":1718182921000,"updatedTime":1718182921000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":11.2,"words":3359},"filePathRelative":"zh/Lilya/program/python/note3.md","localizedDate":"2024年6月12日","excerpt":"<h2>1.字符串的定义</h2>\\n<p>字符串是由字母、数字和特殊字符组成的序列。</p>\\n<figure><figcaption></figcaption></figure>\\n<h2>2. 创建字符串</h2>\\n<p>——使用单引号、双引号、或者<code>三个单(双)引号</code>(段落)</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code>name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"好\\"</span>\\nnumber <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"18\\"</span>\\nparagraph <span class=\\"token operator\\">=</span> <span class=\\"token triple-quoted-string string\\">'''Hello!\\nHallo!'''</span>\\nparagraph_two <span class=\\"token operator\\">=</span> <span class=\\"token triple-quoted-string string\\">\\"\\"\\"Hello!\\nHallo!\\"\\"\\"</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>name <span class=\\"token operator\\">+</span> number<span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{g as comp,h as data};
