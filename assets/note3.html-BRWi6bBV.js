import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,b as s,d as e,e as l}from"./app-C4I0sDgk.js";const i={},u={href:"https://bornforthis.cn/column/Rust/01.html",target:"_blank",rel:"noopener noreferrer"},r=l(`<h2 id="_2-rust-中的控制流" tabindex="-1"><a class="header-anchor" href="#_2-rust-中的控制流"><span>2. Rust 中的控制流</span></a></h2><p>下面我们来了解一下 Rust 语言的控制流语句。</p><h4 id="_1-分支语句-if-else" tabindex="-1"><a class="header-anchor" href="#_1-分支语句-if-else"><span>1. 分支语句 <code>if else</code></span></a></h4><p>Rust 中使用 if else 来构造分支。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断数字number能被4，3，2中的哪一个数字整除</span>
    <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number is divisible by 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number is divisible by 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number is divisible by 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number is not divisible by 4, 3, or 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与其他 C 系语言不同，Rust 中 if 后面的条件表达式不推荐用 <code>()</code> 包裹起来，因为 Rust 设计者认为那个是不必要的，是多余的语法噪音。</p><p>还要注意一点，if else <strong>支持表达式返回</strong>。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 在这里，if else 返回了值</span>
    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token comment">// 代码块结尾最后一句不加分号，表示把值返回回去</span>
        <span class="token number">100</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 代码块结尾最后一句不加分号，表示把值返回回去</span>
        <span class="token number">101</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;y is {}&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像上面这样的代码，其实已经实现了类似于 C 语言中的<strong>三目运算符</strong>这样的设计，在 Rust 中，不需要额外提供那样的特殊语法。</p><h3 id="_2-循环语句" tabindex="-1"><a class="header-anchor" href="#_2-循环语句"><span>2. 循环语句</span></a></h3><p>Rust 中有三种循环语句，分别是 loop、while、for。</p><h4 id="loop-用于无条件-无限-循环。" tabindex="-1"><a class="header-anchor" href="#loop-用于无条件-无限-循环。"><span><code>loop</code> 用于无条件（无限）循环。</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 这里，接收从循环体中返回的值，对result进行初始化</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> counter <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">{</span>
            <span class="token comment">// 使用break跳出循环，同时带一个返回值回去</span>
            <span class="token keyword">break</span> counter <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The result is {result}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请仔细品味这个例子，这种<strong>返回一个值到外面对一个变量初始化的方式</strong>，是 Rust 中的习惯用法，这能让代码更紧凑。</p><h4 id="while-循环为条件判断循环。" tabindex="-1"><a class="header-anchor" href="#while-循环为条件判断循环。"><span><code>while</code> 循环为条件判断循环。</span></a></h4><p>当后面的条件为真的时候，执行循环体里面的代码。和前面的 if 语句一样，Rust 中的 while 后面的条件表达式不推荐用 <code>()</code> 包裹起来。比如：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{number}!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        number <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;LIFTOFF!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="for-循环在-rust-中-基本上只用于-迭代器-的遍历。" tabindex="-1"><a class="header-anchor" href="#for-循环在-rust-中-基本上只用于-迭代器-的遍历。"><span><code>for</code> 循环在 Rust 中，基本上只用于**<u>迭代器</u>**的遍历。</span></a></h4><p>Rust 中没有 C 语言那种 for 循环风格的语法支持，因为那被认为是一种不好的设计。</p><p>你可以看一下下面的代码，就是对一个数组进行遍历。</p><h6 id="for-element-in" tabindex="-1"><a class="header-anchor" href="#for-element-in"><span><code>for</code>+ element+ <code> in</code></span></a></h6><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> element <span class="token keyword">in</span> a <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;the value is: {element}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码对动态数组 Vec 的遍历阻止了越界的可能性，因此用这种方式访问 Vec 比用下标索引的方式访问更加安全。</p><p>对于循环的场景，Rust 还提供了一个便捷的语法来生成遍历区间： <code>..</code>（两个点）。</p><p>请看下面的示例。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 左闭右开区间</span>
    <span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">4</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{number}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 左闭右闭区间</span>
    <span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">4</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{number}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 反向</span>
    <span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{number}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token operator">-</span><span class="token operator">-</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
<span class="token operator">-</span><span class="token operator">-</span>
<span class="token number">3</span>
<span class="token number">2</span>
<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再来试试打印字符。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">..=</span><span class="token char">&#39;z&#39;</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{ch}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出：</span>
a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
y
z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>嘿，Rust 很智能啊！</p><h2 id="_3-rust-中的函数和模块-各种代码块" tabindex="-1"><a class="header-anchor" href="#_3-rust-中的函数和模块-各种代码块"><span>3. Rust 中的函数和模块 （各种代码块）</span></a></h2><p>最后我们来看 Rust 的函数、闭包和模块，它们用于封装和复用代码。</p><h3 id="a-函数" tabindex="-1"><a class="header-anchor" href="#a-函数"><span>a. 函数</span></a></h3><p>函数基本上是所有编程语言的标配，在 Rust 中也不例外，它是一种基本的代码复用方法。在 Rust 中使用 <strong>fn 关键字</strong>来定义一个函数。比如：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">print_a_b</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of a b is: {a}{b}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print_a_b</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">&#39;h&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数定义时的参数叫作<strong>形式参数</strong>（形参），函数调用时传入的参数值叫做<strong>实际参数</strong>（实参）。函数的调用要与函数的签名（函数名、参数个数、参数类型、参数顺序、返回类型）一致，也就是实参和形参要匹配。</p><p>函数对于几乎所有语言都非常重要，实际上各种编程语言在实现时，都是以函数作为基本单元来组织栈上的内存分配和回收的，这个基本的内存单元就是所谓的<strong>栈帧（frame）</strong>，我们在下节课会讲到。</p><h3 id="b-闭包-closure" tabindex="-1"><a class="header-anchor" href="#b-闭包-closure"><span>b. 闭包（Closure）</span></a></h3><p>闭包是另一种风格的函数。它使用两个竖线符号 <code>||</code> 定义，而不是用 <code>fn()</code> 来定义。</p><p>Code1</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token comment">// 标准的函数定义</span>
<span class="token keyword">fn</span>  <span class="token function-definition function">add_one_v1</span>   <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token comment">// 闭包的定义，请注意形式对比</span>
<span class="token keyword">let</span> add_one_v2 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 闭包的定义2，省略了类型标注</span>
<span class="token keyword">let</span> add_one_v3 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span>             <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 闭包的定义3，花括号也省略了</span>
<span class="token keyword">let</span> add_one_v4 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span>               x <span class="token operator">+</span> <span class="token number">1</span>  <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Code2</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// // 标准的函数定义</span>
    <span class="token comment">// fn  add_one_v1   (x: u32) -&gt; u32 { x + 1 }</span>

    <span class="token comment">// // 闭包的定义，请注意形式对比</span>
    <span class="token comment">// let add_one_v2 = |x: u32| -&gt; u32 { x + 1 };</span>

    <span class="token comment">// // 闭包的定义2，省略了类型标注</span>
    <span class="token comment">// let add_one_v3 = |x|             { x + 1 };</span>

    <span class="token comment">// // 闭包的定义3，花括号也省略了</span>
    <span class="token comment">// let add_one_v4 = |x|              x + 1  ;</span>
    
    <span class="token keyword">let</span> add_one <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token keyword">let</span> a_vec<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> vec2<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;</span> <span class="token operator">=</span> a_vec<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>add_one<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭包与函数的一个显著不同就是，闭包可以捕获函数中的局部变量，而函数不行。比如，下面示例中的闭包 <code>add_v2</code> 捕获了 main 函数中的局部变量 a 来使用，但是函数 <code>add_v1</code> 就没有这个能力。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10u32</span><span class="token punctuation">;</span>             <span class="token comment">// 局部变量</span>
    
    <span class="token keyword">fn</span>  <span class="token function-definition function">add_v1</span>   <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> a <span class="token punctuation">}</span>    <span class="token comment">// 定义一个内部函数</span>
    <span class="token keyword">let</span> add_v2 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> a <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// 定义一个闭包</span>
    
    <span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">add_v1</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用函数</span>
    <span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">add_v2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用闭包</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样会编译出错，并提示错误。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>error<span class="token punctuation">[</span><span class="token constant">E0434</span><span class="token punctuation">]</span><span class="token punctuation">:</span> can<span class="token lifetime-annotation symbol">&#39;t</span> capture dynamic environment <span class="token keyword">in</span> a <span class="token keyword">fn</span> <span class="token function-definition function">item</span>
 <span class="token operator">-</span><span class="token punctuation">-&gt;</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">40</span>
  <span class="token operator">|</span>
<span class="token number">4</span> <span class="token operator">|</span>     <span class="token keyword">fn</span>  <span class="token function-definition function">add_v1</span>   <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> a <span class="token punctuation">}</span>    <span class="token comment">// 定义一个内部函数</span>
  <span class="token operator">|</span>                                        <span class="token operator">^</span>
  <span class="token operator">|</span>
  <span class="token operator">=</span> help<span class="token punctuation">:</span> <span class="token keyword">use</span> the \`<span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>\` closure form instead
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭包之所以能够省略类型参数等信息，主要是其定义在某个函数体内部，从闭包的内容和上下文环境中能够分析出来那些类型信息。</p><h3 id="c-模块" tabindex="-1"><a class="header-anchor" href="#c-模块"><span>c. 模块</span></a></h3><p>我们不可能把所有代码都写在一个文件里面。代码量多了后，分成不同的文件模块书写是非常自然的事情。这个需求需要从编程语言层级去做一定的支持才行，Rust 也提供了相应的方案。</p><p>分文件和目录组织代码理解起来其实很简单，主要的知识点在于目录的组织结构上。比如下面示例：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>backyard
├── <span class="token class-name">Cargo</span><span class="token punctuation">.</span>lock
├── <span class="token class-name">Cargo</span><span class="token punctuation">.</span>toml
└── src
    ├── garden              <span class="token comment">// 子目录</span>
    │   └── vegetables<span class="token punctuation">.</span>rs
    ├── garden<span class="token punctuation">.</span>rs           <span class="token comment">// 与子目录同名的.rs文件，表示这个模块的入口</span>
    └── main<span class="token punctuation">.</span>rs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第五行代码到第七行代码组成 garden 模块，在 <code>garden.rs</code> 中，使用 <code>mod vegetables;</code> 导入 vegetables 子模块。</p><p>在 <code>main.rs</code> 中，用同样的方式导入 garden 模块。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">garden</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>整个代码结构就这样一层一层地组织起来了。</p><p>另一种文件的组织形式来自 2015 版，也很常见，有很多人喜欢用。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>backyard
├── <span class="token class-name">Cargo</span><span class="token punctuation">.</span>lock
├── <span class="token class-name">Cargo</span><span class="token punctuation">.</span>toml
└── src
    ├── garden          <span class="token comment">// 子目录</span>
    │   └── <span class="token keyword">mod</span><span class="token punctuation">.</span>rs      <span class="token comment">// 子目录中有一个固定文件名 mod.rs，表示这个模块的入口</span>
    │   └── vegetables<span class="token punctuation">.</span>rs
    └── main<span class="token punctuation">.</span>rs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同上，由第五行到第七行代码组成 garden 模块，在 <code>main.rs</code> 中导入它使用。</p><p>你可以在本地创建文件，来体会两种不同目录组织形式的区别。</p><h2 id="_4-文件调用" tabindex="-1"><a class="header-anchor" href="#_4-文件调用"><span>4. 文件调用</span></a></h2><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>Rust 语言中自带单元测试和集成测试方案。我们来看一个示例，在 <code>src/lib.rs</code> 或 <code>src/main.rs</code> 下有一段代码。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> <span class="token number">10u32</span> <span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>            <span class="token comment">// 这里配置测试模块</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>foo</span><span class="token punctuation">;</span>
     
    <span class="token attribute attr-name">#[test]</span>             <span class="token comment">// 具体的单元测试用例</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">it_works</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 调用被测试的函数或功能</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">10u32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 断言</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在项目目录下运行 <code>cargo test</code>，会输出类似如下结果。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>running <span class="token number">1</span> test
test <span class="token namespace">tests<span class="token punctuation">::</span></span>it_works <span class="token punctuation">...</span> ok
test result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s

running <span class="token number">0</span> tests
test result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">0</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rust 自带测试方案，让我们能够非常方便地写测试用例，并且统一了社区的测试设计规范。</p><h2 id="配置文件-cargo-toml" tabindex="-1"><a class="header-anchor" href="#配置文件-cargo-toml"><span>配置文件 Cargo.toml</span></a></h2><p>这节课开头的时候，我们简单介绍过 <code>Cargo.toml</code>，它是 Rust 语言包和依赖管理器 Cargo 的配置文件，由官方定义约定。写 Rust 代码基本都会按照这种约定来使用它，对所在工程进行配置。这里面其实包含的知识点非常多，后面实战的部分，我们会详细解释用到的特性。</p><p>我们要对包依赖这件事情的复杂度有所了解。不知道你有没有听说过 <strong>npm 依赖黑洞</strong>？指的就是 Node.js 的包依赖太多太琐碎了。这怪不得 Node.js，其实 Rust 也类似。包依赖这件事儿，本身就很复杂，可以说这是软件工程固有的复杂性。对固有复杂性，不能绕弯过，只能正面刚。</p>`,69),d={href:"https://doc.rust-lang.org/cargo/",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"思考题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#思考题"},[n("span",null,"思考题")])],-1),m=n("ol",null,[n("li",null,"Rust 中能否实现类似 JS 中的 number 这种通用的数字类型呢？"),n("li",null,"Rust 中能否实现 Python 中那种无限大小的数字类型呢？")],-1);function v(b,g){const a=p("ExternalLinkIcon");return o(),c("div",null,[n("p",null,[s("本文摘编自："),n("a",u,[s("快速入门：Rust中有哪些你不得不了解的基础语法？"),e(a)]),s("（著作权归AI悦创所有）")]),r,n("p",null,[s("幸运的是，Cargo 工具已经帮我们搞定了包依赖相关方方面面的麻烦事（此刻 C++ 社区羡慕不已）。为了应对这种复杂性，Cargo 工具的提供了非常多的特性，配置起来也相对比较复杂。有兴趣的话，你可以详细了解一下"),n("a",d,[s("各种配置属性"),e(a)]),s("。")]),k,m])}const y=t(i,[["render",v],["__file","note3.html.vue"]]),w=JSON.parse('{"path":"/zh/Lilya/program/Rust/note3.html","title":"03-控制流和代码块","lang":"zh-CN","frontmatter":{"title":"03-控制流和代码块","author":"黑静美","category":["编程"],"tag":["rust"],"icon":"/ico/Rust.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"本文摘编自：快速入门：Rust中有哪些你不得不了解的基础语法？（著作权归AI悦创所有） 2. Rust 中的控制流 下面我们来了解一下 Rust 语言的控制流语句。 1. 分支语句 if else Rust 中使用 if else 来构造分支。 与其他 C 系语言不同，Rust 中 if 后面的条件表达式不推荐用 () 包裹起来，因为 Rust 设计者...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/Rust/note3.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"03-控制流和代码块"}],["meta",{"property":"og:description","content":"本文摘编自：快速入门：Rust中有哪些你不得不了解的基础语法？（著作权归AI悦创所有） 2. Rust 中的控制流 下面我们来了解一下 Rust 语言的控制流语句。 1. 分支语句 if else Rust 中使用 if else 来构造分支。 与其他 C 系语言不同，Rust 中 if 后面的条件表达式不推荐用 () 包裹起来，因为 Rust 设计者..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-13T18:04:15.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:modified_time","content":"2024-06-13T18:04:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03-控制流和代码块\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-13T18:04:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":2,"title":"2. Rust 中的控制流","slug":"_2-rust-中的控制流","link":"#_2-rust-中的控制流","children":[{"level":4,"title":"1. 分支语句 if else","slug":"_1-分支语句-if-else","link":"#_1-分支语句-if-else","children":[]},{"level":3,"title":"2. 循环语句","slug":"_2-循环语句","link":"#_2-循环语句","children":[{"level":4,"title":"loop 用于无条件（无限）循环。","slug":"loop-用于无条件-无限-循环。","link":"#loop-用于无条件-无限-循环。","children":[]},{"level":4,"title":"while 循环为条件判断循环。","slug":"while-循环为条件判断循环。","link":"#while-循环为条件判断循环。","children":[]},{"level":4,"title":"for 循环在 Rust 中，基本上只用于**迭代器**的遍历。","slug":"for-循环在-rust-中-基本上只用于-迭代器-的遍历。","link":"#for-循环在-rust-中-基本上只用于-迭代器-的遍历。","children":[{"level":6,"title":"for+ element+  in","slug":"for-element-in","link":"#for-element-in","children":[]}]}]}]},{"level":2,"title":"3. Rust 中的函数和模块 （各种代码块）","slug":"_3-rust-中的函数和模块-各种代码块","link":"#_3-rust-中的函数和模块-各种代码块","children":[{"level":3,"title":"a. 函数","slug":"a-函数","link":"#a-函数","children":[]},{"level":3,"title":"b. 闭包（Closure）","slug":"b-闭包-closure","link":"#b-闭包-closure","children":[]},{"level":3,"title":"c. 模块","slug":"c-模块","link":"#c-模块","children":[]}]},{"level":2,"title":"4. 文件调用","slug":"_4-文件调用","link":"#_4-文件调用","children":[{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}]},{"level":2,"title":"配置文件 Cargo.toml","slug":"配置文件-cargo-toml","link":"#配置文件-cargo-toml","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"createdTime":1718301855000,"updatedTime":1718301855000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":8.32,"words":2497},"filePathRelative":"zh/Lilya/program/Rust/note3.md","localizedDate":"2024年6月13日","excerpt":"<p>本文摘编自：<a href=\\"https://bornforthis.cn/column/Rust/01.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">快速入门：Rust中有哪些你不得不了解的基础语法？</a>（著作权归AI悦创所有）</p>\\n<h2>2. Rust 中的控制流</h2>\\n<p>下面我们来了解一下 Rust 语言的控制流语句。</p>\\n<h4>1. 分支语句 <code>if else</code></h4>\\n<p>Rust 中使用 if else 来构造分支。</p>\\n<div class=\\"language-rust\\" data-ext=\\"rs\\" data-title=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> number <span class=\\"token operator\\">=</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 判断数字number能被4，3，2中的哪一个数字整除</span>\\n    <span class=\\"token keyword\\">if</span> number <span class=\\"token operator\\">%</span> <span class=\\"token number\\">4</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"number is divisible by 4\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> number <span class=\\"token operator\\">%</span> <span class=\\"token number\\">3</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"number is divisible by 3\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> number <span class=\\"token operator\\">%</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"number is divisible by 2\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"number is not divisible by 4, 3, or 2\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{y as comp,w as data};
