import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,a as n,b as s,d as c,e as i}from"./app-CljCe7IP.js";const l={},u={href:"https://www.cnblogs.com/traditional/p/17759870.html",target:"_blank",rel:"noopener noreferrer"},r=i(`<p>考察这个 IP 地址类型，到目前（Rust文件夹1的第1课）为止，我们<strong>只能知道 IP 地址的种类，却还没有办法去存储实际的 IP 地址数据</strong>。不过刚刚学习了结构体，我们可以这么做。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">IpAddrKind</span> <span class="token punctuation">{</span>
    <span class="token constant">V4</span><span class="token punctuation">,</span>
    <span class="token constant">V6</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">IpAddr</span> <span class="token punctuation">{</span>
    kind<span class="token punctuation">:</span> <span class="token class-name">IpAddrKind</span><span class="token punctuation">,</span>
    address<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> home <span class="token operator">=</span> <span class="token class-name">IpAddr</span> <span class="token punctuation">{</span>
        kind<span class="token punctuation">:</span> <span class="token class-name">IpAddrKind</span><span class="token punctuation">::</span><span class="token constant">V4</span><span class="token punctuation">,</span>
        address<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> loopback <span class="token operator">=</span> <span class="token class-name">IpAddr</span> <span class="token punctuation">{</span>
        kind<span class="token punctuation">:</span> <span class="token class-name">IpAddrKind</span><span class="token punctuation">::</span><span class="token constant">V6</span><span class="token punctuation">,</span>
        address<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;::1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将枚举类型和一个字符串组合成一个结构体</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">IpAddr</span> <span class="token punctuation">{</span>
    <span class="token constant">V4</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token constant">V6</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> home <span class="token operator">=</span> <span class="token class-name">IpAddr</span><span class="token punctuation">::</span><span class="token constant">V4</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> loopback <span class="token operator">=</span> <span class="token class-name">IpAddr</span><span class="token punctuation">::</span><span class="token constant">V6</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;::1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在新的 IpAddr 枚举定义中，V4 和 V6 两个成员都被关联上了一个 String 值：</strong></p><p>我们直接将数据附加到了枚举的每个成员中，这样便不需要额外地使用结构体。另外一个使用枚举代替结构体的优势在于：每个成员可以拥有不同类型和数量的关联数据。</p><p>还是以 IP 地址为例，IPv4 地址总是由 4 个 0～255 之间的整数部分组成。假如我们希望使用 4 个 u8 值来代表 V4 地址，并依然使用 String 值来代表 V6 地址，那么结构体就无法轻易实现这一目的了，而枚举则可以轻松地处理此类情形：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">IpAddr</span> <span class="token punctuation">{</span>
    <span class="token constant">V4</span><span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token constant">V6</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> home <span class="token operator">=</span> <span class="token class-name">IpAddr</span><span class="token punctuation">::</span><span class="token constant">V4</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> loopback <span class="token operator">=</span> <span class="token class-name">IpAddr</span><span class="token punctuation">::</span><span class="token constant">V6</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;::1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以看到非常方便，然后继续来看另外一个关于枚举的例子，它的成员包含了各式各样的数据类型。</strong></p>`,9);function k(d,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[n("p",null,[s("文章出自：@古明地盆 "),n("a",u,[s("聊一聊 Rust 的枚举"),c(a)])]),r])}const b=t(l,[["render",k],["__file","note-a.html.vue"]]),f=JSON.parse('{"path":"/zh/Lilya/program/Rust2/note-a.html","title":"01ß-枚举","lang":"zh-CN","frontmatter":{"title":"01ß-枚举","author":"黑静美(大自然的搬运工版)","category":["编程"],"tag":["rust","我讨厌debug","编程老师你超度我吧"],"icon":"/ico/Rust.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"文章出自：@古明地盆 聊一聊 Rust 的枚举 考察这个 IP 地址类型，到目前（Rust文件夹1的第1课）为止，我们只能知道 IP 地址的种类，却还没有办法去存储实际的 IP 地址数据。不过刚刚学习了结构体，我们可以这么做。 我们可以将枚举类型和一个字符串组合成一个结构体 在新的 IpAddr 枚举定义中，V4 和 V6 两个成员都被关联上了一个 S...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/Rust2/note-a.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"01ß-枚举"}],["meta",{"property":"og:description","content":"文章出自：@古明地盆 聊一聊 Rust 的枚举 考察这个 IP 地址类型，到目前（Rust文件夹1的第1课）为止，我们只能知道 IP 地址的种类，却还没有办法去存储实际的 IP 地址数据。不过刚刚学习了结构体，我们可以这么做。 我们可以将枚举类型和一个字符串组合成一个结构体 在新的 IpAddr 枚举定义中，V4 和 V6 两个成员都被关联上了一个 S..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-03T17:54:10.000Z"}],["meta",{"property":"article:author","content":"黑静美(大自然的搬运工版)"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:tag","content":"我讨厌debug"}],["meta",{"property":"article:tag","content":"编程老师你超度我吧"}],["meta",{"property":"article:modified_time","content":"2024-06-03T17:54:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01ß-枚举\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-03T17:54:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美(大自然的搬运工版)\\"}]}"]]},"headers":[],"git":{"createdTime":1717437250000,"updatedTime":1717437250000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":1.6,"words":481},"filePathRelative":"zh/Lilya/program/Rust2/note-a.md","localizedDate":"2024年6月3日","excerpt":"<p>文章出自：@古明地盆 <a href=\\"https://www.cnblogs.com/traditional/p/17759870.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">聊一聊 Rust 的枚举</a></p>\\n<p>考察这个 IP 地址类型，到目前（Rust文件夹1的第1课）为止，我们<strong>只能知道 IP 地址的种类，却还没有办法去存储实际的 IP 地址数据</strong>。不过刚刚学习了结构体，我们可以这么做。</p>\\n<div class=\\"language-rust\\" data-ext=\\"rs\\" data-title=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">enum</span> <span class=\\"token type-definition class-name\\">IpAddrKind</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token constant\\">V4</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token constant\\">V6</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token type-definition class-name\\">IpAddr</span> <span class=\\"token punctuation\\">{</span>\\n    kind<span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">IpAddrKind</span><span class=\\"token punctuation\\">,</span>\\n    address<span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> home <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">IpAddr</span> <span class=\\"token punctuation\\">{</span>\\n        kind<span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">IpAddrKind</span><span class=\\"token punctuation\\">::</span><span class=\\"token constant\\">V4</span><span class=\\"token punctuation\\">,</span>\\n        address<span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">::</span><span class=\\"token function\\">from</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"127.0.0.1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> loopback <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">IpAddr</span> <span class=\\"token punctuation\\">{</span>\\n        kind<span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">IpAddrKind</span><span class=\\"token punctuation\\">::</span><span class=\\"token constant\\">V6</span><span class=\\"token punctuation\\">,</span>\\n        address<span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">::</span><span class=\\"token function\\">from</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"::1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{b as comp,f as data};
