import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-Csvy2EgL.js";const t="/assets/image-20240416122646662-BBGnWA7Q.png",l="/assets/image-20240416100207349-B3EMgPai.png",i="/assets/image-20240416100740962-ChPprLfh.png",o="/assets/image-20240416121632963-qXWeNZfy.png",p="/assets/image-20240419155100018-BqO9aFlK.png",c="/assets/image-20240419160315216-Cte2rEY-.png",d="/assets/image-20240419160602105-CbTE0Vbd.png",r="/assets/image-20240419172451998-CNdY3X8e.png",u="/assets/image-20240419172645682-Bue6ujrQ.png",k="/assets/image-20240419173735595-L79IBRRD.png",m="/assets/image-20240419173400533-CSCCqr22.png",g="/assets/image-20240426155229734-CdHih2B3.png",h="/assets/image-20240426155509271-DaJ2mE73.png",v="/assets/image-20240426161906518-BlCw1BCh.png",b="/assets/image-20240426162137140-BUwIf0IK.png",y="/assets/image-20240426162514876-CRdupcI1.png",x={},_=e(`<h2 id="来个传统" tabindex="-1"><a class="header-anchor" href="#来个传统"><span>来个传统</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span> <span class="token string">&quot;hello word&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><details class="hint-container details"><summary>Python中的变量</summary><p>变量就是在内存中开辟空间。</p><p>每个变量用的是同一块内存空间，所以新一次改变变量（如：<strong>赋值</strong>），变量旧的属性被覆盖（新的值取代旧的值）。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 1赋值给了x，x代表1</span>
x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">10</span> <span class="token comment"># x+10等价于 1+10，最后得出11，11赋值给x</span>
<span class="token comment"># 也就是说11 覆盖了 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 打印x 结果：11</span>
<span class="token comment"># 用来注释（注意井号后面有空格）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">井号 # 用来注释，解释某一行代码的功能和作用</p></div></details><div class="hint-container info"><p class="hint-container-title">代码的运行逻辑：</p><p>从上到下，从右到左，最后才是赋值</p></div><p>也可以通过变量把一个变量的值直接赋给另一个变量</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>name1 <span class="token operator">=</span> <span class="token string">&quot;lilei&quot;</span>
name2 <span class="token operator">=</span> name1
<span class="token keyword">print</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-输出print" tabindex="-1"><a class="header-anchor" href="#_1-输出print"><span>1.输出print</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-同时输出变量" tabindex="-1"><a class="header-anchor" href="#_1-同时输出变量"><span>1.同时输出变量</span></a></h3><p>python支持同一命令同时输出变量，<strong>默认</strong>以空格（占位字符）输出变量</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
c <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>使用<code>sep =</code> 更改间隔的内容</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
c <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">&quot;间隔&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><p>不同行的<code>print</code>默认输出换行</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用<code>end = </code>改变换行内容</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&quot;结束&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&quot;结束&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&quot;结束&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>end</code> 可以和<code>sep</code>同时使用</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
c <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;~&quot;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;love Python&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果将没有换行,如有需要添加<code>peint()</code>换行</p><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-变量" tabindex="-1"><a class="header-anchor" href="#_2-变量"><span>2. 变量</span></a></h2><h3 id="_1-赋值方式" tabindex="-1"><a class="header-anchor" href="#_1-赋值方式"><span>1. 赋值方式</span></a></h3><ul><li><p>变量基本赋值方式如上，将<strong>右边的值赋给左边</strong></p></li><li><p>变量也可以同时赋值</p></li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>同时赋同一个值</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>python特色 交换值</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Austin = &quot;Coke&quot; # 该赋值可以理解为倒果汁的过程
Jaden = &quot;juice&quot; # 该赋值可以理解为倒果汁的过程 
Austin, Jaden = Jaden, Austin  #先右边取值，先认定杯子
 # 直接交换杯子（赋值），这样就不需要一个新杯子换果汁了
print(&quot;Austin&quot;, Austin)       
print(&quot;Jaden&quot;, Jaden)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-变量的命名规则" tabindex="-1"><a class="header-anchor" href="#_2-变量的命名规则"><span>2. 变量的命名规则</span></a></h3><ul><li>大小写英文、数字和<code>_</code>下划线的结合，且不能用数字开头； 【数字开头报错1】 <ul><li>不能包含空格，请用下划线代替 【报错2】</li></ul></li><li>Python中变量名<strong>区分大小写</strong>；</li><li>**<u>系统关键词</u>**不能做变量名使用「获取关键词列表：<code>help(&#39;keywords&#39;)</code>」【报错类型3】</li><li>不要使用Python内置函数名称做变量(如：<code>print</code>) 【4】</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>Here <span class="token keyword">is</span> a <span class="token builtin">list</span> of the Python keywords<span class="token punctuation">.</span>  Enter <span class="token builtin">any</span> keyword to get more <span class="token builtin">help</span><span class="token punctuation">.</span>

<span class="token boolean">False</span>               <span class="token keyword">break</span>               <span class="token keyword">for</span>                 <span class="token keyword">not</span>
<span class="token boolean">None</span>                <span class="token keyword">class</span>               <span class="token class-name">from</span>                <span class="token keyword">or</span>
<span class="token boolean">True</span>                <span class="token keyword">continue</span>            <span class="token keyword">global</span>              <span class="token keyword">pass</span>
__peg_parser__      <span class="token keyword">def</span>                 <span class="token keyword">if</span>                  <span class="token keyword">raise</span>
<span class="token keyword">and</span>                 <span class="token keyword">del</span>                 <span class="token keyword">import</span>              <span class="token keyword">return</span>
<span class="token keyword">as</span>                  <span class="token keyword">elif</span>                <span class="token keyword">in</span>                  <span class="token keyword">try</span>
<span class="token keyword">assert</span>              <span class="token keyword">else</span>                <span class="token keyword">is</span>                  <span class="token keyword">while</span>
<span class="token keyword">async</span>               <span class="token keyword">except</span>              <span class="token keyword">lambda</span>              <span class="token keyword">with</span>
<span class="token keyword">await</span>               <span class="token keyword">finally</span>             <span class="token keyword">nonlocal</span>            <span class="token keyword">yield</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::tab</p><p>@tab【报错1】</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>1n = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>@tab 【报错2】</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>n n = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>@tab 【报错3】</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">await</span> <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>@tab 【4】</p><p>没报错。但是不能运行</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>print = 1
print(print)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>:::</p><h3 id="_3-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-数据类型"><span>3. 数据类型</span></a></h3><p>python不需要要求申明数据类型，会根据值自动分配一个默认的数据类型</p><h5 id="布尔型-boolean" tabindex="-1"><a class="header-anchor" href="#布尔型-boolean"><span>布尔型 boolean</span></a></h5><h6 id="关键词-bool" tabindex="-1"><a class="header-anchor" href="#关键词-bool"><span>关键词： <code>bool()</code></span></a></h6><h5 id="数字型-integer" tabindex="-1"><a class="header-anchor" href="#数字型-integer"><span>数字型 integer</span></a></h5><h6 id="整型-int" tabindex="-1"><a class="header-anchor" href="#整型-int"><span>整型：<code>int()</code></span></a></h6><h6 id="浮点型-float" tabindex="-1"><a class="header-anchor" href="#浮点型-float"><span>浮点型：<code>float()</code></span></a></h6><h5 id="字符串-string" tabindex="-1"><a class="header-anchor" href="#字符串-string"><span>字符串 String</span></a></h5><h6 id="关键词-str" tabindex="-1"><a class="header-anchor" href="#关键词-str"><span>关键词：<code>str()</code></span></a></h6><h5 id="元组-tuple" tabindex="-1"><a class="header-anchor" href="#元组-tuple"><span>元组 Tuple</span></a></h5><h6 id="关键词-tuple" tabindex="-1"><a class="header-anchor" href="#关键词-tuple"><span>关键词：<code>tuple()</code></span></a></h6><h5 id="字典-dictionary" tabindex="-1"><a class="header-anchor" href="#字典-dictionary"><span>字典 dictionary</span></a></h5><h6 id="关键词-dict" tabindex="-1"><a class="header-anchor" href="#关键词-dict"><span>关键词：<code>dict()</code></span></a></h6><h5 id="集合-set" tabindex="-1"><a class="header-anchor" href="#集合-set"><span>集合 set</span></a></h5><h6 id="关键词-set" tabindex="-1"><a class="header-anchor" href="#关键词-set"><span>关键词：<code>set()</code></span></a></h6><h5 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list"><span>列表 list</span></a></h5><h6 id="关键词-list" tabindex="-1"><a class="header-anchor" href="#关键词-list"><span>关键词：<code>list()</code></span></a></h6><h4 id="如果想要知道数据被分配了哪种类型-请使用type" tabindex="-1"><a class="header-anchor" href="#如果想要知道数据被分配了哪种类型-请使用type"><span>如果想要知道数据被分配了哪种类型，请使用type()</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">type</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="a-数字型「int、float」" tabindex="-1"><a class="header-anchor" href="#a-数字型「int、float」"><span>a. 数字型「int、float」</span></a></h4><ol><li>整形</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>int_num <span class="token operator">=</span> <span class="token number">1</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;int num type is&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;直接检测数据类型并输出：&quot;</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>浮点数</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>float_num <span class="token operator">=</span> <span class="token number">1</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;int num type is&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;直接检测数据类型并输出：&quot;</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="b-字符串「str」" tabindex="-1"><a class="header-anchor" href="#b-字符串「str」"><span>b. 字符串「str」</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Hello llohe&quot;</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;int num type is&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span>string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;直接检测数据类型并输出&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h5><ol><li><p>有序性</p><ol><li>从左到右。下标为0开始，到n</li><li>从右到左。下标从-1开始，到-n</li><li>引号里出现的，都算一个下标</li></ol></li><li><p>不可变性</p><ol><li>字符串被创建出来后，就不能被改变</li><li>注意⚠️：我们说的，是在运行过程中，不能对字符串有修改、增加、删除的操作</li></ol></li><li><p>任意字符</p><ol><li>键盘⌨️上可以输入的任何字符，都是字符串的元素</li><li>字符放到字符串中，都将成为字符串类型。「也就是：里面的每一个元素都可以称为子字符」</li></ol></li></ol><h4 id="c-列表「list」" tabindex="-1"><a class="header-anchor" href="#c-列表「list」"><span>c. 列表「list」</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>lst <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;Hallo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lloha&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;look&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">&quot;汉堡包&quot;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;int num type is&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;直接检测数据类型并输出&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="特性-1" tabindex="-1"><a class="header-anchor" href="#特性-1"><span>特性</span></a></h5><ol><li><p>有序性</p><ol><li><p>从左到右。下标为0开始</p></li><li><p>从右到左。下标从-1开始</p></li><li><p>列表中每一个元素算一个下标</p><p>比如：</p><ol><li><code>Ha1lo</code>整体是下标0，<code>lloha</code>是下标1</li><li><code>(&quot;look&quot;,&quot;book&quot;,11)</code> 整体是下标4</li></ol></li></ol></li><li><p>可变性</p><ol><li>程序在运行过程中，列表可以被「添加、删除、修改」</li></ol></li><li><p>任意数据类型</p><p>python所有的数据类型</p></li></ol><h4 id="d-元组「tuple」" tabindex="-1"><a class="header-anchor" href="#d-元组「tuple」"><span>d. 元组「tuple」</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;Hallo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lloha&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;look&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">&quot;汉堡包&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;int num type is&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;直接检测数据类型并输出&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="image-20240426162514876" tabindex="0" loading="lazy"><figcaption>image-20240426162514876</figcaption></figure><h5 id="特性-2" tabindex="-1"><a class="header-anchor" href="#特性-2"><span>特性</span></a></h5><ol><li><p>有序性</p><ol><li><p>从左到右。下标为0开始</p></li><li><p>从右到左。下标从-1开始</p></li><li><p>列表中每一个元素算一个下标</p><p>比如：</p><ol><li><code>Ha1lo</code>整体是下标0，<code>lloha</code>是下标1</li><li><code>(&quot;look&quot;,&quot;book&quot;,11)</code> 整体是下标4</li></ol></li></ol></li><li><p>不可变性</p></li><li><p>任意数据类型</p></li></ol><hr><h4 id="探究「列表与元组」" tabindex="-1"><a class="header-anchor" href="#探究「列表与元组」"><span>探究「列表与元组」</span></a></h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>列表和元组的关键区别在于数据是否可变</p></div><ol><li>如果数据类型是可变的，比如社交平台的日记功能，统计一个用户在一周内看了哪些用户的帖子——则用列表更为合适</li><li>如果如果存储的数据和数量不变，比如有一个软件，需要放回的是某一地点的经纬度，然后直接传输给用户看——则元组更为合适</li></ol><ul><li><p><strong>假设</strong></p><ul><li><p>假设1：现在有一个仓库，你要向仓库添加物品。仓库很大，现有的物品也很多，你不知道还有没有位置可以存放。此时我们是不是需要聘请一个仓库管理员，这样我们就可以直接问仓库管理员：里面还有哪个位置（是否有位置？）仓库管理员会告诉你，并且你可以直接把你的物品，添加进去。</p><p>问题来了，仓库管理员为什么知道仓库是否有位置？——因为仓库管理员会一直跟踪这个仓库的状态；</p></li><li><p>假设2：现在有一个原子弹的仓库，仓库创建之后，只能存放一个原子弹。那么，我们需要设立一个专门的人员跟踪：原子弹仓库的状态吗？——不需要，此时在聘请一个就显得浪费了。（不然，领导没油水了～hhhhh）</p></li></ul></li><li><p><strong>Why？</strong></p><ul><li>用户日志📔，是不是会一直变动（记录📝看了哪些帖子），我们是不是需要有一个类似仓库管理员的“人”，来跟踪并且知道：是否有位置（是否有空间/内存），还需要知道在哪里添加。——列表更合适，因为列表可变。「可变意味着：添加、删除、修改」 <ul><li>元组为什么不合适？——因为，你每当需要添加数据的时候，就得重新创建一个新的元组。（就类似于：你创建原子弹的仓库，肯定是刚刚好可以存放一个，那么你想存放两个的时候，只能重新再创建一个仓库。）</li></ul></li><li>经纬度会改变吗？显然是不会的，那么就不需要一个多余的“人”去跟踪状态。——用列表可以吗？可以！但是没必要。「因为我们不需要仓库管理员」用列表有点浪费资源了。元组的功能刚刚好够用。</li><li><strong><span style="color:orange;">我们讲究：不浪费，合适就好。</span></strong></li></ul></li></ul><h4 id="e-字典「dict」" tabindex="-1"><a class="header-anchor" href="#e-字典「dict」"><span>e. 字典「dict」</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="特性-3" tabindex="-1"><a class="header-anchor" href="#特性-3"><span>特性</span></a></h5><ol><li><p>无序性[]</p><ol><li><p>从左到右。下标为0开始</p></li><li><p>从右到左。下标从-1开始</p></li><li><p>列表中每一个元素算一个下标</p><p>比如：</p><ol><li><code>Ha1lo</code>整体是下标0，<code>lloha</code>是下标1</li><li><code>(&quot;look&quot;,&quot;book&quot;,11)</code> 整体是下标4</li></ol></li></ol></li><li><p>不可变性</p></li><li><p>任意数据类型</p></li></ol><h3 id="_5-练习" tabindex="-1"><a class="header-anchor" href="#_5-练习"><span>5. 练习</span></a></h3><ol><li>在 Python 中，变量名可以以数字开始。 <ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li>在 Python 中，以下哪个变量名是有效的？ <ul><li>[ ] 2myVar</li><li>[x] myVar2</li><li>[ ] my-var</li><li>[ ] my var</li></ul></li><li>在 Python 中，变量名区分大小写。 <ul><li>[x] 对</li><li>[ ] 错</li></ul></li><li>在 Python 中，<code>my_var</code> 和 <code>myVar</code> 是同一个变量。 <ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li>变量名可以是 Python 中的关键字。 <ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li><code>None</code> 是 Python 中的特殊类型，表示没有值或空值。 <ul><li>[x] 对</li><li>[ ] 错</li></ul></li><li>在 Python 中，以下哪个是有效的变量赋值？ <ul><li>[ ] 123abc = &quot;hello&quot;</li><li>[ ] for = &quot;world&quot;</li><li>[x] _hidden = &quot;secret&quot;</li><li>[ ] import = 123</li></ul></li><li>在 Python 中，一个变量可以同时被赋予多个值。 <ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li>在 Python 中，以下哪个是多变量赋值？ <ul><li>[x] a, b, c = 1, 2, 3</li><li>[ ] a = 1, b = 2, c = 3</li><li>[ ] a; b; c = 1; 2; 3</li><li>[ ] a = 1; b = 2; c = 3;</li></ul></li><li>变量在使用之前必须被赋值。 <ul><li>[x] 对</li><li>[ ] 错</li></ul></li><li>Python 中变量的类型是静态的，一旦赋值就不能改变。 <ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li>在 Python 中，以下哪个表示全局变量？ <ul><li>[ ] var = &quot;hello&quot;</li><li>[x] global var</li><li>[ ] var(global)</li><li>[ ] def var():</li></ul></li><li>以下哪个表示删除变量？ <ul><li>[ ] delete x</li><li>[x] del x</li><li>[ ] remove x</li><li>[ ] destroy x</li></ul></li><li><code>x = 5</code> 之后 <code>y = x</code>，现在改变 <code>y</code> 的值，<code>x</code> 的值也会改变。 <ul><li>[ ] 对</li><li>[x] 错</li></ul></li><li>⚠️<code>x = [1, 2, 3]</code> 之后 <code>y = x</code>，现在改变 <code>y</code> 的列表内容，<code>x</code> 的内容也会改变。 <ul><li>[x] 对</li><li>[ ] 错</li></ul></li><li>在 Python 中，变量只能存储基本数据类型的值，如整数或字符串。 <ul><li>[ ] 对</li><li>[x] 错</li></ul></li></ol><div><iframe src="https://bornforthis.cn/column/py/Lab/Lab01.html#_1-%E6%A6%82%E5%BF%B5%E9%A2%98" style="width:800px;height:1000px;"></iframe></div><p>第二题</p><ol><li>Python 变量的命名规则中，以下哪一项是错误的？</li></ol><ul><li>[ ] a) 变量名可以由字母、数字和下划线组成</li><li>[ ] b) 变量名不能以数字开头</li><li>[x] c) 变量名可以以特殊字符，如@或#，开头</li><li>[ ] d) 变量名可以包含大写和小写字母</li></ul><ol start="2"><li>在 Python 中，如何使用 print 函数打印字符串 &quot;<code>Hello, World!</code>&quot;？</li></ol><ul><li>[ ] a) <code>print &quot;Hello, World!&quot;</code></li><li>[x] b) <code>print(&quot;Hello, World!&quot;)</code></li><li>[ ] c) <code>echo(&quot;Hello, World!&quot;)</code></li><li>[ ] d) <code>print[Hello, World!]</code></li></ul><ol start="3"><li>print 函数中的 end 参数用于什么？</li></ol><ul><li>[ ] a) 确定是否结束程序</li><li>[x] b) 在输出的末尾添加指定字符</li><li>[ ] c) 控制输出的数量</li><li>[ ] d) 确定输出的顺序</li></ul><ol start="4"><li>在 print 函数中，用&quot;<code>,</code>&quot;作为分隔符，应该如何操作？</li></ol><ul><li>[x] a) 使用参数 <code>sep = &quot;,&quot;</code></li><li>[ ] b) 使用参数 <code>end = &quot;,&quot;</code></li><li>[ ] c) 使用参数 <code>print = &quot;,&quot;</code></li><li>[ ] d) 使用参数 <code>divide = &quot;,&quot;</code></li></ul><ol start="5"><li>如果我想在不换行的情况下输出两个变量 a 和 b，以下哪个是正确的？</li></ol><ul><li>[x] a) <code>print(a, b, end = &#39; &#39;)</code></li><li>[ ] b) <code>print(a, b, sep = &#39; &#39;)</code></li><li>[ ] c) <code>print(a; b)</code></li><li>[ ] d) <code>print(a, b, end = &#39;\\n&#39;)</code></li></ul><ol start="6"><li>在 Python 中，以下哪种方法可以用来删除变量？</li></ol><ul><li>[ ] a) <code>drop(variable)</code></li><li>[ ] b) <code>remove(variable)</code></li><li>[x] c) <code>del variable</code></li><li>[ ] d) <code>delete variable</code></li></ul><ol start="7"><li><p>在 Python 中，以下哪个语句是错误的？</p><p>[ ] a) <code>x, y, z = &quot;Orange&quot;, &quot;Banana&quot;, &quot;Cherry&quot;</code></p><p>[ ] b) <code>x = y = z = &quot;Orange&quot;</code></p><p>[x] c) <code>x = &quot;Orange&quot; = y</code></p><p>[ ] d) <code>x, y = y, x</code></p></li><li><p>在 Python 中，以下哪个声明**<u>不是</u>**合法的变量名？</p></li></ol><ul><li>[ ] a) <code>_myvar</code></li><li>[ ] b) <code>myVar</code></li><li>[x] c) <code>9var</code></li><li>[ ] d) <code>varName9</code></li></ul><ol start="9"><li>下列哪个 print 函数的使用方式是正确的</li></ol><ul><li>[x] a) <code>print(a, b, c, sep = &#39; &#39;, end = &#39; &#39;)</code></li><li>[ ] b) <code>print(a b c sep = &#39; &#39;, end = &#39; &#39;)</code></li><li>[ ] c) <code>print[a, b, c, sep = &#39; &#39;, end = &#39; &#39;]</code></li><li>[ ] d) <code>print{a, b, c, sep = &#39; &#39;, end = &#39; &#39;}</code></li></ul><ol start="10"><li>Python 中的哪个函数可以用来获取变量的类型？</li></ol><ul><li>[ ] a) <code>typeof(variable)</code></li><li>[x] b) <code>type(variable)</code></li><li>[ ] c) <code>getType(variable)</code></li><li>[ ] d) <code>variable.type()</code></li></ul><p>第三题</p><ol><li><p>在 Python 中，_____ 关键字用于打印一个变量的值。 <code>print</code></p></li><li><p>Python 中的变量可以是字符串、整数、浮点数或布尔类型。例如，<code>my_str = &quot;Hello World&quot;</code> 使 my_str 成为一个 _____。 <code>string</code></p></li><li><p>在 Python 中，我们可以通过 _____(my_var) 来打印变量 my_var。 <code>print</code></p></li><li><p>在 Python 中，我们可以使用 my_var = _____ 来创建一个值为 10 的变量 my_var。 <code>10</code></p></li><li><p>如果我们有两个变量 <code>a = 5</code> 和 <code>b = 10</code>，我们可以使用 print(a, _____) 来打印这两个变量的值。 <code>b</code></p></li><li><p>在 Python 中，变量名可以包含字母、数字和下划线，但不能以数字开头。例如，1my_var 是一个无效的变量名，但 _____ 是有效的。</p><p><code>my_var1</code> <code>_var1</code></p></li><li><p>如果我有一个整数变量 <code>my_int = 50</code>，我可以通过在打印语句中添加<code>print(_____)</code>来打印 <code>The value of my integer is 50</code>。<code>&quot;The value of my integer is&quot;,my_int</code></p></li><li><p>在 Python 中，通过使用 _____ 关键字，我们可以将一个变量的值分配给另一个变量。例如，如果 <code>a = 10</code>和 <code>b = a</code>，那么 <code>b</code> 的值也会变为10。</p></li><li><p>在 Python 中，我可以通过编写 my_str = _____ 来创建一个包含字符串 &quot;Hello, Python!&quot; 的变量 my_str。 <code>\\&quot;Hello, Python!\\&quot;</code></p></li><li><p>如果我有一个浮点型变量 <code>my_float = 5.67</code>，我可以使用 <code>print(___, &quot; is my floating point number&quot;)</code> 来打印 &quot;5.67 is my floating point number&quot;。</p></li></ol><p>开放性1题</p><ol><li>打印，输出</li><li>直接声明。Python会根据赋值的类型分配大的类型，该类型下的参数为该类型默认参数(如：<code>&lt;class &#39;int&#39;&gt;</code>整形，class，指的)，可以使用<code>type()</code>查看具体类型</li><li>a = b = c =1</li><li>a, b, c = 1, 2, 3</li><li>print(a, b, c)</li><li>#使用井号写注释，注释是面向程序员的，增加程序的可读性，不纳入代码的运行到中</li><li>print(a, b, c, sep=„ “)</li><li>print(a, b, c, end=„ “) #作用是以什么结尾</li><li>​</li><li>写注释 #—————————————————————————————</li></ol><p>第四题</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>greeting <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span>

number <span class="token operator">=</span> <span class="token number">10</span>
copy_number <span class="token operator">=</span> number
<span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> copy_number<span class="token punctuation">)</span>

food <span class="token operator">=</span> <span class="token string">&quot;apple&quot;</span>
food <span class="token operator">=</span> <span class="token string">&quot;banana&quot;</span> <span class="token comment">#储存的值被替换</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span>

a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;~&quot;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>

name <span class="token operator">=</span> <span class="token string">&quot;Yue&quot;</span>
age <span class="token operator">=</span> <span class="token number">24</span>
job <span class="token operator">=</span> <span class="token string">&quot;student&quot;</span>
hobby <span class="token operator">=</span> <span class="token string">&quot;sleeping&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job<span class="token punctuation">,</span> hobby<span class="token punctuation">)</span>

x <span class="token operator">=</span> y <span class="token operator">=</span> z <span class="token operator">=</span> <span class="token number">10</span>
x <span class="token operator">=</span> <span class="token number">20</span>
y <span class="token operator">=</span> <span class="token number">30</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">id</span> <span class="token operator">=</span> <span class="token number">1.0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&quot; is my floating point number&quot;</span><span class="token punctuation">)</span>
my_str <span class="token operator">=</span> <span class="token string">&quot;\\&quot;Hello, Python!\\&quot;&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_str<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,133),f=[_];function q(w,P){return a(),s("div",null,f)}const T=n(x,[["render",q],["__file","note1.html.vue"]]),B=JSON.parse('{"path":"/zh/Lilya/program/python/note1.html","title":"01-python第一课","lang":"zh-CN","frontmatter":{"title":"01-python第一课","author":"黑静美","isOriginal":true,"category":["编程"],"tag":["python"],"icon":"/ico/Python.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"来个传统 Python中的变量 变量就是在内存中开辟空间。 每个变量用的是同一块内存空间，所以新一次改变变量（如：赋值），变量旧的属性被覆盖（新的值取代旧的值）。 井号 # 用来注释，解释某一行代码的功能和作用 代码的运行逻辑： 从上到下，从右到左，最后才是赋值 也可以通过变量把一个变量的值直接赋给另一个变量 1.输出print 1.同时输出变量 py...","head":[["link",{"rel":"alternate","hreflang":"ger-de","href":"https://github.com/Heijingmei/Heijingmei.github.io/de/Lilya/program/python/note1.html"}],["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/python/note1.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"01-python第一课"}],["meta",{"property":"og:description","content":"来个传统 Python中的变量 变量就是在内存中开辟空间。 每个变量用的是同一块内存空间，所以新一次改变变量（如：赋值），变量旧的属性被覆盖（新的值取代旧的值）。 井号 # 用来注释，解释某一行代码的功能和作用 代码的运行逻辑： 从上到下，从右到左，最后才是赋值 也可以通过变量把一个变量的值直接赋给另一个变量 1.输出print 1.同时输出变量 py..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"ger-De"}],["meta",{"property":"og:updated_time","content":"2024-05-01T22:15:26.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:modified_time","content":"2024-05-01T22:15:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01-python第一课\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-01T22:15:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":2,"title":"来个传统","slug":"来个传统","link":"#来个传统","children":[]},{"level":2,"title":"1.输出print","slug":"_1-输出print","link":"#_1-输出print","children":[{"level":3,"title":"1.同时输出变量","slug":"_1-同时输出变量","link":"#_1-同时输出变量","children":[]}]},{"level":2,"title":"2. 变量","slug":"_2-变量","link":"#_2-变量","children":[{"level":3,"title":"1. 赋值方式","slug":"_1-赋值方式","link":"#_1-赋值方式","children":[]},{"level":3,"title":"2. 变量的命名规则","slug":"_2-变量的命名规则","link":"#_2-变量的命名规则","children":[]},{"level":3,"title":"3. 数据类型","slug":"_3-数据类型","link":"#_3-数据类型","children":[{"level":5,"title":"布尔型 boolean","slug":"布尔型-boolean","link":"#布尔型-boolean","children":[{"level":6,"title":"关键词： bool()","slug":"关键词-bool","link":"#关键词-bool","children":[]}]},{"level":5,"title":"数字型 integer","slug":"数字型-integer","link":"#数字型-integer","children":[{"level":6,"title":"整型：int()","slug":"整型-int","link":"#整型-int","children":[]},{"level":6,"title":"浮点型：float()","slug":"浮点型-float","link":"#浮点型-float","children":[]}]},{"level":5,"title":"字符串 String","slug":"字符串-string","link":"#字符串-string","children":[{"level":6,"title":"关键词：str()","slug":"关键词-str","link":"#关键词-str","children":[]}]},{"level":5,"title":"元组 Tuple","slug":"元组-tuple","link":"#元组-tuple","children":[{"level":6,"title":"关键词：tuple()","slug":"关键词-tuple","link":"#关键词-tuple","children":[]}]},{"level":5,"title":"字典 dictionary","slug":"字典-dictionary","link":"#字典-dictionary","children":[{"level":6,"title":"关键词：dict()","slug":"关键词-dict","link":"#关键词-dict","children":[]}]},{"level":5,"title":"集合 set","slug":"集合-set","link":"#集合-set","children":[{"level":6,"title":"关键词：set()","slug":"关键词-set","link":"#关键词-set","children":[]}]},{"level":5,"title":"列表 list","slug":"列表-list","link":"#列表-list","children":[{"level":6,"title":"关键词：list()","slug":"关键词-list","link":"#关键词-list","children":[]}]},{"level":4,"title":"如果想要知道数据被分配了哪种类型，请使用type()","slug":"如果想要知道数据被分配了哪种类型-请使用type","link":"#如果想要知道数据被分配了哪种类型-请使用type","children":[]},{"level":4,"title":"a. 数字型「int、float」","slug":"a-数字型「int、float」","link":"#a-数字型「int、float」","children":[]},{"level":4,"title":"b. 字符串「str」","slug":"b-字符串「str」","link":"#b-字符串「str」","children":[{"level":5,"title":"特性","slug":"特性","link":"#特性","children":[]}]},{"level":4,"title":"c. 列表「list」","slug":"c-列表「list」","link":"#c-列表「list」","children":[{"level":5,"title":"特性","slug":"特性-1","link":"#特性-1","children":[]}]},{"level":4,"title":"d. 元组「tuple」","slug":"d-元组「tuple」","link":"#d-元组「tuple」","children":[{"level":5,"title":"特性","slug":"特性-2","link":"#特性-2","children":[]}]},{"level":4,"title":"探究「列表与元组」","slug":"探究「列表与元组」","link":"#探究「列表与元组」","children":[]},{"level":4,"title":"e. 字典「dict」","slug":"e-字典「dict」","link":"#e-字典「dict」","children":[{"level":5,"title":"特性","slug":"特性-3","link":"#特性-3","children":[]}]}]},{"level":3,"title":"5. 练习","slug":"_5-练习","link":"#_5-练习","children":[]}]}],"git":{"createdTime":1714601726000,"updatedTime":1714601726000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":11.78,"words":3533},"filePathRelative":"zh/Lilya/program/python/note1.md","localizedDate":"2024年5月1日","excerpt":"<h2>来个传统</h2>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">print</span> <span class=\\"token string\\">\\"hello word\\"</span>\\n</code></pre></div><figure><figcaption></figcaption></figure>\\n<hr>\\n<details class=\\"hint-container details\\"><summary>Python中的变量</summary>\\n<p>变量就是在内存中开辟空间。</p>\\n<p>每个变量用的是同一块内存空间，所以新一次改变变量（如：<strong>赋值</strong>），变量旧的属性被覆盖（新的值取代旧的值）。</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code>x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span>  <span class=\\"token comment\\"># 1赋值给了x，x代表1</span>\\nx <span class=\\"token operator\\">=</span> x <span class=\\"token operator\\">+</span> <span class=\\"token number\\">10</span> <span class=\\"token comment\\"># x+10等价于 1+10，最后得出11，11赋值给x</span>\\n<span class=\\"token comment\\"># 也就是说11 覆盖了 1</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\"># 打印x 结果：11</span>\\n<span class=\\"token comment\\"># 用来注释（注意井号后面有空格）</span>\\n</code></pre></div><div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">井号 # 用来注释，解释某一行代码的功能和作用</p>\\n</div>\\n</details>","autoDesc":true}');export{T as comp,B as data};
