import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c,a as s,b as n,d as e,e as i}from"./app-BqCc5vx5.js";const l="/assets/image(1)-C27TyJ_N.png",d="/assets/image(2)-ClYDIgNS.png",u="/assets/image(3)-EgqUQEIQ.png",r="/assets/image(4)-DkieerDM.png",k="/assets/image(5)-D9DsGHhI.png",v="/assets/image(6)-DM6DQOtC.png",m={},b=s("h2",{id:"what-is-c-programm-languege",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-is-c-programm-languege"},[s("span",null,"What is C programm languege?")])],-1),g=s("strong",null,"C语言",-1),h=s("strong",null,"C Language",-1),f={href:"https://zh.wikipedia.org/wiki/%E8%BF%87%E7%A8%8B%E5%BC%8F%E7%BC%96%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},y={href:"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"},w=s("strong",null,"编程",-1),q={href:"https://zh.wikipedia.org/wiki/%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},x=s("strong",null,[s("u",null,"递归")],-1),_={href:"https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},E={href:"https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},C={href:"https://z.wikipedia.org/wiki/UNIX",target:"_blank",rel:"noopener noreferrer"},B={href:"https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1",target:"_blank",rel:"noopener noreferrer"},A={href:"https://zh.wikipedia.org/wiki/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87",target:"_blank",rel:"noopener noreferrer"},z={href:"https://zh.wikipedia.org/wiki/%E8%82%AF%C2%B7%E6%B1%A4%E6%99%AE%E9%80%8A",target:"_blank",rel:"noopener noreferrer"},H={href:"https://zh.wikipedia.org/wiki/B%E8%AF%AD%E8%A8%80",target:"_blank",rel:"noopener noreferrer"},D={href:"https://zh.wikipedia.org/wiki/%E8%B4%9D%E5%B0%94%E5%AE%9E%E9%AA%8C%E5%AE%A4",target:"_blank",rel:"noopener noreferrer"},T=i(`<p><span style="color:#BFBFBF;">(🔙返回 <a href="../rust/note1">rust</a>)</span></p><h2 id="hallo-world" tabindex="-1"><a class="header-anchor" href="#hallo-world"><span>Hallo, world!</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> <span class="token comment">//TODO:引入头文件 studio.h</span></span>
<span class="token comment">//为了使用printf函数，需要首先包括所需文件，也称为头文件</span>

<span class="token comment">/*TODO: &quot;int main()&quot; main()函数是程序入口
*大括号{}表示函数的开始与结束
*大括号内的语句决定了该函数在执行程序的作用*/</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!\\nHello, world!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//分号代表语句结束</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//该语句则终止了 main() 函数，并返回数值0。数字0通常意味着我们的程序已经成功执行。（0 bug）任何其他数字都表示程序失败了。</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="printf" tabindex="-1"><a class="header-anchor" href="#printf"><span>printf()</span></a></h3><h2 id="数据类型-data-type" tabindex="-1"><a class="header-anchor" href="#数据类型-data-type"><span>数据类型 Data type</span></a></h2><p>每种类型所需的存储大小因平台而异 C语言有一个内置的sizeof操作符，可以返回特定的数据类型的内存占用大小。例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*TODO: int 整数，一个整数
     *TODO: float 浮点数，一个带有小部分数字
     *TODO: double: 双精度浮点数
     *TODO: char 单个字符
     *TODO：c语言有一个内置的sizeof，可以返回特定的数据类型的内存占用内存大小
    */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;int: %ld \\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;float: %ld \\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;doucle: %ld \\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;char: %ld \\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//该语句则终止了 main() 函数，并返回数值0。数字0通常意味着我们的程序已经成功执行。（0 bug）任何其他数字都表示程序失败了。*/</span>

    <span class="token comment">//TODO: syntax 语法</span>
    <span class="token comment">//TODO: 程序输出限时的每种数据类型相对应大小（byte）</span>
    <span class="token comment">//TODO: 格式指定符（%ld）的字符串</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>A. int, double, char, boolean B. int, bool, string C. int, float, double, char☑️ D. int, float, string, char</p><h3 id="int-整数" tabindex="-1"><a class="header-anchor" href="#int-整数"><span>int：整数</span></a></h3><h3 id="float-浮点数" tabindex="-1"><a class="header-anchor" href="#float-浮点数"><span>float：浮点数</span></a></h3><h3 id="double-双精度浮点数" tabindex="-1"><a class="header-anchor" href="#double-双精度浮点数"><span>double：双精度浮点数</span></a></h3><h3 id="char-单个字符" tabindex="-1"><a class="header-anchor" href="#char-单个字符"><span>char：单个字符</span></a></h3><h3 id="变量-variable" tabindex="-1"><a class="header-anchor" href="#变量-variable"><span>变量 Variable</span></a></h3><p>变量是内存中某块值的名称。 变量名（也称为标识符）必须以字母或下划线_开头，可以</p><hr><p>由字母、数字和下划线_字符组成。 不同语言中，变量的命名规则各不相同，但是使用小写字母和下划线来分隔单词是很常见的（snake_case）。 变量在使用前也必须声明为一种数据类型。</p><h4 id="命名规则" tabindex="-1"><a class="header-anchor" href="#命名规则"><span>命名规则</span></a></h4><p>C 语言中的变量命名遵循一系列规则和约定。以下是主要的命名规则：</p><ol><li><strong>首字符</strong>：变量名必须以字母（<code>a-z</code> 或 <code>A-Z</code>）或下划线（<code>_</code>）开始。</li><li><strong>后续字符</strong>：变量名的后续字符可以是字母、数字（<code>0-9</code>）或下划线。</li><li><strong>区分大小写</strong>：C 语言是区分大小写的，所以 <code>Variable</code> 和 <code>variable</code> 是两个不同的变量名。</li><li><strong>长度限制</strong>：尽管 C 语言标准没有明确变量名的最大长度，但大多数编译器对标识符长度都有一定的限制。然而，这个长度通常都很长，足以满足大多数应用的需要。</li><li><strong>关键字限制</strong>：不能使用 C 语言的关键字作为变量名。例如，<code>int</code>, <code>return</code>, <code>if</code> 等都是保留的关键字，不能用作变量名。</li><li><strong>含义</strong>：尽管不是严格的规则，但建议变量名应该有意义，并描述其用途或内容。例如，如果一个变量用于存储年龄，那么 <code>age</code> 是一个比 <code>x</code> 或 <code>a1</code> 更好的选择。</li><li><strong>命名约定</strong>： <ul><li><strong>驼峰式命名</strong>：例如，<code>myVariableName</code>。</li><li><strong>下划线分隔</strong>：例如，<code>my_variable_name</code>。</li><li><strong>常量命名</strong>：有些程序员选择使用全部大写字母来命名常量，例如，<code>PI</code> 或 <code>MAX_LENGTH</code>。</li></ul></li><li><strong>避免使用特定前缀</strong>：在某些编程约定中，以下划线开始的变量名（如 <code>_variable</code>）可能有特定的含义或用途。为了避免与库或编译器特定命名冲突，最好避免使用这样的前缀，除非你知道它的确切含义和用途。</li><li><strong>全局变量</strong>：有些编程约定建议为全局变量使用特定的前缀，以便更容易地区分它们和局部变量。</li></ol><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><h4 id="int-float-整数和浮点数" tabindex="-1"><a class="header-anchor" href="#int-float-整数和浮点数"><span>int &amp; float：整数和浮点数</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//声明的数据类型</span>
    <span class="token keyword">int</span> my_var<span class="token punctuation">;</span>
    <span class="token keyword">int</span> wuyue<span class="token punctuation">;</span>  <span class="token comment">//int 声明的数据类型为int</span>

    my_var <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token comment">//赋值</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>my_var<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//同时声明多个变量</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span> <span class="token comment">//不能重复声明同一变量</span>
    <span class="token comment">//int x;</span>
    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d \\n&quot;</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    z <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    x <span class="token operator">=</span>
<span class="token comment">//TODO:变量就是在计算机的内存当中开辟空间</span>
<span class="token comment">// 内存</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> yy <span class="token operator">=</span> <span class="token number">1111</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遵循这些规则和约定可以确保你的代码更具可读性，减少出错的机会，并与其他 C 程序员更容易协作。</p><p>示例：求和</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d \\n&quot;</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    z <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">//求和</span>
    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    x <span class="token operator">+=</span> x<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d \\n&quot;</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d \\n&quot;</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span> wy_lucky <span class="token operator">=</span> <span class="token number">1.2f</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> wy_lucky<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.3f&quot;</span><span class="token punctuation">,</span> wy_lucky<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不同精度 %.3 小数点后3位</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="char" tabindex="-1"><a class="header-anchor" href="#char"><span>char</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;w&#39;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量-constant" tabindex="-1"><a class="header-anchor" href="#常量-constant"><span>常量 Constant</span></a></h3><p>一个常量存储了一个不能改变值的变量(但必须初始化变量)。 通过使用有意义的常量名，代码会更易阅读和理解。 为了区分常量和变量，一个常见的做法是使用大写的标识符来声明常量。 定义常量的一种方法是在变量声明前使用 const 关键字。</p><h3 id="示例-const-double" tabindex="-1"><a class="header-anchor" href="#示例-const-double"><span>示例：const double</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//const声明常量并初始化值</span>
    <span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span><span class="token punctuation">,</span>PI<span class="token punctuation">)</span> <span class="token comment">//在程序执行期间，常量PI的值不能改变</span>
    <span class="token comment">//PI = 888</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>常量在声明时<strong>必须用一个值进行初始化</strong>，因为常量在创建出来之后，不能被修改。所以，一开始如果不赋值的话，在后面你就无法赋值了。</p><h2 id="define" tabindex="-1"><a class="header-anchor" href="#define"><span>define</span></a></h2><h3 id="const-和-define-在-c-语言中都可以用来定义常量-但是它们的工作方式有所不同-并且各有各的用途。以下是它们之间的一些主要区别" tabindex="-1"><a class="header-anchor" href="#const-和-define-在-c-语言中都可以用来定义常量-但是它们的工作方式有所不同-并且各有各的用途。以下是它们之间的一些主要区别"><span>const 和 define 在 C 语言中都可以用来定义常量，但是它们的工作方式有所不同，并且各有各的用途。以下是它们之间的一些主要区别：</span></a></h3><h4 id="预处理器和编译器" tabindex="-1"><a class="header-anchor" href="#预处理器和编译器"><span>预处理器和编译器：</span></a></h4><p>define 是预处理器指令，它在编译过程的预处理阶段进行替换，而 const 是编译器指令，它在编译阶段进行处理。</p><h4 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域：</span></a></h4><p>define 不考虑作用域，只要在定义之后，都可以使用。而 const 具有作用域，只在定义它的作用域内有效。</p><h4 id="内存占用" tabindex="-1"><a class="header-anchor" href="#内存占用"><span>内存占用：</span></a></h4><p>define 定义的常量不会占用内存，因为它们在预处理阶段就被替换了。但是 const 定义的常量会占用内存，因为它们在运行时还存在。</p><h4 id="类型和检查" tabindex="-1"><a class="header-anchor" href="#类型和检查"><span>类型和检查：</span></a></h4><p>define 定义的常量没有类型，它只是简单的文本替换，编译器无法进行类型检查。但 const 定义的常量有类型，编译器会进行类型检查。</p><p>现在我们来看一些代码示例：</p><p>使用 define</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14159</span> </span><span class="token comment">//没有分号</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span> radius <span class="token operator">=</span> <span class="token number">5.0f</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> area <span class="token operator">=</span> PI <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Area: %f\\n&quot;</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Area: %d\\n&quot;</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//错误的声明Format</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，PI 被定义为 3.14159，并在计算面积时使用。</p><p>对比使用 const</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">float</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> radius <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> area <span class="token operator">=</span> pi <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Area: %f\\n&quot;</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在这个代码中，pi 是一个 const 常量，也被用来计算面积。注意，pi 有一个类型（double/float），并且只在 main 函数的作用域内有效。</p></div><p>在编译之前，预处理程序将代码中的每个宏标识符替换为指令中的相应值。在这种情况下，每个出现的 PI 都被替换为 3.14。 发送给编译器的最终代码将已经有了常量值。const和#define的区别在于，前者使用内存进行存储，而后者不使用。</p><h3 id="question-1-在具体使用的时候我们应该如何选择" tabindex="-1"><a class="header-anchor" href="#question-1-在具体使用的时候我们应该如何选择"><span>Question 1 在具体使用的时候我们应该如何选择？</span></a></h3><p>选择 const 或者 define 的决定依赖于具体的应用场景和你的需求。以下是一些考虑的因素：</p><h3 id="类型检查" tabindex="-1"><a class="header-anchor" href="#类型检查"><span>类型检查：</span></a></h3><p>如果你需要编译器进行类型检查，你应该选择 const，因为 define 不提供类型检查。如果你试图使用一个与定义的类型不同的值，使用 const 的代码会在编译时报错。</p><h3 id="作用域-1" tabindex="-1"><a class="header-anchor" href="#作用域-1"><span>作用域：</span></a></h3><p>如果你希望常量只在特定的作用域内有效，你应该使用 const，因为它会考虑作用域。define 定义的宏在定义后的所有地方都是有效的。</p><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能"><span>性能：</span></a></h3><p>由于 define 在预处理阶段就进行了文本替换，所以它不会占用内存，这可能会有一些性能优势。然而，这个优势通常很小，并且在现代计算机上可能无法察觉。</p><h3 id="编程风格" tabindex="-1"><a class="header-anchor" href="#编程风格"><span>编程风格：</span></a></h3><p>在一些编程风格中，例如 C++，推荐使用 const 而不是 define，因为 const 提供了更多的类型安全性和更好的集成到语言中。</p><p>总的来说，两者都可以用来定义常量，但它们的适用场合并不完全相同。如果你需要更多的类型安全性或更细的作用域控制，使用 const 会更好。而如果你正在定义一个需要在多个文件或整个项目中使用的常量，define 可能是一个更好的选择。</p><h2 id="输入及输出" tabindex="-1"><a class="header-anchor" href="#输入及输出"><span>输入及输出</span></a></h2><h2 id="输入-input" tabindex="-1"><a class="header-anchor" href="#输入-input"><span>输入 Input</span></a></h2><p>C 支持多种方式获取用户输入。 如 <code>getchar()</code> 获取一个单字符的输入。</p><p><strong>比如</strong>:</p><h3 id="getchar" tabindex="-1"><a class="header-anchor" href="#getchar"><span><code>getchar()</code></span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">//#define</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取单个输入字符</span>
    <span class="token comment">//输入字符储存在变量a中</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><figure><img src="`+u+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="'+r+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>使用数组已获得更多可识别的输入类型</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">//#define</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//在这里，我们将输入一个大小100的字符串中</span>
    <span class="token comment">//获取字符串</span>
    <span class="token function">gets</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//旧代码，不安全 unsafe</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered: %s&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="scanf" tabindex="-1"><a class="header-anchor" href="#scanf"><span>scanf</span></a></h3><p><code>scanf()</code> 扫描符合格式指定符的输入。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//%d 等共同使用 &amp;代表地址</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered: %d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量名前的 <code>&amp;</code> 符号是<strong>地址运算符</strong>。它给出了一个变量的地址，或在内存中的位置。这样做是因为 <strong>scanf</strong> 将一个输入值放在一个变量地址上。</p><ol><li>scanf：获取用户输入</li><li>%d：指定用户输入的数据类型；</li><li>上面得到用户输入的值，存储在 a 变量中。但是，想要存储在 a 变量中，我们需要知道 a 的家庭住址「在这里，也就是 a 变量的物理地址」</li></ol><p>想要获取用户输入的字符串，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> inputString<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一串字符：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> inputString<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered: %s&quot;</span><span class="token punctuation">,</span> inputString<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="question-2" tabindex="-1"><a class="header-anchor" href="#question-2"><span>Question 2</span></a></h4><p><strong>scanf(&quot;%s&quot;, inputString); 为什么不需要 &amp;？</strong></p><p>在 C 语言中，当你需要使用 <code>scanf()</code> 函数读取一个整型、浮点型等基本数据类型的值时，你需要在变量名前添加 <code>&amp;</code> 操作符，这是因为 <code>scanf()</code> 函数需要知道这个变量的内存地址，以便将用户的输入值存储在那里。这就是 <code>&amp;</code> 操作符的作用——获取变量的内存地址。</p><p>然而，当你使用 <code>scanf()</code> 函数读取字符串时，情况就不同了。在 C 语言中，字符串其实是字符数组，而数组名本身就是一个指向数组首元素的指针，也就是说，它已经是一个地址了。因此，当你使用 <code>scanf()</code> 函数读取字符串时，你只需要直接传入数组名（即字符串名），而无需在前面添加 <code>&amp;</code> 操作符。</p><p>所以，当你写 <code>scanf(&quot;%s&quot;, inputString);</code> 时，你实际上是在告诉 <code>scanf()</code> 函数：“请将输入的字符串存储在名为 <code>inputString</code> 的字符数组的起始位置（即 <code>inputString</code> 的地址）”。这也是为什么你不需要添加 <code>&amp;</code> 操作符的原因。</p><p><strong>练习：</strong> 输入两个整数并输出它们的和。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter two numbers:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\nSum: %d&quot;</span><span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>scanf()</code>一旦遇到空格就会停止读取，所以像 &quot;Hello World &quot;这样的文本对<code>scanf()</code>来说是两个独立的输入。</p></blockquote><h4 id="探究-scanf-获取字符串的特性" tabindex="-1"><a class="header-anchor" href="#探究-scanf-获取字符串的特性"><span>探究 scanf 获取字符串的特性</span></a></h4><p>首先，我们需要明白 <code>scanf()</code> 是如何工作的。<code>scanf()</code> 是一个用于读取用户输入的函数。它通常和特定的格式说明符一起使用，例如：</p><h6 id="s-对应字符串-char-xxx" tabindex="-1"><a class="header-anchor" href="#s-对应字符串-char-xxx"><span><code>%s</code>（对应字符串 char xxx[]）</span></a></h6><h6 id="d-对应整数-int" tabindex="-1"><a class="header-anchor" href="#d-对应整数-int"><span><code>%d</code>（对应整数 int）</span></a></h6><h6 id="f-对应浮点数-float-等等。" tabindex="-1"><a class="header-anchor" href="#f-对应浮点数-float-等等。"><span><code>%f</code>（对应浮点数 float）等等。</span></a></h6><p>这些说明符告诉 <code>scanf()</code> 我们期待输入的数据类型。</p><p>特别地，当我们用 <code>%s</code> 格式说明符与 <code>scanf()</code> 一起使用时，它会读取连续的字符，直到遇到一个&quot;空白&quot;字符（比如空格、制表符或换行符）。因此，如果我们试图使用 <code>scanf()</code> 读取&quot;Hello World&quot;这样的带空格的字符串，那么 <code>scanf()</code> 只会读取&quot;Hello&quot;，因为空格就在这之后。</p><h4 id="scanf-是否需要-速查表" tabindex="-1"><a class="header-anchor" href="#scanf-是否需要-速查表"><span>scanf 是否需要 &amp; 速查表</span></a></h4><p>在 C 语言中，当使用 <code>scanf</code> 函数来获取用户输入时，我们经常需要使用取址符( &amp; )来指定我们想要存放数据的变量的地址。这样，<code>scanf</code> 可以直接修改该内存位置的值。以下是一个基于数据类型的简单表格，显示了哪些类型需要取址符以及哪些不需要：</p><table><thead><tr><th>数据类型</th><th>是否需要取址符 (&amp;)</th><th>示例</th></tr></thead><tbody><tr><td><code>int</code></td><td>需要</td><td><code>scanf(&quot;%d&quot;, &amp;num);</code></td></tr><tr><td><code>float</code></td><td>需要</td><td><code>scanf(&quot;%f&quot;, &amp;f);</code></td></tr><tr><td><code>double</code></td><td>需要</td><td><code>scanf(&quot;%lf&quot;, &amp;d);</code></td></tr><tr><td><code>char</code></td><td>需要</td><td><code>scanf(&quot; %c&quot;, &amp;c);</code></td></tr><tr><td><code>long</code></td><td>需要</td><td><code>scanf(&quot;%ld&quot;, &amp;l);</code></td></tr><tr><td><code>short</code></td><td>需要</td><td><code>scanf(&quot;%hd&quot;, &amp;s);</code></td></tr><tr><td><code>long long</code></td><td>需要</td><td><code>scanf(&quot;%lld&quot;, &amp;ll);</code></td></tr><tr><td><code>unsigned int</code></td><td>需要</td><td><code>scanf(&quot;%u&quot;, &amp;unum);</code></td></tr><tr><td><code>char[]</code></td><td></td><td></td></tr><tr><td>(字符串数组)</td><td>不需要</td><td><code>scanf(&quot;%s&quot;, str);</code></td></tr><tr><td><code>char*</code></td><td></td><td></td></tr><tr><td>(字符指针)</td><td>不需要</td><td><code>scanf(&quot;%s&quot;, strPtr);</code></td></tr></tbody></table><p><strong>注意</strong>:</p><ol><li>字符串 (<code>char[]</code>或<code>char*</code>) 在使用 <code>scanf</code> 时不需要取址符，因为数组名或字符指针本身就代表一个地址。</li><li>当读取 <code>char</code> 类型时，通常在格式字符串中放置一个空格（如<code>&quot; %c&quot;</code>），以跳过可能存在的换行符或空格。</li><li>在实际使用中，应确保为 <code>scanf</code> 提供足够大小的缓冲区以避免溢出，特别是当读取字符串时。</li><li>使用 <code>scanf</code> 读取其他复杂数据结构或自定义数据类型时，通常也需要使用取址符。</li></ol><p>总的来说，基本的数据类型（如<code>int</code>，<code>float</code>，<code>char</code>等）在使用<code>scanf</code>时都需要取址符。但字符串和指针不需要取址符，因为它们本身就是地址。</p><h3 id="fgets" tabindex="-1"><a class="header-anchor" href="#fgets"><span>fgets</span></a></h3><h6 id="老代码机制-不安全-有溢出的风险" tabindex="-1"><a class="header-anchor" href="#老代码机制-不安全-有溢出的风险"><span>(老代码机制，不安全（有溢出的风险）)</span></a></h6><p>这是一个代码示例，以及运行它的结果：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个字符串: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;你输入的字符串是: %s\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在提示下输入&quot;Hello World&quot;，输出将会是：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>请输入一个字符串: Hello World
你输入的字符串是: Hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想读取含有空格的字符串，你应该使用<code>fgets()</code>函数，它可以读取整行（包括空格），直到遇到换行符或者达到给定的最大字符数。例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个字符串: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从标准输入（stdin）读取最多20个字符</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;你输入的字符串是: %s\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，如果你在提示下输入&quot;Hello World&quot;，输出将会是：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>请输入一个字符串: Hello World
你输入的字符串是: Hello World
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<code>fgets()</code>会读取换行符（如果在给定字符限制内），因此在输出中可能会包含换行符。如果你想移除这个换行符，你可以编写额外的代码来处理这个问题。</p><p><code>fgets()</code> 函数的第二个参数并不是限制 <code>stdin</code> 的输入，而是你定义的缓冲区大小。这个参数应当等于你的字符数组的大小。如果你的数组大小为 20，那么<code>fgets()</code> 函数将最多读取 19 个字符和一个 <code>\\0</code> 结束符。这是因为在C语言中，字符串是以 <code>\\0</code> 字符结束的。</p><p>这就意味着如果你想读取更长的字符串，你应该定义一个更大的字符数组。例如，如果你想读取最多200个字符，你可以这样做：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个字符串: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;你输入的字符串是: %s\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个程序将允许用户输入最多199个字符（因为还需要一个字符空间来存放<code>\\0</code>结束符）。如果用户输入超过199个字符，<code>fgets()</code>函数将只读取前199个字符。</p><p>details fgets 中如果缓冲区的数字大于数组中的数字会怎么样？</p><p>解析</p><p>如果在 <code>fgets()</code> 函数中，你指定的缓冲区大小大于你实际定义的字符数组大小，那么可能会导致缓冲区溢出。这是一种非常危险的情况，因为它可能会覆盖掉你的程序其他部分的数据，或者导致程序崩溃。</p><p>例如，假设你有一个只能存储 10 个字符的数组，但是你试图从 <code>stdin</code> 中读取 100 个字符：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个字符串: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里定义的缓冲区大小比数组的大小大，可能会导致缓冲区溢出</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;你输入的字符串是: %s\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
这段代码是有问题的，因为当用户输入的字符串长度超过数组的长度时，\`<span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\` 将会写入超过数组长度的数据，可能会破坏内存中的其他数据，导致未定义的行为。这可能会引发安全问题，因此必须避免。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说，你总是需要确保你为 <code>fgets()</code> 提供的缓冲区大小不超过你的字符数组的实际大小，以防止缓冲区溢出。</p><p>示例</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;important&quot;</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str1: %s\\n&quot;</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str2: %s\\n&quot;</span><span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个字符串: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fgets</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这里故意使得缓冲区大小大于数组大小</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str1: %s\\n&quot;</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str2: %s\\n&quot;</span><span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但并不是百分百能正确运行出来，现在计算机都有内存溢出保护的机制。</p><h2 id="输出-output" tabindex="-1"><a class="header-anchor" href="#输出-output"><span>输出 Output</span></a></h2><p>在前面的小节中，我们已经使用了 <code>printf()</code> 函数来输出内容。在本小节中，我们将介绍其他几个同于<strong>输出</strong>的函数。关于 printf 函数，我后面会专门讲一下。</p><h3 id="putchar-输出单一字符。-比如" tabindex="-1"><a class="header-anchor" href="#putchar-输出单一字符。-比如"><span><code>putchar()</code> 输出单一字符。 比如:</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入存储在变量 <strong>a</strong> 中，并用 <code>putchar(a)</code> 输出字符变量 <code>a</code>。</p><h3 id="puts" tabindex="-1"><a class="header-anchor" href="#puts"><span>puts( )</span></a></h3><p><code>puts()</code>函数用于将输出一个<strong>字符串</strong>。 一个字符串存储在一个 char 数组中。 <strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">gets</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们将输入的内容存储在 100 个字符的数组中，并用 <code>puts()</code> 来输出该字符串。</p><p><strong>填空，输出单字符变量</strong><code>**c**</code><strong>。</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;s&#39;</span><span class="token punctuation">;</span>
<span class="token function">___</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>&#39;putchar&#39;</p><h2 id="printf-函数" tabindex="-1"><a class="header-anchor" href="#printf-函数"><span>printf 函数</span></a></h2><p>C 语言中，输出内容到屏幕的基本函数是 <code>printf()</code> 函数，该函数声明在 <code>stdio.h</code> 头文件中。</p><p>在第一个&quot;Hello World&quot;程序中引入了 <strong>printf</strong> 函数。对这个函数的调用需要一个<strong>格式字符串</strong>，其中可以包括用于输出特殊字符的<strong>转义字符</strong>和由值替换的<strong>格式指定符</strong>。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The tree has %d apples.\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* output: The tree has 22 apples. */</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;Hello World!\\&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* output: &quot;Hello World!&quot; */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们来学习如何使用它。</p><h3 id="printf-函数基本使用" tabindex="-1"><a class="header-anchor" href="#printf-函数基本使用"><span>printf() 函数基本使用</span></a></h3><p>C 语言中<strong>输出内容到屏幕</strong>的基本函数是 <code>printf()</code> 函数，该函数的声明在 <code>stdio.h</code> 头文件中。</p><p>在第一个&quot;Hello World&quot;程序中引入了 <strong>printf</strong> 函数。对这个函数的调用需要一个<strong>格式字符串</strong>，其中可以包括用于输出特殊字符的<strong>转义字符</strong>和由值替换的<strong>格式指定符</strong>。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The tree has %d apples.\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* output: The tree has 22 apples. */</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;Hello World!\\&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* output: &quot;Hello World!&quot;  todo: \\&quot; */</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h4><p>首先，我们从最基础的 <code>printf()</code> 函数开始。下面是一个最简单的 C 程序，该程序使用 <code>printf()</code> 函数向控制台打印出一段文字。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span>  <span class="token comment">// 引入stdio.h头文件，这个头文件中声明了printf()函数</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// main函数是C程序的入口</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用printf函数打印一段文字到控制台</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// main函数结束，返回0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="printf-函数中的转译序列" tabindex="-1"><a class="header-anchor" href="#printf-函数中的转译序列"><span>printf() 函数中的转译序列</span></a></h3><h4 id="n换行符-打印完这个字符后-光标会移动到下一行开始位置" tabindex="-1"><a class="header-anchor" href="#n换行符-打印完这个字符后-光标会移动到下一行开始位置"><span><code>\\n</code>换行符，打印完这个字符后，光标会移动到下一行开始位置</span></a></h4><h4 id="t制表符-打印完这个字符后-光标会移动到下一个制表位置" tabindex="-1"><a class="header-anchor" href="#t制表符-打印完这个字符后-光标会移动到下一个制表位置"><span><code>\\t</code>制表符，打印完这个字符后，光标会移动到下一个制表位置</span></a></h4><h4 id="反斜杠-打印-符号" tabindex="-1"><a class="header-anchor" href="#反斜杠-打印-符号"><span><code>\\\\</code>反斜杠，打印\\符号</span></a></h4><h4 id="单引号" tabindex="-1"><a class="header-anchor" href="#单引号"><span><code>\\&#39;</code>单引号</span></a></h4><h4 id="双引号" tabindex="-1"><a class="header-anchor" href="#双引号"><span><code>\\“</code>双引号</span></a></h4><h4 id="b退格-删除特定值" tabindex="-1"><a class="header-anchor" href="#b退格-删除特定值"><span><code>\\b</code>退格 删除特定值</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello,\\nworld!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*
    Hello,
    world!
    */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello\\tworld!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello	world!</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello\\\\world!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello\\world!</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello/world!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello/world! todo 不需要特殊转义</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello\\&#39;world!\\&#39;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello&#39;world!&#39;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello\\&quot;world!\\&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello&quot;world!&quot;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!\\b\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="printf-函数中的格式化输出" tabindex="-1"><a class="header-anchor" href="#printf-函数中的格式化输出"><span>printf() 函数中的格式化输出</span></a></h3><p>格式化指定符以百分号开始，并由格式字符串后的相应参数取代。一个格式指定符可以包括几个选项，以及一个转换字符：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token operator">%</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span><span class="token punctuation">[</span>wid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>precision<span class="token punctuation">]</span>conversion character
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-</code>指定字符串中的数据的左对齐 没有该符号为右对齐 可选的<code>[width]</code>提供了最小字符数 其中<code>.</code>将宽度⬆️与精度⬇️分开 可选的精度<code>[presicion]</code> 给出了数字的小数位数。如果- 如果有必要，转换字符将参数<code>conversion character</code>转换为指定的类型: <code>%d</code>：整数数据（十进制） <code>%c</code>：字符 <code>%s</code>：字符串 <code>%f</code>：浮点数 <code>%e</code>：科学记数法 <code>%x</code>：十六进制 <code>%o</code>: 八进制</p><p>C语言中的 <code>printf</code> 函数支持多种格式控制符来打印各种数据类型。以下是最常用的格式控制符列表：</p><table><thead><tr><th>控制符</th><th>描述</th></tr></thead><tbody><tr><td><code>%d</code></td><td>以十进制形式输出带符号整数</td></tr><tr><td><code>%i</code></td><td>以十进制形式输出带符号整数（与 <code>%d</code>相同）</td></tr><tr><td><code>%u</code></td><td>以十进制形式输出无符号整数</td></tr><tr><td><code>%f</code></td><td>输出单精度浮点数</td></tr><tr><td><code>%lf</code></td><td>输出双精度浮点数</td></tr><tr><td><code>%e</code></td><td>使用科学计数法格式输出单精度浮点数</td></tr><tr><td><code>%E</code></td><td>使用科学计数法格式输出单精度浮点数（使用大写的 <code>E</code>）</td></tr><tr><td><code>%g</code></td><td>对于 <code>%f</code> 和 <code>%e</code>，输出长度较短的一种</td></tr><tr><td><code>%G</code></td><td>对于 <code>%f</code>和 <code>%E</code>，输出长度较短的一种</td></tr><tr><td><code>%x</code></td><td>以十六进制形式输出无符号整数（小写字母）</td></tr><tr><td><code>%X</code></td><td>以十六进制形式输出无符号整数（大写字母）</td></tr><tr><td><code>%o</code></td><td>以八进制形式输出无符号整数</td></tr><tr><td><code>%s</code></td><td>输出一个字符串</td></tr><tr><td><code>%c</code></td><td>输出一个字符</td></tr><tr><td><code>%p</code></td><td>输出指针的值</td></tr><tr><td><code>%n</code></td><td>将到目前为止输出的字符数存入整数指针参数所指的位置</td></tr><tr><td><code>%%</code></td><td>输出 <code>%</code>符号</td></tr></tbody></table><p>这些控制符可以与标志、宽度、精度和长度修饰符结合使用，以控制输出的格式。例如，<code>%6.2f</code> 表示输出的浮点数至少有6个字符宽，且小数点后有两位数字。</p><p>长度修饰符可以与某些格式控制符结合，以表示特定的大小或者长度的变量类型，例如：</p><table><thead><tr><th>长度修饰符</th><th>描述</th></tr></thead><tbody><tr><td><code>hh</code></td><td>与整数格式控制符一起使用，表示 <code>signed char</code></td></tr><tr><td>或 <code>unsigned char</code></td><td></td></tr><tr><td><code>h</code></td><td>与整数格式控制符一起使用，表示 <code>short int</code></td></tr><tr><td><code>l</code></td><td>与整数格式控制符一起使用，表示 <code>long int</code>；</td></tr><tr><td>与 <code>%f</code>， <code>%e</code>, <code>%g</code>一起使用表示 <code>double</code></td><td></td></tr><tr><td><code>ll</code></td><td>与整数格式控制符一起使用，表示 <code>long long int</code></td></tr><tr><td><code>L</code></td><td>与 <code>%f</code>, <code>%e</code>, <code>%g</code>一起使用，表示 <code>long double</code></td></tr><tr><td><code>j</code></td><td>与整数格式控制符一起使用，表示 <code>intmax_t</code></td></tr><tr><td>或 <code>uintmax_t</code></td><td></td></tr><tr><td><code>z</code></td><td>与整数格式控制符一起使用，表示 <code>size_t</code></td></tr><tr><td><code>t</code></td><td>与整数格式控制符一起使用，表示 <code>ptrdiff_t</code></td></tr></tbody></table><p>请注意，支持的长度修饰符可能会根据不同的编译器和平台而有所不同。</p><h2 id="格式化输入" tabindex="-1"><a class="header-anchor" href="#格式化输入"><span>格式化输入</span></a></h2><p>scanf 函数用于将输入分配给变量。对于这个函数的调用是根据格式指定符扫描输入，在必要时转换输入/ 如果输入不能被转换，那么就不能被赋值。scanf()语句会等待输入，然后进行赋值。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">float</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span> <span class="token punctuation">(</span><span class="token string">&quot;%d %f %s&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %f %s&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> num<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入 10 22.5 abcd，然后按回车键，将 10 分配给 x，22.5 分配给 num，abcd 分配给 text。</p><p>注意，<strong>必须使用 &amp; 来访问变量地址</strong>。字符串不需要 &amp;，因为字符串的名字就像一个指针。</p><p>格式指定符以百分号 % 开始，用于为控制字符串后的相应参数赋值。空白、制表符和换行符被忽略。</p><p>一个格式指定符可以包括几个选项和一个转换字符:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token operator">%</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token punctuation">[</span>max_field<span class="token punctuation">]</span>conversion character
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>可选的*将跳过输入字段</li><li>可选的max_field指定了输入字段的最大字符</li></ul><p>如有必要，转换字符将参数conversion character转换为制定类型，如</p><ul><li><strong>d</strong> - 十进制</li><li><strong>c</strong> - 字符</li><li><strong>s</strong>- 字符串</li><li><strong>f</strong> - 浮点数</li><li><strong>x</strong> - 十六进制</li></ul><p>例如：每个程序都从读取用户输入开始，然后打印出用户输入的值。在这些例子中，&#39;%&#39; 后面的字符定义了输入或输出值的类型，而 &#39;&amp;&#39; 用于获取变量的地址，以便 scanf 可以将读取的值存储在正确的位置。 详细解释上面的 demo 代码：</p><p>这个程序首先从用户输入获取数据，然后将数据赋值给指定的变量，最后打印这些变量的值。</p><p>以下是具体步骤的解释：</p><ol><li>程序首先调用 scanf 函数从用户输入读取数据。格式字符串 &quot;%2d %d %*f %5s&quot; 定义了需要读取的数据类型和格式。这个字符串表示：</li></ol><ul><li>读取一个最多两位的十进制整数并存储到变量 x 中（对应 &quot;<code>%2d</code>&quot; ）</li><li>然后跳过一个或多个空格（对应 &quot; &quot;）</li><li>再读取一个十进制整数并存储到变量 y 中（对应 &quot;%d&quot;）</li><li>然后跳过一个或多个空格（对应 &quot; &quot;）</li><li>然后读取一个浮点数，但是忽略它不保存（对应 &quot;<code>%*f</code>&quot;）</li><li>然后跳过一个或多个空格（对应 &quot; &quot;）</li><li>最后读取一个最多五个字符的字符串并存储到 text 数组中（对应 &quot;%5s&quot;）。</li></ul><h2 id="代码注释" tabindex="-1"><a class="header-anchor" href="#代码注释"><span>代码注释</span></a></h2><h3 id="多行注释" tabindex="-1"><a class="header-anchor" href="#多行注释"><span>多行注释</span></a></h3><p>注释是程序代码的解释信息，你可以在程序中添加注释，让代码更易阅读理解。编译器会<strong>忽略注释</strong>，所以它们对程序没有影响。 注释以斜线 <code>/*</code> 开始，以斜线 <code>*/</code> 结束，可以出现在代码的任何地方。 注释可以和语句在同一行，也可以跨越多行。 <strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">/* 简单的c语程序
 *  Version 1.0
 */</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 输出字符串 */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>正如你所看到的，注释向读者澄清了程序的意图。使用注释来澄清代码段背后的目的和逻辑。</p></blockquote><h3 id="单行注释" tabindex="-1"><a class="header-anchor" href="#单行注释"><span>单行注释</span></a></h3><p>C++ 引入了双斜线注释 <code>//</code> 作为注释单行的一种方式。大部分 C 语言编译器也支持单行注释。 <strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// 声明int变量x</span>
    
    <span class="token comment">//%d 占位符，此处代表x</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>给代码添加注释是良好的编程实践。它有助于你和他人清楚地了解代码。符号|内容|</p></blockquote><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span><strong>算术运算符</strong></span></a></h2><h3 id="c-支持的-算术运算符" tabindex="-1"><a class="header-anchor" href="#c-支持的-算术运算符"><span>C 支持的 <strong>算术运算符</strong>：</span></a></h3><p><code>+</code>（加法）、<code>-</code>（减法）、<code>*</code>（乘法）、<code>/</code>（除法）和 <code>%</code>（模除法）。 运算符经常用来组成一个<strong>算术表达式</strong>，如<code>10+5</code>，在这种情况下，它包含两个<strong>操作数</strong>和<strong>加法</strong>运算符。</p><p>算术表达式经常用于赋值语句中。 <strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> area<span class="token punctuation">;</span>

    area <span class="token operator">=</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 50 */</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>除法</li></ul><p>C 语言有两个除法运算符: <code>/</code>  和  <code>%</code>。 根据操作数的数据类型，除法 <code>/</code> 运算符有不同的表现。 当两个操作数都是 <strong>int</strong> 数据类型时，为<strong>整数除法</strong>，也称为<strong>截断除法</strong>，去掉任何余数，结果是一个整数。 当一个或两个操作数都是实数（<code>float</code> 或 <code>double</code> ）时，结果是一个实数。 <code>%</code> 运算符只返回整数除法的余数。它对许多算法很有用，如欧几里得算法求最大公约数。但<strong>模数除法</strong>不能在浮点数上执行。 下面的例子演示了除法：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// TODO 除法</span>
    <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> quotient<span class="token punctuation">,</span> remainder<span class="token punctuation">;</span>
    <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">4.2</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> f2 <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> result<span class="token punctuation">;</span>

    quotient <span class="token operator">=</span> i1 <span class="token operator">/</span> i2<span class="token punctuation">;</span> <span class="token comment">//3</span>
    remainder <span class="token operator">=</span> i1 <span class="token operator">%</span> i2<span class="token punctuation">;</span> <span class="token comment">//1</span>
    result <span class="token operator">=</span> f1 <span class="token operator">/</span> f2<span class="token punctuation">;</span> <span class="token comment">//1.68</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> quotient<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> remainder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f \\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设你有一个两位的整数，我们需要通过以下规则产生两个新的数字</p><ul><li>第一个新数字是原数字的两位数中的各个数字的和</li><li>第二个新数字是原数字的反转 (如原数字为21，反转后的数字为12)。</li><li></li></ul><p>输入: 一个整数 <code>**x**</code>(10 ≤ <code>x</code> ≤ 99) 输出: 两个整数，或者一个错误信息字符串。 示例: 假设输入的数字为 91，那么你的代码应当输出两个数字: 10 (9和1的和)和19 (91的反转)。 假设输入的数字为 26，那么你的代码应当输出两个数字: 8 (2和6的和)和62 (26的反转)。 假设输入的数字为 18，那么你的代码应当输出两个数字: 9 (1和8的和)和81 (18的反转)。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">int</span> x<span class="token punctuation">;</span>
   <span class="token keyword">int</span> x_0<span class="token punctuation">,</span> x_1<span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Please input a 2-dig number&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
   x_1 <span class="token operator">=</span> x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
   x_0 <span class="token operator">=</span> x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>

   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The sum number is %d&quot;</span><span class="token punctuation">,</span> x_0 <span class="token operator">+</span> x_1<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The units and tens remainded number is %d&quot;</span><span class="token punctuation">,</span> x_0 <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x_1<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C 语言根据运算符的<strong>优先级</strong>来计算算术表达式。</p><p><code>+</code> 和 <code>-</code> 的优先级相同，<code>*</code>、<code>/</code> 和 <code>%</code> 的优先级也相同。</p><p>首先按照从左到右的顺序执行 <code>*</code>、<code>/</code> 和 <code>%</code>，然后是 <code>+</code> 和 <code>-</code> 。 你可以通过使用圆括号 <code>()</code> 来改变计算的顺序，表示哪些运算要先执行。</p><p>例如，<code>5+3*2</code>的结果是 11，而 <code>(5+3)*2</code> 的结果是16。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> result<span class="token punctuation">;</span>
    result <span class="token operator">=</span> a <span class="token operator">-</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>  <span class="token comment">// 4</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">/</span> c<span class="token punctuation">;</span>  <span class="token comment">// 8</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> c<span class="token punctuation">;</span>  <span class="token comment">// 5</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>C 在执行计算算术表达式时，对于顺序无关的运算可能不是严格的从左到右计算。例如，<code>x*y*z</code> 可能被视为<code>(x * y) * z</code> 或 <code>x * (y * z)</code>。如果顺序很重要，请将表达式分成不同的语句。</p></div><p><strong>练习：</strong> 填空，变量 <code>x</code> 减去 <code>y</code>，再相加 <code>z</code>  并将结果赋值给 <code>result</code>。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">+</span> z<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c-语言运算符优先级" tabindex="-1"><a class="header-anchor" href="#c-语言运算符优先级"><span>C 语言运算符优先级</span></a></h3><p>C 语言的运算符优先级决定了表达式中多个运算符的运算顺序。以下是 C 语言运算符的优先级列表，从最高到最低：</p><ol><li><strong>后缀</strong>： <ul><li><code>()</code>: 函数调用</li><li><code>[]</code>: 数组下标</li><li><code>.</code>: 结构体成员选择</li><li><code>-&gt;</code>: 通过指针选择结构体/联合体成员</li><li><code>++</code>: 后缀递增</li><li><code>--</code>: 后缀递减</li></ul></li><li><strong>前缀</strong>： <ul><li><code>++</code>: 前缀递增</li><li><code>--</code>: 前缀递减</li><li><code>+</code>: 正号</li><li><code>-</code>: 负号</li><li><code>!</code>: 逻辑非</li><li><code>~</code>: 位非</li><li><code>*</code>: 解引用</li><li><code>&amp;</code>: 取址</li><li><code>sizeof</code>: 获取大小</li><li><code>_Alignof</code>: 对齐要求 (C11起)</li><li><code>(类型)</code>：强制类型转换</li></ul></li><li><strong>乘除</strong>： <ul><li><code>*</code>: 乘</li><li><code>/</code>: 除</li><li><code>%</code>: 取余</li></ul></li><li><strong>加减</strong>： <ul><li><code>+</code>: 加</li><li><code>-</code>: 减</li></ul></li><li><strong>位移</strong>： <ul><li><code>&lt;&lt;</code>: 左移</li><li><code>&gt;&gt;</code>: 右移</li></ul></li><li><strong>关系</strong>： <ul><li><code>&lt;</code>: 小于</li><li><code>&lt;=</code>: 小于等于</li><li><code>&gt;</code>: 大于</li><li><code>&gt;=</code>: 大于等于</li></ul></li><li><strong>相等</strong>： <ul><li><code>==</code>: 等于</li><li><code>!=</code>: 不等于</li></ul></li><li><strong>位与</strong>： <ul><li><code>&amp;</code></li></ul></li><li><strong>位异或</strong>： <ul><li><code>^</code></li></ul></li><li><strong>位或</strong>：</li></ol><ul><li><code>|</code></li></ul><ol start="11"><li><strong>逻辑与</strong>：</li></ol><ul><li><code>&amp;&amp;</code></li></ul><ol start="12"><li><strong>逻辑或</strong>：</li></ol><ul><li><code>||</code></li></ul><ol start="13"><li><strong>条件</strong>：</li></ol><ul><li><code>? :</code> (三元运算符)</li></ul><ol start="14"><li><strong>赋值</strong>：</li></ol><ul><li><code>=</code>: 赋值</li><li><code>+=</code>: 加并赋值</li><li><code>-=</code>: 减并赋值</li><li><code>*=</code>: 乘并赋值</li><li><code>/=</code>: 除并赋值</li><li><code>%=</code>: 取余并赋值</li><li><code>&lt;&lt;=</code>: 左移并赋值</li><li><code>&gt;&gt;=</code>: 右移并赋值</li><li><code>&amp;=</code>: 位与并赋值</li><li><code>^=</code>: 位异或并赋值</li><li><code>|=</code>: 位或并赋值</li></ul><ol start="15"><li><strong>逗号</strong>：</li></ol><ul><li><code>,</code> (逗号运算符)</li></ul><h4 id="在一个复杂的表达式中-你可以使用括号-来改变运算顺序-明确优先级。" tabindex="-1"><a class="header-anchor" href="#在一个复杂的表达式中-你可以使用括号-来改变运算顺序-明确优先级。"><span>在一个复杂的表达式中，你可以使用括号 <code>()</code> 来改变运算顺序，明确优先级。</span></a></h4><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h3><p>当一个算术表达式包含不同的数据类型操作时，它们会在一个被称为类型转换的过程中自动进行必要的转换。 例如,在一个同时涉及浮点数<code>float</code>和<code>int</code>的计算中，编译器会把整数转化为浮点数。</p><h4 id="自动类型转换" tabindex="-1"><a class="header-anchor" href="#自动类型转换"><span>自动类型转换</span></a></h4><p>在下面的程序中，变量<strong>increase</strong>被自动转换为<strong>浮点数</strong>：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">float</span> price <span class="token operator">=</span> <span class="token number">6.50</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> increase <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
   <span class="token keyword">float</span> new_price<span class="token punctuation">;</span>

   new_price <span class="token operator">=</span> price <span class="token operator">+</span> increase<span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;New price is %4.2f&quot;</span><span class="token punctuation">,</span> new_price<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*Output: new price is 8.50 */</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt="image.png" loading="lazy"> 浮点数默认为double类型，如果想要使用单精度，请标明“f”</p><p>在 C 语言中，当两个不同的数据类型进行运算时，C 语言会进行自动类型转换，以确保数据不会因为类型不匹配而发生错误。这种转换通常是根据类型的“精度”来进行的。以下是 C 语言中基本数据类型的精度顺序，从最低到最高： 1.<code>char</code>/<code>unsigned char</code> 2.<code>short int</code>/<code>unsigned short int</code> 3.<code>int</code>/<code>unsigned int</code> 4.<code>long int</code>/<code>unsigned long int</code> 5.<code>long long int</code>/<code>unsigned long long int</code> 6.<code>float</code> 7.<code>double</code> 8.<code>long double</code> ，C 语言会自动将精度较低的类型转换为精度较高的类型，然后再进行运算。</p><p>例如，如果你有一个 int 值和一个 double 值并将它们相加，C 语言会首先将 int 值转换为 double，然后再进行加法运算。</p><p>注意：这种自动类型转换可能会引起某些不预期的问题，尤其是当涉及到有符号和无符号类型时。因此，编程时最好明确数据类型，确保类型转换的准确性。</p><p>当你想把表达式的结果强制转换成不同的类型时，你可以通过类型转换进行显式的转换，如下代码：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">/*   float price = 6.50;
   int increase = 2;
   float new_price;

   new_price = price + increase;
   printf(&quot;New price is %4.2f&quot;, new_price);
                                             */</span>
<span class="token comment">/*Output: new price is 8.50 */</span>
    <span class="token keyword">float</span> averange<span class="token punctuation">;</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token comment">//total 转换为float 强制转换</span>
    averange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>total <span class="token operator">/</span> count<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%4.2f&quot;</span><span class="token punctuation">,</span> averange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.75</p><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h3><p>赋值语句首先评估等号( = )右边的表达式，然后将该值赋给 = 左边的变量。 这使得在赋值语句的两边使用同一个变量是有可能的，且在编程中经常使用该特性。</p><p>例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了缩短此类型的赋值语句，C 语言提供了 += 赋值运算符。上面的语句可以写成:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>x <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>许多 C 语言的运算符都有一个相应的赋值运算符。下面的程序演示了算术赋值运算符:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> 
x <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//</span>
x <span class="token operator">*=</span> <span class="token number">3</span><span class="token punctuation">;</span>
x <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
x <span class="token operator">%=</span> <span class="token number">2</span><span class="token punctuation">;</span>
x <span class="token operator">+=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> 
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细看一下最后一条赋值语句。右边的整个表达式被计算，然后和 x 相加，再赋值给 x。等价于 x = x + (3 * 2)。</p><p>练习 填空，将 int 类型变量num2相加到变量num1中：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
num1___num2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>+=</p></blockquote><h3 id="自增和自减运算" tabindex="-1"><a class="header-anchor" href="#自增和自减运算"><span>自增和自减运算</span></a></h3><p>给一个变量加1可以用自增<code>++</code>完成 同样的<code>**--**</code>** **用于减1</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token operator">--</span>z<span class="token punctuation">;</span> <span class="token comment">//5</span>
<span class="token operator">++</span>z<span class="token punctuation">;</span> <span class="token comment">//6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自加（自减）位置不同，代表的运算意义也不同</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> z<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token comment">/* x = z;
   z = z - 1;
*/</span>
x <span class="token operator">=</span> <span class="token operator">--</span>y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>前缀形式是先增加、减少变量，然后在赋值语句中使用它。</code><code>后缀形式首先使用变量的值，然后再进行增减。</code></p><p>下面代码，变量 x 最终等于多少？</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//9</span>
x <span class="token operator">+=</span> y<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//x = 9+7 = 16 y = 6 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习</span></a></h2><ol><li>C 语言执行的主入口是？</li></ol><ul><li>[ ] A. 代码第一行</li><li>[x] B. main() 函数</li><li>[ ] C. &lt;stdio.h&gt; 头文件</li></ul><ol start="2"><li>填空，使用 printf 输出文本&quot;I love C&quot;:</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">___</span><span class="token punctuation">(</span><span class="token string">&quot;I love C&quot;</span><span class="token punctuation">)</span>___
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>printf ;</p></blockquote><ol start="3"><li>下面哪一项是 c 语言单行注释？</li></ol><ul><li>[ ] A. ## 单行注释</li><li>[ ] B. ** 单行注释</li><li>[x] C. // 单行注释</li></ul><ol start="4"><li>填空，声明一个变量 sum，并将变量 a、b 相加赋值给 sum:</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>int___ <span class="token operator">=</span> a ___ b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>sum +</p></blockquote><ol start="5"><li>填空，输出变量 v。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>___include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">42135</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> ___<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h1 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span></span></a></h1><p>v</p></blockquote>`,280);function O(I,F){const a=o("ExternalLinkIcon");return p(),c("div",null,[b,s("p",null,[g,n("（英語："),h,n("）是一种通用的、"),s("strong",null,[s("a",f,[n("过程式"),e(a)])]),s("a",y,[w,n("語言"),e(a)]),n("，支持"),s("a",q,[n("结构化编程"),e(a)]),n("、词法作用域和 "),x,n(" ，使用静态类型系统，并且广泛用于"),s("a",_,[n("系统软件"),e(a)]),n("与"),s("a",E,[n("应用软件"),e(a)]),n("的开发。 C语言于1969年至1973年间，为了移植与开发"),s("a",C,[n("UNIX"),e(a)]),s("a",B,[n("作业系统"),e(a)]),n("，由"),s("a",A,[n("丹尼斯·里奇"),e(a)]),n("与"),s("a",z,[n("肯·汤普逊"),e(a)]),n("，以"),s("a",H,[n("B语言"),e(a)]),n("为基础，在"),s("a",D,[n("贝尔实验室"),e(a)]),n("设计、开发出来。")]),T])}const L=t(m,[["render",O],["__file","note1.html.vue"]]),P=JSON.parse(`{"path":"/zh/Lilya/program/C/note1.html","title":"01-C 语言基础概念","lang":"zh-CN","frontmatter":{"title":"01-C 语言基础概念","date":"2024-03-27T16:09:18.000Z","author":"黑静美","isOriginal":true,"category":["编程"],"tag":["C","C井"],"icon":"c","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"What is C programm languege? C语言（英語：C Language）是一种通用的、过程式编程語言，支持结构化编程、词法作用域和 递归 ，使用静态类型系统，并且广泛用于系统软件与应用软件的开发。 C语言于1969年至1973年间，为了移植与开发UNIX作业系统，由丹尼斯·里奇与肯·汤普逊，以B语言为基础，在贝尔实验室设计、开发出...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://github.com/Heijingmei/Heijingmei.github.io/Lilya/program/C/note1.html"}],["link",{"rel":"alternate","hreflang":"ger-de","href":"https://github.com/Heijingmei/Heijingmei.github.io/de/Lilya/program/C/note1.html"}],["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/C/note1.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"01-C 语言基础概念"}],["meta",{"property":"og:description","content":"What is C programm languege? C语言（英語：C Language）是一种通用的、过程式编程語言，支持结构化编程、词法作用域和 递归 ，使用静态类型系统，并且广泛用于系统软件与应用软件的开发。 C语言于1969年至1973年间，为了移植与开发UNIX作业系统，由丹尼斯·里奇与肯·汤普逊，以B语言为基础，在贝尔实验室设计、开发出..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"ger-De"}],["meta",{"property":"og:updated_time","content":"2024-04-17T14:57:44.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:tag","content":"C井"}],["meta",{"property":"article:published_time","content":"2024-03-27T16:09:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-17T14:57:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01-C 语言基础概念\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-27T16:09:18.000Z\\",\\"dateModified\\":\\"2024-04-17T14:57:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":2,"title":"What is C programm languege?","slug":"what-is-c-programm-languege","link":"#what-is-c-programm-languege","children":[]},{"level":2,"title":"Hallo, world!","slug":"hallo-world","link":"#hallo-world","children":[{"level":3,"title":"printf()","slug":"printf","link":"#printf","children":[]}]},{"level":2,"title":"数据类型 Data type","slug":"数据类型-data-type","link":"#数据类型-data-type","children":[{"level":3,"title":"int：整数","slug":"int-整数","link":"#int-整数","children":[]},{"level":3,"title":"float：浮点数","slug":"float-浮点数","link":"#float-浮点数","children":[]},{"level":3,"title":"double：双精度浮点数","slug":"double-双精度浮点数","link":"#double-双精度浮点数","children":[]},{"level":3,"title":"char：单个字符","slug":"char-单个字符","link":"#char-单个字符","children":[]},{"level":3,"title":"变量 Variable","slug":"变量-variable","link":"#变量-variable","children":[{"level":4,"title":"命名规则","slug":"命名规则","link":"#命名规则","children":[]},{"level":4,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":4,"title":"int & float：整数和浮点数","slug":"int-float-整数和浮点数","link":"#int-float-整数和浮点数","children":[]},{"level":4,"title":"char","slug":"char","link":"#char","children":[]}]},{"level":3,"title":"常量  Constant","slug":"常量-constant","link":"#常量-constant","children":[]},{"level":3,"title":"示例：const double","slug":"示例-const-double","link":"#示例-const-double","children":[]}]},{"level":2,"title":"define","slug":"define","link":"#define","children":[{"level":3,"title":"const 和 define 在 C 语言中都可以用来定义常量，但是它们的工作方式有所不同，并且各有各的用途。以下是它们之间的一些主要区别：","slug":"const-和-define-在-c-语言中都可以用来定义常量-但是它们的工作方式有所不同-并且各有各的用途。以下是它们之间的一些主要区别","link":"#const-和-define-在-c-语言中都可以用来定义常量-但是它们的工作方式有所不同-并且各有各的用途。以下是它们之间的一些主要区别","children":[{"level":4,"title":"预处理器和编译器：","slug":"预处理器和编译器","link":"#预处理器和编译器","children":[]},{"level":4,"title":"作用域：","slug":"作用域","link":"#作用域","children":[]},{"level":4,"title":"内存占用：","slug":"内存占用","link":"#内存占用","children":[]},{"level":4,"title":"类型和检查：","slug":"类型和检查","link":"#类型和检查","children":[]}]},{"level":3,"title":"Question 1 在具体使用的时候我们应该如何选择？","slug":"question-1-在具体使用的时候我们应该如何选择","link":"#question-1-在具体使用的时候我们应该如何选择","children":[]},{"level":3,"title":"类型检查：","slug":"类型检查","link":"#类型检查","children":[]},{"level":3,"title":"作用域：","slug":"作用域-1","link":"#作用域-1","children":[]},{"level":3,"title":"性能：","slug":"性能","link":"#性能","children":[]},{"level":3,"title":"编程风格：","slug":"编程风格","link":"#编程风格","children":[]}]},{"level":2,"title":"输入及输出","slug":"输入及输出","link":"#输入及输出","children":[]},{"level":2,"title":"输入 Input","slug":"输入-input","link":"#输入-input","children":[{"level":3,"title":"getchar()","slug":"getchar","link":"#getchar","children":[]},{"level":3,"title":"scanf","slug":"scanf","link":"#scanf","children":[{"level":4,"title":"Question 2","slug":"question-2","link":"#question-2","children":[]},{"level":4,"title":"探究 scanf 获取字符串的特性","slug":"探究-scanf-获取字符串的特性","link":"#探究-scanf-获取字符串的特性","children":[{"level":6,"title":"%s（对应字符串 char xxx[]）","slug":"s-对应字符串-char-xxx","link":"#s-对应字符串-char-xxx","children":[]},{"level":6,"title":"%d（对应整数 int）","slug":"d-对应整数-int","link":"#d-对应整数-int","children":[]},{"level":6,"title":"%f（对应浮点数 float）等等。","slug":"f-对应浮点数-float-等等。","link":"#f-对应浮点数-float-等等。","children":[]}]},{"level":4,"title":"scanf 是否需要 & 速查表","slug":"scanf-是否需要-速查表","link":"#scanf-是否需要-速查表","children":[]}]},{"level":3,"title":"fgets","slug":"fgets","link":"#fgets","children":[{"level":6,"title":"(老代码机制，不安全（有溢出的风险）)","slug":"老代码机制-不安全-有溢出的风险","link":"#老代码机制-不安全-有溢出的风险","children":[]}]}]},{"level":2,"title":"输出 Output","slug":"输出-output","link":"#输出-output","children":[{"level":3,"title":"putchar() 输出单一字符。 比如:","slug":"putchar-输出单一字符。-比如","link":"#putchar-输出单一字符。-比如","children":[]},{"level":3,"title":"puts( )","slug":"puts","link":"#puts","children":[]}]},{"level":2,"title":"printf 函数","slug":"printf-函数","link":"#printf-函数","children":[{"level":3,"title":"printf() 函数基本使用","slug":"printf-函数基本使用","link":"#printf-函数基本使用","children":[{"level":4,"title":"","slug":"","link":"#","children":[]}]},{"level":3,"title":"printf() 函数中的转译序列","slug":"printf-函数中的转译序列","link":"#printf-函数中的转译序列","children":[{"level":4,"title":"\\\\n换行符，打印完这个字符后，光标会移动到下一行开始位置","slug":"n换行符-打印完这个字符后-光标会移动到下一行开始位置","link":"#n换行符-打印完这个字符后-光标会移动到下一行开始位置","children":[]},{"level":4,"title":"\\\\t制表符，打印完这个字符后，光标会移动到下一个制表位置","slug":"t制表符-打印完这个字符后-光标会移动到下一个制表位置","link":"#t制表符-打印完这个字符后-光标会移动到下一个制表位置","children":[]},{"level":4,"title":"\\\\\\\\反斜杠，打印\\\\符号","slug":"反斜杠-打印-符号","link":"#反斜杠-打印-符号","children":[]},{"level":4,"title":"\\\\'单引号","slug":"单引号","link":"#单引号","children":[]},{"level":4,"title":"\\\\“双引号","slug":"双引号","link":"#双引号","children":[]},{"level":4,"title":"\\\\b退格  删除特定值","slug":"b退格-删除特定值","link":"#b退格-删除特定值","children":[]}]},{"level":3,"title":"printf() 函数中的格式化输出","slug":"printf-函数中的格式化输出","link":"#printf-函数中的格式化输出","children":[]}]},{"level":2,"title":"格式化输入","slug":"格式化输入","link":"#格式化输入","children":[]},{"level":2,"title":"代码注释","slug":"代码注释","link":"#代码注释","children":[{"level":3,"title":"多行注释","slug":"多行注释","link":"#多行注释","children":[]},{"level":3,"title":"单行注释","slug":"单行注释","link":"#单行注释","children":[]}]},{"level":2,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[{"level":3,"title":"C 支持的 算术运算符：","slug":"c-支持的-算术运算符","link":"#c-支持的-算术运算符","children":[]},{"level":3,"title":"C 语言运算符优先级","slug":"c-语言运算符优先级","link":"#c-语言运算符优先级","children":[{"level":4,"title":"在一个复杂的表达式中，你可以使用括号 () 来改变运算顺序，明确优先级。","slug":"在一个复杂的表达式中-你可以使用括号-来改变运算顺序-明确优先级。","link":"#在一个复杂的表达式中-你可以使用括号-来改变运算顺序-明确优先级。","children":[]}]},{"level":3,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[{"level":4,"title":"自动类型转换","slug":"自动类型转换","link":"#自动类型转换","children":[]}]},{"level":3,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]},{"level":3,"title":"自增和自减运算","slug":"自增和自减运算","link":"#自增和自减运算","children":[]}]},{"level":2,"title":"练习","slug":"练习","link":"#练习","children":[]}],"git":{"createdTime":1713365864000,"updatedTime":1713365864000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":31.28,"words":9383},"filePathRelative":"zh/Lilya/program/C/note1.md","localizedDate":"2024年3月27日","excerpt":"<h2>What is C programm languege?</h2>\\n<p><strong>C语言</strong>（英語：<strong>C Language</strong>）是一种通用的、<strong><a href=\\"https://zh.wikipedia.org/wiki/%E8%BF%87%E7%A8%8B%E5%BC%8F%E7%BC%96%E7%A8%8B\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">过程式</a></strong><a href=\\"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>编程</strong>語言</a>，支持<a href=\\"https://zh.wikipedia.org/wiki/%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">结构化编程</a>、词法作用域和 <strong><u>递归</u></strong> ，使用静态类型系统，并且广泛用于<a href=\\"https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">系统软件</a>与<a href=\\"https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">应用软件</a>的开发。\\nC语言于1969年至1973年间，为了移植与开发<a href=\\"https://z.wikipedia.org/wiki/UNIX\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">UNIX</a><a href=\\"https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">作业系统</a>，由<a href=\\"https://zh.wikipedia.org/wiki/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">丹尼斯·里奇</a>与<a href=\\"https://zh.wikipedia.org/wiki/%E8%82%AF%C2%B7%E6%B1%A4%E6%99%AE%E9%80%8A\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">肯·汤普逊</a>，以<a href=\\"https://zh.wikipedia.org/wiki/B%E8%AF%AD%E8%A8%80\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">B语言</a>为基础，在<a href=\\"https://zh.wikipedia.org/wiki/%E8%B4%9D%E5%B0%94%E5%AE%9E%E9%AA%8C%E5%AE%A4\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">贝尔实验室</a>设计、开发出来。</p>","autoDesc":true}`);export{L as comp,P as data};
