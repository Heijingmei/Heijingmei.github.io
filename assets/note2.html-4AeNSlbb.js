import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,e as s}from"./app-B2IUYQZ5.js";const t={},o=s(`<h2 id="_0-hello-world" tabindex="-1"><a class="header-anchor" href="#_0-hello-world"><span>0. Hello, World</span></a></h2><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算机传统⬆️</p><p>打印出“Hello, World!”字样</p><p>使用 <code>cargo build</code> 来编译。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> build
   Compiling helloworld v0.1.0 <span class="token punctuation">(</span>/home/mike/works/classes/helloworld<span class="token punctuation">)</span>
    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">1</span>.57s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cargo run</code> 命令可以直接运行程序。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> run
    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.01s
     Running <span class="token variable"><span class="token variable">\`</span>target/debug/helloworld<span class="token variable">\`</span></span>
Hello, world<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以看到，最后终端打印出了 Hello, world。我们成功地执行了第一个 Rust 程序。</p></blockquote><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2><hr><p>著作权归AI悦创所有 原文链接：https://bornforthis.cn/column/Rust/01.html</p><h2 id="_1" tabindex="-1"><a class="header-anchor" href="#_1"><span>1.</span></a></h2>`,13),l=[o];function i(r,p){return a(),e("div",null,l)}const u=n(t,[["render",i],["__file","note2.html.vue"]]),m=JSON.parse('{"path":"/zh/Lilya/program/rust/note2.html","title":"02-基本语法","lang":"zh-CN","frontmatter":{"title":"02-基本语法","author":"Lilya 黑静美","isOriginal":true,"category":["编程"],"tag":["rust"],"icon":"/img/Rust.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"0. Hello, World 计算机传统⬆️ 打印出“Hello, World!”字样 使用 cargo build 来编译。 使用 cargo run 命令可以直接运行程序。 可以看到，最后终端打印出了 Hello, world。我们成功地执行了第一个 Rust 程序。 著作权归AI悦创所有 原文链接：https://bornforthis.cn/...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/rust/note2.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"02-基本语法"}],["meta",{"property":"og:description","content":"0. Hello, World 计算机传统⬆️ 打印出“Hello, World!”字样 使用 cargo build 来编译。 使用 cargo run 命令可以直接运行程序。 可以看到，最后终端打印出了 Hello, world。我们成功地执行了第一个 Rust 程序。 著作权归AI悦创所有 原文链接：https://bornforthis.cn/..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-13T00:15:16.000Z"}],["meta",{"property":"article:author","content":"Lilya 黑静美"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:modified_time","content":"2024-04-13T00:15:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02-基本语法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-13T00:15:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lilya 黑静美\\"}]}"]]},"headers":[{"level":2,"title":"0. Hello, World","slug":"_0-hello-world","link":"#_0-hello-world","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]},{"level":2,"title":"1.","slug":"_1","link":"#_1","children":[]}],"git":{"createdTime":1712967316000,"updatedTime":1712967316000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":0.53,"words":160},"filePathRelative":"zh/Lilya/program/rust/note2.md","localizedDate":"2024年4月13日","excerpt":"<h2>0. Hello, World</h2>\\n<div class=\\"language-rust\\" data-ext=\\"rs\\" data-title=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello, world!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{u as comp,m as data};
