import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as n,e as a}from"./app-BfIiKbGh.js";const s={},o=a(`<h2 id="_0-hello-world" tabindex="-1"><a class="header-anchor" href="#_0-hello-world"><span>0. Hello, World</span></a></h2><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算机传统⬆️</p><p>打印出“Hello, World!”字样</p><p>使用 <code>cargo build</code> 来编译。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> build
   Compiling helloworld v0.1.0 <span class="token punctuation">(</span>/home/mike/works/classes/helloworld<span class="token punctuation">)</span>
    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">1</span>.57s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cargo run</code> 命令可以直接运行程序。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> run
    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.01s
     Running <span class="token variable"><span class="token variable">\`</span>target/debug/helloworld<span class="token variable">\`</span></span>
Hello, world<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以看到，最后终端打印出了 Hello, world。我们成功地执行了第一个 Rust 程序。</p></blockquote><h2 id="_1-数据类型" tabindex="-1"><a class="header-anchor" href="#_1-数据类型"><span>1.数据类型</span></a></h2><p>Rust 的数据类型主要分为两大类：标量（Scalar）类型和复合（Compound）类型。以下是一个概览表格：</p><details class="hint-container details"><summary>点击展开详情</summary><table><thead><tr><th>类别</th><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>标量</td><td>整型</td><td>包括 <code>i8</code>、<code>i16</code>、<code>i32</code>、<code>i64</code>、<code>i128</code>、<code>isize</code>（有符号整型）和 <code>u8</code>、<code>u16</code>、<code>u32</code>、<code>u64</code>、<code>u128</code>、<code>usize</code>（无符号整型）</td></tr><tr><td>标量</td><td>浮点型</td><td>包括 <code>f32</code> 和 <code>f64</code></td></tr><tr><td>标量</td><td>布尔型</td><td><code>bool</code> 类型，它的值可以是 <code>true</code> 或 <code>false</code></td></tr><tr><td>标量</td><td>字符型</td><td><code>char</code> 类型，表示单个 Unicode 字符</td></tr><tr><td>复合</td><td>元组</td><td>元组（Tuple）类型，可以包含多种类型的几个值</td></tr><tr><td>复合</td><td>数组</td><td>数组（Array）类型，所有元素都必须是相同类型</td></tr><tr><td>复合</td><td>结构体</td><td>自定义数据类型，允许命名和包装多个相关值</td></tr><tr><td>复合</td><td>枚举</td><td>枚举（Enum）类型，用于定义通过多个具体变量来表示的类型</td></tr><tr><td>复合</td><td>切片</td><td>切片（Slice）类型，引用集合的一部分数据</td></tr><tr><td>复合</td><td>引用</td><td>引用（Reference）类型，允许以不拥有数据的方式借用值</td></tr><tr><td>特殊</td><td>动态大小类型</td><td>如 <code>str</code>，它是一个动态大小的字符串类型</td></tr><tr><td>特殊</td><td>指针</td><td>包括裸指针 <code>*const T</code> 和 <code>*mut T</code>，不建议直接使用</td></tr><tr><td>特殊</td><td>函数</td><td>函数也是一种类型，可以通过函数签名来指定</td></tr><tr><td>特殊</td><td>单元类型</td><td><code>()</code>，它是一个空元组，也称为单元类型</td></tr></tbody></table></details>`,12),d=[o];function l(c,i){return e(),n("div",null,d)}const u=t(s,[["render",l],["__file","note2.html.vue"]]),m=JSON.parse('{"path":"/zh/Lilya/program/Rust/note2.html","title":"02-基本语法","lang":"zh-CN","frontmatter":{"title":"02-基本语法","author":"黑静美","isOriginal":true,"category":["编程"],"tag":["rust"],"icon":"/img/Rust.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"0. Hello, World 计算机传统⬆️ 打印出“Hello, World!”字样 使用 cargo build 来编译。 使用 cargo run 命令可以直接运行程序。 可以看到，最后终端打印出了 Hello, world。我们成功地执行了第一个 Rust 程序。 1.数据类型 Rust 的数据类型主要分为两大类：标量（Scalar）类型和复...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/Rust/note2.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"02-基本语法"}],["meta",{"property":"og:description","content":"0. Hello, World 计算机传统⬆️ 打印出“Hello, World!”字样 使用 cargo build 来编译。 使用 cargo run 命令可以直接运行程序。 可以看到，最后终端打印出了 Hello, world。我们成功地执行了第一个 Rust 程序。 1.数据类型 Rust 的数据类型主要分为两大类：标量（Scalar）类型和复..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T12:39:42.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:modified_time","content":"2024-04-14T12:39:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02-基本语法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-14T12:39:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":2,"title":"0. Hello, World","slug":"_0-hello-world","link":"#_0-hello-world","children":[]},{"level":2,"title":"1.数据类型","slug":"_1-数据类型","link":"#_1-数据类型","children":[]}],"git":{"createdTime":1713098382000,"updatedTime":1713098382000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":1.63,"words":490},"filePathRelative":"zh/Lilya/program/Rust/note2.md","localizedDate":"2024年4月14日","excerpt":"<h2>0. Hello, World</h2>\\n<div class=\\"language-rust\\" data-ext=\\"rs\\" data-title=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello, world!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{u as comp,m as data};
