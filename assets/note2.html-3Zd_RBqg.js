import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as t,e as a}from"./app-BM5uPX0N.js";const o={},s=a(`<h3 id="_1-有效的括号-简单" tabindex="-1"><a class="header-anchor" href="#_1-有效的括号-简单"><span>1. 有效的括号（简单）</span></a></h3><p><strong>题目描述：</strong> 给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code> 和 <code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>注意空字符串可被认为是有效字符串。</li></ul><p><strong>示例：</strong></p><ul><li>输入: <code>&quot;()&quot;</code>，输出: <code>true</code></li><li>输入: <code>&quot;()[]{}&quot;</code>，输出: <code>true</code></li><li>输入: <code>&quot;(]&quot;</code>，输出: <code>false</code></li><li>输入: <code>&quot;([)]&quot;</code>，输出: <code>false</code></li><li>输入: <code>&quot;{[]}&quot;</code>，输出: <code>true</code></li></ul><p><strong>提示：</strong> 使用栈来处理匹配的括号。</p><h3 id="_2-每日温度-中等" tabindex="-1"><a class="header-anchor" href="#_2-每日温度-中等"><span>2. 每日温度（中等）</span></a></h3><p><strong>题目描述：</strong> 给定一个整数数组 <code>temperatures</code>，表示每天的温度，返回一个数组 <code>answer</code>，其中 <code>answer[i]</code> 是指对于第 <code>i</code> 天，至少还要等多少天才会有更高的温度；如果之后都没有更高的温度，则为 <code>0</code>。</p><p><strong>示例：</strong></p><ul><li>输入: <code>temperatures = [73, 74, 75, 71, 69, 72, 76, 73]</code></li><li>输出: <code>[1, 1, 4, 2, 1, 1, 0, 0]</code></li></ul><p><strong>提示：</strong> 可以利用栈来跟踪那些尚未找到下一个更高温度日的日子。</p><h3 id="_3-最小栈-中等" tabindex="-1"><a class="header-anchor" href="#_3-最小栈-中等"><span>3. 最小栈（中等）</span></a></h3><p><strong>题目描述：</strong> 设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li><code>push(x)</code> —— 将元素 x 推入栈中。</li><li><code>pop()</code> —— 删除栈顶的元素。</li><li><code>top()</code> —— 获取栈顶元素。</li><li><code>getMin()</code> —— 检索栈中的最小元素。</li></ul><p><strong>示例：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>minStack <span class="token operator">=</span> MinStack<span class="token punctuation">(</span><span class="token punctuation">)</span>
minStack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
minStack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
minStack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>minStack<span class="token punctuation">.</span>getMin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 返回 -3</span>
minStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>minStack<span class="token punctuation">.</span>top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 返回 0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>minStack<span class="token punctuation">.</span>getMin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 返回 -2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong> 考虑使用两个栈，一个用来保存所有的元素，另一个用来保存每个元素推入时的最小值。</p>`,17),c=[s];function p(i,l){return n(),t("div",null,c)}const u=e(o,[["render",p],["__file","note2.html.vue"]]),m=JSON.parse(`{"path":"/zh/Lilya/program/Algorithm/data-structure/note2.html","title":"","lang":"zh-CN","frontmatter":{"author":"黑静美","category":["编程"],"tag":["c","数据结构"],"isOriginal":true,"icon":"c","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"1. 有效的括号（简单） 题目描述： 给定一个只包括 '('，')'，'{'，'}'，'[' 和 ']' 的字符串，判断字符串是否有效。有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 注意空字符串可被认为是有效字符串。 示例： 输入: \\"()\\"，输出: true 输入: \\"()[]{}\\"，输出: true 输入: ...","head":[["link",{"rel":"alternate","hreflang":"ger-de","href":"https://github.com/Heijingmei/Heijingmei.github.io/de/Lilya/program/Algorithm/data-structure/note2.html"}],["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/Algorithm/data-structure/note2.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:description","content":"1. 有效的括号（简单） 题目描述： 给定一个只包括 '('，')'，'{'，'}'，'[' 和 ']' 的字符串，判断字符串是否有效。有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 注意空字符串可被认为是有效字符串。 示例： 输入: \\"()\\"，输出: true 输入: \\"()[]{}\\"，输出: true 输入: ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"ger-De"}],["meta",{"property":"og:updated_time","content":"2024-06-15T15:39:18.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:modified_time","content":"2024-06-15T15:39:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-15T15:39:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":3,"title":"1. 有效的括号（简单）","slug":"_1-有效的括号-简单","link":"#_1-有效的括号-简单","children":[]},{"level":3,"title":"2. 每日温度（中等）","slug":"_2-每日温度-中等","link":"#_2-每日温度-中等","children":[]},{"level":3,"title":"3. 最小栈（中等）","slug":"_3-最小栈-中等","link":"#_3-最小栈-中等","children":[]}],"git":{"createdTime":1718465958000,"updatedTime":1718465958000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":1.44,"words":432},"filePathRelative":"zh/Lilya/program/Algorithm/data-structure/note2.md","localizedDate":"2024年6月15日","excerpt":"<h3>1. 有效的括号（简单）</h3>\\n<p><strong>题目描述：</strong>\\n给定一个只包括 <code>'('</code>，<code>')'</code>，<code>'{'</code>，<code>'}'</code>，<code>'['</code> 和 <code>']'</code> 的字符串，判断字符串是否有效。有效字符串需满足：</p>\\n<ul>\\n<li>左括号必须用相同类型的右括号闭合。</li>\\n<li>左括号必须以正确的顺序闭合。</li>\\n<li>注意空字符串可被认为是有效字符串。</li>\\n</ul>\\n<p><strong>示例：</strong></p>","autoDesc":true}`);export{u as comp,m as data};
