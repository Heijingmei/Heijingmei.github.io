import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DH3syj1R.js";const e="/assets/image-20240503121639235-JAjTjcjK.png",p={},o=t('<figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// Program entry point</span>
 <span class="token keyword">let</span> <span class="token keyword">mut</span> n <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// Mutable variable binding</span>
 <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{n}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Macro for printing, like printf</span>
 <span class="token keyword">while</span> n <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
 <span class="token comment">// No parenthesis around expression</span>
 <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token comment">// n modulo 2</span>
 n <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// divide by 2</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
 n <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token macro property">print!</span><span class="token punctuation">(</span>&quot; <span class="token punctuation">-&gt;</span> <span class="token punctuation">{</span>n<span class="token punctuation">}</span>“<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),c=[o];function i(r,l){return s(),a("div",null,c)}const k=n(p,[["render",i],["__file","note3.html.vue"]]),d=JSON.parse('{"path":"/Lilya/program/rust/note3.html","title":"03-some example","lang":"en-US","frontmatter":{"title":"03-some example","author":"Lilya 黑静美","category":["program"],"tag":["rust","syntax"],"isOriginal":true,"icon":"/ico/Rust.ico","sticky":false,"star":true,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/Lilya/program/rust/note3.html"}],["meta",{"property":"og:site_name","content":"BH_English Version"}],["meta",{"property":"og:title","content":"03-some example"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-12T09:24:46.000Z"}],["meta",{"property":"article:author","content":"Lilya 黑静美"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:tag","content":"syntax"}],["meta",{"property":"article:modified_time","content":"2024-06-12T09:24:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03-some example\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-12T09:24:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lilya 黑静美\\"}]}"]]},"headers":[],"git":{"createdTime":1718184286000,"updatedTime":1718184286000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":0.33,"words":98},"filePathRelative":"Lilya/program/rust/note3.md","localizedDate":"June 12, 2024","excerpt":"<figure><figcaption></figcaption></figure>\\n<div class=\\"language-rust\\" data-ext=\\"rs\\" data-title=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n <span class=\\"token comment\\">// Program entry point</span>\\n <span class=\\"token keyword\\">let</span> <span class=\\"token keyword\\">mut</span> n <span class=\\"token operator\\">=</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Mutable variable binding</span>\\n <span class=\\"token macro property\\">print!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"{n}\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Macro for printing, like printf</span>\\n <span class=\\"token keyword\\">while</span> n <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">{</span>\\n <span class=\\"token comment\\">// No parenthesis around expression</span>\\n <span class=\\"token keyword\\">if</span> n <span class=\\"token operator\\">%</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// n modulo 2</span>\\n n <span class=\\"token operator\\">/=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// divide by 2</span>\\n <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n n <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3</span> <span class=\\"token operator\\">*</span> n <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n <span class=\\"token punctuation\\">}</span>\\n <span class=\\"token macro property\\">print!</span><span class=\\"token punctuation\\">(</span>\\" <span class=\\"token punctuation\\">-&gt;</span> <span class=\\"token punctuation\\">{</span>n<span class=\\"token punctuation\\">}</span>“<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n <span class=\\"token punctuation\\">}</span>\\n <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{k as comp,d as data};
