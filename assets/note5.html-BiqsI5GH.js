import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-BM5uPX0N.js";const e="/assets/1705231611065-d22f899c-a719-4505-b49e-df1d5a775556-Bl5-_YRp.png",p="/assets/1705231524824-1bcbfac9-e114-4799-8b73-546d2b4145a7-C09o8_zC.png",c="/assets/1705232168389-c2773b3d-2b21-4876-9894-1fd4be5def0f-CX1Oe32s.png",i="/assets/1705232201309-cd192dbc-7ee8-4e9e-8d1d-4a4bfbcecee8-CzYIi7-G.png",o={},l=t(`<h1 id="_1-字符串-string" tabindex="-1"><a class="header-anchor" href="#_1-字符串-string"><span>1. 字符串 String</span></a></h1><h2 id="a-定义" tabindex="-1"><a class="header-anchor" href="#a-定义"><span>a. 定义</span></a></h2><h5 id="c-中的字符串是一个以null字符-0结尾的字符数组。" tabindex="-1"><a class="header-anchor" href="#c-中的字符串是一个以null字符-0结尾的字符数组。"><span>C 中的字符串是一个以<strong>NULL</strong>字符<code>\\0</code>结尾的字符数组。</span></a></h5><p>字符串声明可以通过多种方式进行，每种方式都有各自考虑的因素。</p><p>例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span>  str_name<span class="token punctuation">[</span>str_len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将创建一个由 <strong>str_len</strong> 个字符组成的名为 <strong>str_name</strong> 的字符串，并将其初始化为值&quot;string&quot;。</p><p>提供字符串文本初始化字符串时，编译器会自动将 NULL 字符 \\0 添加到字符数组末尾。</p><p>因此，声明数组大小至少比预期的字符串长度长一个字符。</p><p>下面的语句创建包含 <strong>NULL</strong> 字符的字符串。如果声明不包含 <strong>char</strong> 数组大小，则将根据初始化中字符串的长度加上<code>\\0</code>的值来计算：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello &quot;</span><span class="token punctuation">;</span> <span class="token comment">//数组超过5个字符</span>
    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %s;\\n&quot;</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//出现了奇怪的地址解引用</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %s;\\n&quot;</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Str1 is %s, str2 is %s;\\n&quot;</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+p+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>一个字符串也可以声明为一组字符，如下：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;h&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str4<span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;w&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//未声明数组长度必须以“\\0”结尾</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Str3 is: %s, str4 is: %s&quot;</span><span class="token punctuation">,</span> str3<span class="token punctuation">,</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1-使用这种方法-必须明确添加-null-字符-0-。" tabindex="-1"><a class="header-anchor" href="#_1-使用这种方法-必须明确添加-null-字符-0-。"><span>1. 使用这种方法，必须明确添加 <strong>NULL</strong> 字符<code>\\0</code> 。</span></a></h6><figure><img src="`+c+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>（否则）</p><figure><img src="'+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h6 id="字符是用单引号-括起来的。" tabindex="-1"><a class="header-anchor" href="#字符是用单引号-括起来的。"><span>字符是用单引号 &#39; 括起来的。</span></a></h6><p>与任何数组一样，字符串的名也为一个指针。</p><h6 id="字符串是用双引号-括起来的文本。" tabindex="-1"><a class="header-anchor" href="#字符串是用双引号-括起来的文本。"><span>字符串是用双引号 &quot; 括起来的文本。</span></a></h6><h6 id="char-str-stuff" tabindex="-1"><a class="header-anchor" href="#char-str-stuff"><span>char *str = &quot;stuff&quot;</span></a></h6><p>字符串指针的声明，如<code>char *str = &quot;stuff&quot;</code>; 被认为是一个常量，不能改变其初始值。</p><h5 id="string-h" tabindex="-1"><a class="header-anchor" href="#string-h"><span>&lt;string.h&gt;</span></a></h5><p>为了安全和方便地操作字符串，你可以使用下面标准库中的字符串函数（不要忘记包括 &lt;string.h&gt; ）：</p><h6 id="strlen-获取字符串的长度" tabindex="-1"><a class="header-anchor" href="#strlen-获取字符串的长度"><span><code>strlen()</code>-获取字符串的长度</span></a></h6><h6 id="strcat-连接两个字符串" tabindex="-1"><a class="header-anchor" href="#strcat-连接两个字符串"><span><code>strcat()</code>-连接两个字符串</span></a></h6><h6 id="strcpy-将一个字符串复制到另一个" tabindex="-1"><a class="header-anchor" href="#strcpy-将一个字符串复制到另一个"><span><code>strcpy()</code>-将一个字符串复制到另一个</span></a></h6><h6 id="strlwr-将字符串转化为小写字母" tabindex="-1"><a class="header-anchor" href="#strlwr-将字符串转化为小写字母"><span><code>strlwr()</code>-将字符串转化为小写字母</span></a></h6><h6 id="strupr-将字符串转化为大写字母" tabindex="-1"><a class="header-anchor" href="#strupr-将字符串转化为大写字母"><span><code>strupr()</code>-将字符串转化为大写字母</span></a></h6><h6 id="strrev-反转字符串" tabindex="-1"><a class="header-anchor" href="#strrev-反转字符串"><span><code>strrev()</code>-反转字符串</span></a></h6><h6 id="strcmp-比较两个字符串" tabindex="-1"><a class="header-anchor" href="#strcmp-比较两个字符串"><span><code>strcmp()</code>-比较两个字符串</span></a></h6><p>⚠️注意</p><p><strong>字符串函数</strong>和<strong>字符串指针</strong>将在以后的课程中介绍。</p><p>填空，将字符串声明为 char 数组：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>___ str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>char</p><h1 id="_2-字符串输入" tabindex="-1"><a class="header-anchor" href="#_2-字符串输入"><span>2. 字符串输入</span></a></h1><h5 id="i-scanf" tabindex="-1"><a class="header-anchor" href="#i-scanf"><span>ⅰ. scanf()</span></a></h5><p>程序通常是交互式的，要求用户输入。 为了从用户那里获取一行文本或其他字符串，C 提供了<code>scanf()</code>、<code>gets()</code>和<code>fgets()</code>函数。</p><p>你可以使用<code>scanf()</code>根据格式指定符来读取输入的字符串。例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> first_name<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your first name and age:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %d&quot;</span><span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\nHi, %s. Your age is %d&quot;</span><span class="token punctuation">,</span>first_name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当<code>scanf()</code>用于读取字符串时，不需要用<code>&amp;</code>访问变量地址，因为数组名<code>first_name</code>就是一个指针。</p><p><code>scanf()</code>在读到一个空格时就停止读取输入。</p><h5 id="ii" tabindex="-1"><a class="header-anchor" href="#ii"><span>ⅱ.</span></a></h5><p>要读取一个有空格的字符串，请使用 gets()类 函数。它读取输入，直到到达一个换行符 <code>\\n</code>（按了 Enter 键）。</p><p>例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">char</span> full_name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your full name: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gets</span><span class="token punctuation">(</span>full_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\nHi, %s.&quot;</span><span class="token punctuation">,</span> full_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="iii-fgets" tabindex="-1"><a class="header-anchor" href="#iii-fgets"><span>ⅲ. <code>fgets()</code></span></a></h5><h6 id="_1-替代-gets-的一个更安全的方法是-fgets-它最多读取指定数量的字符。" tabindex="-1"><a class="header-anchor" href="#_1-替代-gets-的一个更安全的方法是-fgets-它最多读取指定数量的字符。"><span>1. 替代 gets() 的一个更安全的方法是 fgets()，它最多读取指定数量的字符。</span></a></h6><p>例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> full_name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your full name: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fgets</span><span class="token punctuation">(</span>full_name<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\nHi, %s&quot;</span><span class="token punctuation">,</span> full_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fgets()</code>的参数是字符串名和读取的字符数，以及一个指向你想从哪里读取字符串的指针。stdin意味着要从<strong>标准输入</strong>，也就是键盘上获取。</p><h6 id="_2-gets-和-fgets-之间的另一个区别是-换行符-n-fgets-会存储。" tabindex="-1"><a class="header-anchor" href="#_2-gets-和-fgets-之间的另一个区别是-换行符-n-fgets-会存储。"><span>2. gets 和 fgets 之间的另一个区别是，换行符<code>\\n</code> <strong>fgets()</strong> 会存储。</span></a></h6><h6 id="_3" tabindex="-1"><a class="header-anchor" href="#_3"><span>3.</span></a></h6><p>⚠️注意</p><p>fgets() 只从 stdin 中读取 <code>n-1</code> 个字符，因为必须为 <code>\\0</code> 留出空间。</p><p>填空，使用 scanf 函数从输入中读取字符串存储到 char 数组 str 中：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>___ str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> ___ <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>char</p><p>&amp;str</p><h1 id="_3-字符串输出" tabindex="-1"><a class="header-anchor" href="#_3-字符串输出"><span>3. 字符串输出</span></a></h1><h6 id="_1-字符串输出由-fputs-、puts-和-printf-函数处理。" tabindex="-1"><a class="header-anchor" href="#_1-字符串输出由-fputs-、puts-和-printf-函数处理。"><span>1. 字符串输出由 <code>fputs()</code>、<code>puts()</code> 和 <code>printf()</code> 函数处理。</span></a></h6><p>fputs() 需要字符串名和一个指向你想打印字符串的位置的指针。要打印到屏幕上，使用 stdout，指的是标准输出。</p><p>例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> city<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your favorite city: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gets</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Note: for safety, use</span>
    <span class="token comment">// fgets(city, 40, stdin);</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; is a fun city.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>puts() 函数仅接受一个字符串参数，也可以用来显示输出。然而，它在输出中添加了一个换行。</p><p>例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> city<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your favorite city: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gets</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Note: for safety, use</span>
    <span class="token comment">// fgets(city, 40, stdin);</span>
    
    <span class="token function">puts</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>填空，声明字符串，并使用 fputs() 函数将其输出到屏幕：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>___ name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">;</span>
<span class="token function">___</span> <span class="token punctuation">(</span>___<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>char</p><p>fputs</p><p>name</p><hr><p>可以使用 sprintf() 函数创建格式化的字符串。这对于用其他数据类型来构建字符串很有用。</p><p>例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> info<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> dept<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;HR&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> emp <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token string">&quot;The %s dept has %d employees.&quot;</span><span class="token punctuation">,</span> dept<span class="token punctuation">,</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个有用的函数是 sscanf()，用于扫描字符串中的值。 该函数从字符串中读取值，并将其存储在相应的变量地址中。</p><p>例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> info<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Snoqualmie WA 13190&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> city<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> state<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> population<span class="token punctuation">;</span>
    <span class="token function">sscanf</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span><span class="token string">&quot;%s %s %d&quot;</span><span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token operator">&amp;</span>population<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*一一对应    ⬆1 ⬆2 ⬆3
     *      ⬇3                ⬇1 ⬇2   */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d peeple lives in %s %s &quot;</span><span class="token punctuation">,</span> population<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1>`,84),u=[l];function r(d,k){return s(),a("div",null,u)}const g=n(o,[["render",r],["__file","note5.html.vue"]]),h=JSON.parse(`{"path":"/zh/Lilya/program/C/C-03-Code-block/note5.html","title":"5-字符串","lang":"zh-CN","frontmatter":{"title":"5-字符串","author":"黑静美","isOriginal":true,"category":["编程"],"tag":["C","cpp","C井"],"icon":"c","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"1. 字符串 String a. 定义 C 中的字符串是一个以NULL字符\\\\0结尾的字符数组。 字符串声明可以通过多种方式进行，每种方式都有各自考虑的因素。 例如： 这将创建一个由 str_len 个字符组成的名为 str_name 的字符串，并将其初始化为值\\"string\\"。 提供字符串文本初始化字符串时，编译器会自动将 NULL 字符 \\\\0 添加到...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/C/C-03-Code-block/note5.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"5-字符串"}],["meta",{"property":"og:description","content":"1. 字符串 String a. 定义 C 中的字符串是一个以NULL字符\\\\0结尾的字符数组。 字符串声明可以通过多种方式进行，每种方式都有各自考虑的因素。 例如： 这将创建一个由 str_len 个字符组成的名为 str_name 的字符串，并将其初始化为值\\"string\\"。 提供字符串文本初始化字符串时，编译器会自动将 NULL 字符 \\\\0 添加到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-15T15:39:18.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:tag","content":"C井"}],["meta",{"property":"article:modified_time","content":"2024-06-15T15:39:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5-字符串\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-15T15:39:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":1,"title":"1. 字符串 String","slug":"_1-字符串-string","link":"#_1-字符串-string","children":[{"level":2,"title":"a. 定义","slug":"a-定义","link":"#a-定义","children":[{"level":5,"title":"C 中的字符串是一个以NULL字符\\\\0结尾的字符数组。","slug":"c-中的字符串是一个以null字符-0结尾的字符数组。","link":"#c-中的字符串是一个以null字符-0结尾的字符数组。","children":[{"level":6,"title":"1. 使用这种方法，必须明确添加 NULL 字符\\\\0 。","slug":"_1-使用这种方法-必须明确添加-null-字符-0-。","link":"#_1-使用这种方法-必须明确添加-null-字符-0-。","children":[]},{"level":6,"title":"字符是用单引号 ' 括起来的。","slug":"字符是用单引号-括起来的。","link":"#字符是用单引号-括起来的。","children":[]},{"level":6,"title":"字符串是用双引号 \\" 括起来的文本。","slug":"字符串是用双引号-括起来的文本。","link":"#字符串是用双引号-括起来的文本。","children":[]},{"level":6,"title":"char *str = \\"stuff\\"","slug":"char-str-stuff","link":"#char-str-stuff","children":[]}]},{"level":5,"title":"<string.h>","slug":"string-h","link":"#string-h","children":[{"level":6,"title":"strlen()-获取字符串的长度","slug":"strlen-获取字符串的长度","link":"#strlen-获取字符串的长度","children":[]},{"level":6,"title":"strcat()-连接两个字符串","slug":"strcat-连接两个字符串","link":"#strcat-连接两个字符串","children":[]},{"level":6,"title":"strcpy()-将一个字符串复制到另一个","slug":"strcpy-将一个字符串复制到另一个","link":"#strcpy-将一个字符串复制到另一个","children":[]},{"level":6,"title":"strlwr()-将字符串转化为小写字母","slug":"strlwr-将字符串转化为小写字母","link":"#strlwr-将字符串转化为小写字母","children":[]},{"level":6,"title":"strupr()-将字符串转化为大写字母","slug":"strupr-将字符串转化为大写字母","link":"#strupr-将字符串转化为大写字母","children":[]},{"level":6,"title":"strrev()-反转字符串","slug":"strrev-反转字符串","link":"#strrev-反转字符串","children":[]},{"level":6,"title":"strcmp()-比较两个字符串","slug":"strcmp-比较两个字符串","link":"#strcmp-比较两个字符串","children":[]}]}]}]},{"level":1,"title":"2. 字符串输入","slug":"_2-字符串输入","link":"#_2-字符串输入","children":[{"level":5,"title":"ⅰ. scanf()","slug":"i-scanf","link":"#i-scanf","children":[]},{"level":5,"title":"ⅱ.","slug":"ii","link":"#ii","children":[]},{"level":5,"title":"ⅲ. fgets()","slug":"iii-fgets","link":"#iii-fgets","children":[{"level":6,"title":"1. 替代 gets() 的一个更安全的方法是 fgets()，它最多读取指定数量的字符。","slug":"_1-替代-gets-的一个更安全的方法是-fgets-它最多读取指定数量的字符。","link":"#_1-替代-gets-的一个更安全的方法是-fgets-它最多读取指定数量的字符。","children":[]},{"level":6,"title":"2. gets 和 fgets 之间的另一个区别是，换行符\\\\n fgets() 会存储。","slug":"_2-gets-和-fgets-之间的另一个区别是-换行符-n-fgets-会存储。","link":"#_2-gets-和-fgets-之间的另一个区别是-换行符-n-fgets-会存储。","children":[]},{"level":6,"title":"3.","slug":"_3","link":"#_3","children":[]}]}]},{"level":1,"title":"3. 字符串输出","slug":"_3-字符串输出","link":"#_3-字符串输出","children":[{"level":6,"title":"1. 字符串输出由 fputs()、puts() 和 printf() 函数处理。","slug":"_1-字符串输出由-fputs-、puts-和-printf-函数处理。","link":"#_1-字符串输出由-fputs-、puts-和-printf-函数处理。","children":[]}]},{"level":1,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":1718465958000,"updatedTime":1718465958000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":4.69,"words":1407},"filePathRelative":"zh/Lilya/program/C/C-03-Code-block/note5.md","localizedDate":"2024年6月15日","excerpt":"\\n<h2>a. 定义</h2>\\n<h5>C 中的字符串是一个以<strong>NULL</strong>字符<code>\\\\0</code>结尾的字符数组。</h5>\\n<p>字符串声明可以通过多种方式进行，每种方式都有各自考虑的因素。</p>\\n<p>例如：</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">char</span>  str_name<span class=\\"token punctuation\\">[</span>str_len<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"string\\"</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{g as comp,h as data};
