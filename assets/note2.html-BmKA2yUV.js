import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-COkR78aT.js";const i="/assets/af0bfe2293a5decf19f76d0431fe98cb-B1vfeVcq-B1vfeVcq.jpg",u="/assets/image-20240430175723676-DcPOjOQO.png",r="/assets/image-20240430180535356-8gDnN25q.png",d={},k={href:"https://bornforthis.cn/column/Rust/01.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://course.rs/basic/compound-type/string-slice.html",target:"_blank",rel:"noopener noreferrer"},v=e(`<h2 id="_0-hello-world" tabindex="-1"><a class="header-anchor" href="#_0-hello-world"><span>0. Hello, World</span></a></h2><p>创建项目后，编写代码打印出“Hello, World!”字样</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算机传统⬆️</p><p>使用 <code>cargo build</code> 来编译。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> build
   Compiling helloworld v0.1.0 <span class="token punctuation">(</span>/home/mike/works/classes/helloworld<span class="token punctuation">)</span>
    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">1</span>.57s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cargo run</code> 命令可以直接运行程序。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> run
    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.01s
     Running <span class="token variable"><span class="token variable">\`</span>target/debug/helloworld<span class="token variable">\`</span></span>
Hello, world<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以看到，最后终端打印出了 Hello, world。我们成功地执行了第一个 Rust 程序。</p></blockquote><h2 id="命名" tabindex="-1"><a class="header-anchor" href="#命名"><span>命名</span></a></h2><p>Rust中合法的标识符命名（包括变量名、函数名、triat名等）必须由数字、字母、下划线组成，而且不能以数字开头。这个和很多语言都是一样的。</p><p>Rust将来也会允许**<u>其他Unicode</u>**字符作为标识符</p><h2 id="_1-数据类型" tabindex="-1"><a class="header-anchor" href="#_1-数据类型"><span>1.数据类型</span></a></h2><p>在声明一个单一类型变量（标量、字符串、数组）的时候，不用声明它的类型，rust的会根据输入的内容自动分配一个类型，如果不想要他分配的默认类型，可以在生变量后使用冒号加数据类型的形式标明该数据的类型。</p><p>Rust 的数据类型主要分为两大类：标量（Scalar）类型和复合（Compound）类型。以下是一个概览表格：</p><details class="hint-container details"><summary>点击展开详情</summary><table><thead><tr><th>类别</th><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>标量</td><td><a href="#_1-%E6%95%B4%E6%95%B0">整型</a></td><td>包括 <code>i8</code>、<code>i16</code>、<code>i32</code>、<code>i64</code>、<code>i128</code>、<code>isize</code>（有符号整型）和 <code>u8</code>、<code>u16</code>、<code>u32</code>、<code>u64</code>、<code>u128</code>、<code>usize</code>（无符号整型）</td></tr><tr><td>标量</td><td><a href="#__2-%E6%B5%AE%E7%82%B9%E6%95%B0">浮点型</a></td><td>包括 <code>f32</code> 和 <code>f64</code></td></tr><tr><td>标量</td><td><a href="#__3-%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B">布尔型</a></td><td><code>bool</code> 类型，它的值可以是 <code>true</code> 或 <code>false</code></td></tr><tr><td>标量</td><td><a href="#_4-%E5%AD%97%E7%AC%A6">字符型</a></td><td><code>char</code> 类型，表示单个 Unicode 字符；</td></tr><tr><td>特殊</td><td><a href="#_5-%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串类型</a></td><td>如 <code>str</code>，它是一个**<u>动态大小</u>**的字符串类型</td></tr><tr><td>复合</td><td><a href="#third-6-%E6%95%B0%E7%BB%84">数组</a></td><td>数组（Array）类型，所有元素都必须是相同类型</td></tr><tr><td>特殊</td><td>向量(**<u>动态</u>**数组)</td><td>向量（Vector）类型，所有元素都必须是相同类型，非固定值</td></tr><tr><td></td><td><a href="#_8-%E5%93%88%E5%B8%8C%E8%A1%A8">哈希表</a></td><td></td></tr><tr><td>复合</td><td><a href="#_9-%E5%85%83%E7%BB%84">元组</a></td><td>元组（Tuple）类型，可以包含多种类型的几个值，固定值</td></tr><tr><td>复合</td><td><a href="#_11-%E7%BB%93%E6%9E%84%E4%BD%93">结构体</a></td><td>自定义数据类型，允许命名和包装多个相关值</td></tr><tr><td>复合</td><td><a href="#_12-%E6%9E%9A%E4%B8%BE_">枚举</a></td><td>枚举（Enum）类型，用于定义通过多个具体变量来表示的类型</td></tr><tr><td>复合</td><td>切片</td><td>切片（Slice）类型，引用集合的一部分数据</td></tr><tr><td>复合</td><td>引用</td><td>引用（Reference）类型，允许以不拥有数据的方式借用值</td></tr><tr><td>特殊</td><td>指针</td><td>包括裸指针 <code>*const T</code> 和 <code>*mut T</code>，不建议直接使用</td></tr><tr><td>特殊</td><td>函数</td><td>函数也是一种类型，可以通过函数签名来指定</td></tr><tr><td>特殊</td><td>**<u>动态</u>**大小类型</td><td>如 <code>str</code>，它是一个动态大小的字符串类型；或</td></tr><tr><td>特殊</td><td><a href="#_#x-unit%E7%B1%BB%E5%9E%8B">单元类型</a></td><td><code>()</code>，它是一个空元组，也称为单元类型</td></tr></tbody></table></details><ul><li><strong>枚举（Enum）</strong>：允许你定义一个类型，该类型可以是几个定义好的变体中的任何一个。枚举非常适合用于那些可以有固定数目变体的值的情况。</li><li><strong>切片（Slice）</strong>：引用一个数组的部分数据。与数组不同，切片的长度不需要在编译时确定，提供了一种灵活处理数组的方法。</li><li><strong>引用（Reference）</strong>：引用允许你以不拥有数据的方式借用值，它们本身并不拥有它们所指向的值。在 Rust 中，引用的使用遵循严格的借用规则，以确保内存安全。</li></ul><h3 id="first-标量" tabindex="-1"><a class="header-anchor" href="#first-标量"><span>First. 标量</span></a></h3><h4 id="_1-整数" tabindex="-1"><a class="header-anchor" href="#_1-整数"><span>1. 整数</span></a></h4><p>与一些动态语言不同，Rust 中的数字类型是区分位数的。</p><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>举例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>类型写在变量名的后面</p></div><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>    <span class="token comment">// let a;</span>
    <span class="token comment">// |     let a: /* Type */;</span>
    <span class="token comment">// |          ++++++++++++</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> c<span class="token punctuation">:</span> <span class="token keyword">i8</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">;</span>
    <span class="token comment">// let b: u8 =-15;</span>
    <span class="token comment">// |</span>
    <span class="token comment">// |     let b: u32 =-15;</span>
    <span class="token comment">// |                 ^^^ cannot apply unary operator \`-\`</span>
    <span class="token comment">// |</span>
    <span class="token comment">// = note: unsigned values cannot be negated</span>
    <span class="token keyword">let</span> d<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} {} {} {}&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Die Def-bereich des i8 ist von {} bis {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">i8</span><span class="token punctuation">::</span><span class="token function">min_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">i8</span><span class="token punctuation">::</span><span class="token function">max_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
    <span class="token comment">// println!(&quot;x has the Value {}&quot;, x);      !\`x\` isn&#39;t initialized </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:: 想要查看某数据类型（子分类）的值的范围，可以使用该（子）分类名称如<code>i8</code>+<code>::</code>+<code>min_value()</code>以及<code>max_value()</code></p><h4 id="_2-浮点数" tabindex="-1"><a class="header-anchor" href="#_2-浮点数"><span>2. 浮点数</span></a></h4><p>浮点数有两种类型：f32 和 f64，分别代表 32 位浮点数类型和 64 位浮点数类型。<strong><u>它们也可以跟在字面量的后面</u></strong>，用来指定浮点数值的类型，比如</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">f32</span> <span class="token operator">=</span> <span class="token number">10.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10.0f32</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该语句定义了一个变量 a，初始化成 32 位浮点数类型，值为 10.0。</p><blockquote><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不定义则默认f64类型</p></blockquote><h4 id="_3-布尔类型" tabindex="-1"><a class="header-anchor" href="#_3-布尔类型"><span>3. 布尔类型</span></a></h4><p>Rust 中的布尔类型为<code>bool</code>，它只有两个值，<code>true</code>和 <code>false</code>。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token keyword">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-字符" tabindex="-1"><a class="header-anchor" href="#_4-字符"><span>4. 字符</span></a></h4><p>Rust 中的字符类型是 char，值用单引号括起来。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> z<span class="token punctuation">:</span> <span class="token keyword">char</span> <span class="token operator">=</span> <span class="token char">&#39;ℤ&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> kristalball  <span class="token operator">=</span> &#39;🔮&#39;<span class="token punctuation">;</span>
    <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token char">&#39;中&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),b={href:"https://unicode.org/glossary/#unicode_scalar_value",target:"_blank",rel:"noopener noreferrer"},g=e('<figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，<code>char</code>在rust中只看字符占位，不看字节多少。char的内存占用甚至超过了的内存占用</p><h3 id="second-utf8编码的字符串" tabindex="-1"><a class="header-anchor" href="#second-utf8编码的字符串"><span>Second. UTF8编码的字符串</span></a></h3><h4 id="_5-字符串" tabindex="-1"><a class="header-anchor" href="#_5-字符串"><span>5. 字符串</span></a></h4><p>Rust 中的字符串类型是 String。虽然中文表述上，字符串只比前面的字符类型多了一个串字，但它们内部存储结构完全不同。String 内部存储的是 Unicode 字符串的 UTF8 编码，而 char 直接存的是 <code>Unicode Scalar Value</code>。也就是说 <strong>String 不是 char 的数组</strong>，这点与 C 语言也有很大区别。</p><p>通过下面示例我们可以看到，Rust 字符串对 Unicode 字符集<strong>有着良好的支持</strong>。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;السلام عليكم&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Dobrý den&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;שָׁלוֹם&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;नमस्ते&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;こんにちは&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;안녕하세요&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Olá&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Здравствуйте&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hola&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意，Rust 中的<code>String</code>不能通过下标(索引)去访问。</p></div><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// let a = hello[0];  // 你可能想把“你”字取出来，但实际上这样是错误的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该代码会产生如下错误：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>3 |     let h = hello[0];
  |             ^^^^^^^^ \`String\` cannot be indexed by \`{integer}\`
  |
  = help: the trait \`Index&lt;{integer}&gt;\` is not implemented for \`String\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么呢？你可以想一想。因为 String 存储的 Unicode 序列的 UTF8 编码，而 UTF8 编码是<strong>变长编码</strong>。</p><hr>`,13),h={id:"字符串的不同表现形式",tabindex:"-1"},f={class:"header-anchor",href:"#字符串的不同表现形式"},y={href:"https://course.rs/basic/compound-type/string-slice.html",target:"_blank",rel:"noopener noreferrer"},q=e(`<ul><li><p>对于 <code>let hello = String::from(&quot;Hola&quot;);</code> 这行代码来说，<code>Hola</code> 的长度是 <code>4</code> 个字节，因为 <code>&quot;Hola&quot;</code> 中的每个字母在 UTF-8 编码中仅占用 1 个字节，但是对于下面的代码呢？</p></li><li><p>中文</p></li></ul><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;中国人&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该字符串是 <code>9</code> 个字节的长度，因为大部分常用汉字在 UTF-8 中的长度是 <code>3</code> 个字节。</p><ul><li>再来看一下用梵文写的字符串 <code>नमस्ते</code>, 它底层的字节数组如下形式：</li></ul><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">164</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">164</span><span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">164</span><span class="token punctuation">,</span> <span class="token number">184</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">164</span><span class="token punctuation">,</span> <span class="token number">164</span><span class="token punctuation">,</span>
<span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">135</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>长度是 18 个字节，这也是计算机最终存储该字符串的形式。如果从字符的形式去看，则是：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token char">&#39;न&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;म&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;स&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;्&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;त&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;े&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是书写过程中，第四和六两个字母根本就不存在，在这种语言中只是两个辅助值并不占位。接着再从字母串的形式去看：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token punctuation">[</span><span class="token string">&quot;न&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;म&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;स्&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ते&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以，可以看出来 Rust 提供了不同的字符串展现方式，这样程序可以挑选自己想要的方式去使用，而无需去管字符串从人类语言角度看长什么样。</p><p>还有一个原因导致了 Rust 不允许去索引字符串：因为索引操作，我们总是期望它的性能表现是 O(1)，然而对于 <code>String</code> 类型来说，无法保证这一点，因为 Rust 可能需要从 0 开始去遍历字符串来定位合法的字符。</p><h5 id="强行采用-s-取值" tabindex="-1"><a class="header-anchor" href="#强行采用-s-取值"><span>强行采用<code>&amp;s[]</code>取值</span></a></h5><p>::: dinger</p><p>如果你想从索引 0 开始，可以使用如下的方式，这两个是等效的：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;中国人&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>错误示例：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;中国人&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// let a = &amp;s[0..1];</span>
<span class="token comment">// println!(&quot;{}&quot;,a);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种情况下对 <code>s</code> 进行索引，访问 <code>&amp;s[0..1]</code> 没有任何意义，因为我们只取 <code>s</code> 字符串的前两个字节，但是本例中每个汉字占用3个字节，因此没有落在边界处，也就是连 <code>中</code> 字都取不完整，这是一个非常奇怪而且难以理解的返回值。此时程序会直接崩溃退出。</p><p>如果改成 <code>&amp;s[0..2]</code>，则可以正常通过编译。 因此，当你需要对字符串做切片索引操作时，需要格外小心这一点。</p><hr><h5 id="字符串的转义" tabindex="-1"><a class="header-anchor" href="#字符串的转义"><span>字符串的转义</span></a></h5><p>与 C 语言一样，Rust 中转义符号也是反斜杠 <code>\\</code> ，可用来转义各种字符。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将&quot;&quot;号进行转义</span>
    <span class="token keyword">let</span> byte_escape <span class="token operator">=</span> <span class="token string">&quot;I&#39;m saying \\&quot;Hello\\&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> byte_escape<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 分两行打印</span>
    <span class="token keyword">let</span> byte_escape <span class="token operator">=</span> <span class="token string">&quot;I&#39;m saying \\n 你好&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> byte_escape<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Windows下的换行符</span>
    <span class="token keyword">let</span> byte_escape <span class="token operator">=</span> <span class="token string">&quot;I&#39;m saying \\r\\n 你好&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> byte_escape<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 打印出 \\ 本身</span>
    <span class="token keyword">let</span> byte_escape <span class="token operator">=</span> <span class="token string">&quot;I&#39;m saying \\\\ Ok&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> byte_escape<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 强行在字符串后面加个0，与C语言的字符串一致。</span>
    <span class="token keyword">let</span> byte_escape <span class="token operator">=</span> <span class="token string">&quot;I&#39;m saying hello.\\0&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> byte_escape<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，Rust 还支持通过 <code>\\x</code> 输入等值的 <code>ASCII </code>字符，以及通过 <code>\\u{}</code> 输入等值的 Unicode 字符。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用 \\x 输入等值的ASCII字符（最高7位）</span>
    <span class="token keyword">let</span> byte_escape <span class="token operator">=</span> <span class="token string">&quot;I&#39;m saying hello \\x7f&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> byte_escape<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 使用 \\u{} 输入等值的Unicode字符（最高24位）</span>
    <span class="token keyword">let</span> byte_escape <span class="token operator">=</span> <span class="token string">&quot;I&#39;m saying hello \\u{0065}&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> byte_escape<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),w={href:"https://doc.rust-lang.org/reference/tokens.html#character-escapes",target:"_blank",rel:"noopener noreferrer"},_=e(`<h5 id="不转义字符串" tabindex="-1"><a class="header-anchor" href="#不转义字符串"><span>不转义字符串</span></a></h5><p>有时候，我们不希望字符串被转义，也就是想输出原始字面量。这个在 Rust 中也有办法，使用 <code>r&quot;&quot;</code> 或 <code>r#&quot;&quot;#</code> 把字符串字面量套起来就行了。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 字符串字面量前面加r，表示不转义</span>
    <span class="token keyword">let</span> raw_str <span class="token operator">=</span> <span class="token string">r&quot;Escapes don&#39;t work here: \\x3F \\u{211D}&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> raw_str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 这个字面量必须使用r##这种形式，因为我们希望在字符串字面量里面保留&quot;&quot;</span>
    <span class="token keyword">let</span> quotes <span class="token operator">=</span> <span class="token string">r#&quot;And then I said: &quot;There is no escape!&quot;&quot;#</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> quotes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 如果遇到字面量里面有#号的情况，可以在r后面，加任意多的前后配对的#号，</span>
    <span class="token comment">// 只要能帮助Rust编译器识别就行</span>
    <span class="token keyword">let</span> longer_delimiter <span class="token operator">=</span> <span class="token string">r###&quot;A string with &quot;# in it. And even &quot;##!&quot;###</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> longer_delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一点小提示，Rust 中的字符串字面量都支持换行写，默认把换行符包含进去。</p><h3 id="third-6-数组" tabindex="-1"><a class="header-anchor" href="#third-6-数组"><span>Third. (6.)数组</span></a></h3><h5 id="i-字节串" tabindex="-1"><a class="header-anchor" href="#i-字节串"><span>i.字节串</span></a></h5><p>很多时候，我们的字符串字面量中用不到 Unicode 字符，只需要 ASCII 字符集。对于这种情况，Rust 还有一种更紧凑的表示法：<strong>字节串</strong>。用 b 开头，双引号括起来，比如 <code>b&quot;this is a byte string&quot;</code>。这时候字符串的类型已不是字符串，而是<strong>字节的数组</strong> <code>[u8; N]</code>，<code>N</code> 为字节数。</p><p>你可以在 Playground 里面运行一下代码，看看输出什么。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 该类型是字节的数组，而不是字符串 “21“表示声明长度，数组类型必须固定长度</span>
    <span class="token keyword">let</span> bytestring<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">b&quot;this is a byte string&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;A byte string: {:?}&quot;</span><span class="token punctuation">,</span> bytestring<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 可以看看下面这串打印出什么</span>
    <span class="token keyword">let</span> escaped <span class="token operator">=</span> <span class="token string">b&quot;\\x52\\x75\\x73\\x74 as bytes&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Some escaped bytes: {:?}&quot;</span><span class="token punctuation">,</span> escaped<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 字节串与原始字面量结合使用</span>
    <span class="token keyword">let</span> raw_bytestring <span class="token operator">=</span> <span class="token string">br&quot;\\u{211D} is not escaped here&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> raw_bytestring<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字节串很有用，特别是在做系统级编程或网络协议开发的时候，经常会用到。</p><h5 id="ii-一般数组" tabindex="-1"><a class="header-anchor" href="#ii-一般数组"><span>ii. 一般数组</span></a></h5><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rust 中的数组是固定长度的，也就是说在编译阶段就能知道它占用的字节数，并且在运行阶段，不能改变它的长度（尺寸）。</p><p><strong>是否能在编译期计算出某个数据类型在运行过程中占用内存空间的大小</strong>，这个指标很重要，<strong>Rust 的类型系统就是按这个对类型进行分类的</strong>。后面的课程中我们会经常用到这个指标。</p><p>数组常用于开辟一个固定大小的 Buffer（缓冲区），用来接收 IO 输入输出等。也常用已知元素个数的字面量集合来初始化，比如表达一年有 12 个月。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> months <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;January&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;February&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;March&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;April&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;May&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;June&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;July&quot;</span><span class="token punctuation">,</span>
              <span class="token string">&quot;August&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;September&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;October&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;November&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;December&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>数组的访问，可以用下标索引。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出 </span>
<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再来看看，如果下标索引越界了会发生什么。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>   <span class="token class-name">Compiling</span> playground v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token operator">/</span>playground<span class="token punctuation">)</span>
error<span class="token punctuation">:</span> this operation will panic at runtime
 <span class="token operator">-</span><span class="token punctuation">-&gt;</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">13</span>
  <span class="token operator">|</span>
<span class="token number">3</span> <span class="token operator">|</span>     <span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token operator">|</span>             <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> index out of bounds<span class="token punctuation">:</span> the length is <span class="token number">5</span> but the index is <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候你可能已经发现了，Rust 在编译的时候，就给我们指出了问题，说这个操作会在运行的时候崩溃。为什么 Rust 能指出来呢？就是因为<strong>数组的长度是确定的</strong>，Rust 在编译时就分析并提取了这个数组类型占用空间长度的信息，因此直接阻止了你的越界访问。</p><p>不得不说，Rust 太贴心了。</p><h3 id="_7-动态数组-vec" tabindex="-1"><a class="header-anchor" href="#_7-动态数组-vec"><span>7. 动态数组 Vec</span></a></h3><p>Rust 中的动态数组类型是 Vec（Vector），也就是向量，中文翻译成动态数组。它用来存储同一类型的多个值，容量可在程序运行的过程中动态地扩大或缩小，因此叫做动态数组。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> v<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态数组可以用下标进行索引访问。</p><p>比如：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;superman 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;superman 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;superman 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s4 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;superman 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">,</span> s4<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出 </span>
<span class="token string">&quot;superman 1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们下标越界了会发生什么？Rust 能继续帮我们提前找出问题来吗？试一试就知道了。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;superman 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;superman 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;superman 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s4 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;superman 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">,</span> s4<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里下标访问越界了</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后，出现了提示。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>   <span class="token class-name">Compiling</span> playground v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token operator">/</span>playground<span class="token punctuation">)</span>
    <span class="token class-name">Finished</span> dev <span class="token punctuation">[</span>unoptimized <span class="token operator">+</span> debuginfo<span class="token punctuation">]</span> <span class="token function">target</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>62s
     <span class="token class-name">Running</span> \`target<span class="token operator">/</span>debug<span class="token operator">/</span>playground\`
thread <span class="token lifetime-annotation symbol">&#39;main</span>&#39; panicked at <span class="token lifetime-annotation symbol">&#39;index</span> out of bounds<span class="token punctuation">:</span> the len is <span class="token number">4</span> but the index is <span class="token number">4</span>&#39;<span class="token punctuation">,</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">22</span>
note<span class="token punctuation">:</span> run with \`<span class="token constant">RUST_BACKTRACE</span><span class="token operator">=</span><span class="token number">1</span>\` environment variable to display a backtrace
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这段代码正确通过了编译，但在运行的时候出错了，并且导致了主线程的崩溃。</p><p>你可以将其与前面讲的数组 array 下标越界时的预警行为对比理解。为什么 array 的越界访问能在编译阶段检查出来，而 Vec 的越界访问不能在编译阶段检查出来呢？你可以好好想一想。</p><h3 id="_8-哈希表" tabindex="-1"><a class="header-anchor" href="#_8-哈希表"><span>8. 哈希表</span></a></h3><p>哈希表是一种常见的结构，用于存储 Key-Value 映射关系，基本在各种语言中都有内置提供。Rust 中的哈希表类型为 HashMap。对一个 HashMap 结构来说，Key 要求是同一种类型，比如是字符串就统一用字符串，是数字就统一用数字。Value 也是一样，要求是同一种类型。Key 和 Value 的类型不需要相同。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>
    
    <span class="token keyword">let</span> <span class="token keyword">mut</span> scores <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Yellow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为哈希表能从一个键索引到一个值，所以应用场景非常广泛，后面我们还会仔细分析它的用法。</p><p>复合类型可以包含多种基础类型，是一种将类型进行有效组织的方式，提供了一级一级搭建更高层类型的能力。Rust 中的复合类型包括元组、结构体、枚举等。</p><h3 id="_9-元组" tabindex="-1"><a class="header-anchor" href="#_9-元组"><span>9. 元组</span></a></h3><p>元组是一个固定（元素）长度的列表，每个元素类型可以不一样。用小括号括起来，元素之间用逗号隔开。例如：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> tup<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>元组元素的访问：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 元组使用.运算符访问其元素，下标从0开始，注意语法</span>
    <span class="token keyword">let</span> five_hundred <span class="token operator">=</span> x<span class="token number">.0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> six_point_four <span class="token operator">=</span> x<span class="token number">.1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> one <span class="token operator">=</span> x<span class="token number">.2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组的相同点是，它们都是固定元素个数的，在运行时不可伸缩。与数组的不同点是，元组的每个元素的类型可以不一样。元组在 Rust 中很有用，因为它可以用于<strong>函数的返回值</strong>，相当于把多个想返回的值捆绑在一起，一次性返回。</p><p>当没有任何元素的时候，元组退化成 <code>()</code>，就叫做 unit 类型，</p><h4 id="x-unit类型" tabindex="-1"><a class="header-anchor" href="#x-unit类型"><span>x. <code>unit</code>类型</span></a></h4><p><code>unit</code> 类型，是 Rust 中一个非常重要的基础类型和值，unit 类型唯一的值实例就是 <code>()</code>。比如一个函数没有返回值的时候，它实际默认返回的是这个 unit 值。</p><h3 id="_11-结构体" tabindex="-1"><a class="header-anchor" href="#_11-结构体"><span>11. 结构体</span></a></h3><p>结构体也是一种复合类型，它由若干字段组成，每个字段的类型可以不一样。Rust 中使用 <strong>struct</strong> 关键字来定义结构体。比如下面的代码就定义了一个 User 类型。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span>
    active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这段代码演示了结构体类型的实例化。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
        active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;someusername123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;someone@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-枚举" tabindex="-1"><a class="header-anchor" href="#_12-枚举"><span>12. 枚举</span></a></h3><p>Rust 中使用 <strong>enum</strong> 关键字定义枚举类型。比如：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">IpAddrKind</span> <span class="token punctuation">{</span>
    <span class="token constant">V4</span><span class="token punctuation">,</span>
    <span class="token constant">V6</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>枚举类型里面的选项叫做此枚举的变体（variants）。变体是其所属枚举类型的一部分。</p><p>枚举使用变体进行枚举类型的实例化，比如：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> four <span class="token operator">=</span> <span class="token class-name">IpAddrKind</span><span class="token punctuation">::</span><span class="token constant">V4</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> six <span class="token operator">=</span> <span class="token class-name">IpAddrKind</span><span class="token punctuation">::</span><span class="token constant">V6</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，枚举类型也是一种复合类型。但是与结构体不同，结构体类型是里面的所有字段（所有类型）同时起作用，来产生一个具体的实例，而枚举类型是其中的一个变体起作用，来产生一个具体实例，这点区别可以细细品味。学术上，通常把枚举叫作<strong>和类型</strong>（sum type），把结构体叫作<strong>积类型</strong>（product type）。</p>`,62);function x(R,S){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("p",null,[s("本文部分内容摘编自： "),n("a",k,[s("快速入门：Rust中有哪些你不得不了解的基础语法？"),t(a)]),s("（著作权归AI悦创所有） "),n("a",m,[s("Rust语言圣经(Rust Course)-字符串与切片"),t(a)])]),v,n("p",null,[s("Rust 的 char 类型是 "),n("a",b,[s("Unicode 散列值"),t(a)]),s("。，在内存中总是占用 4 个字节大小。这一点与 C 语言或其他某些语言中的 char 有很大不同。 这意味着它可以表达各种符号，比如中文符号、emoji 符号等。")]),g,n("h5",h,[n("a",f,[n("span",null,[s("字符串的不同表现形式"),n("a",y,[s("_"),t(a)])])])]),q,n("p",null,[s("注：字符串转义的详细知识点，请参考 "),n("a",w,[s("Tokens - The Rust Reference (rust-lang.org)"),t(a)])]),_])}const A=p(d,[["render",x],["__file","note2.html.vue"]]),T=JSON.parse('{"path":"/zh/Lilya/program/Rust/note2.html","title":"02-基本语法1-数据类型及打印","lang":"zh-CN","frontmatter":{"title":"02-基本语法1-数据类型及打印","author":"黑静美","category":["编程"],"tag":["rust"],"icon":"/ico/Rust.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"本文部分内容摘编自： 快速入门：Rust中有哪些你不得不了解的基础语法？（著作权归AI悦创所有） Rust语言圣经(Rust Course)-字符串与切片 0. Hello, World 创建项目后，编写代码打印出“Hello, World!”字样 计算机传统⬆️ 使用 cargo build 来编译。 使用 cargo run 命令可以直接运行程序。...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/Rust/note2.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"02-基本语法1-数据类型及打印"}],["meta",{"property":"og:description","content":"本文部分内容摘编自： 快速入门：Rust中有哪些你不得不了解的基础语法？（著作权归AI悦创所有） Rust语言圣经(Rust Course)-字符串与切片 0. Hello, World 创建项目后，编写代码打印出“Hello, World!”字样 计算机传统⬆️ 使用 cargo build 来编译。 使用 cargo run 命令可以直接运行程序。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-26T16:09:29.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:modified_time","content":"2024-05-26T16:09:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02-基本语法1-数据类型及打印\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-26T16:09:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":2,"title":"0. Hello, World","slug":"_0-hello-world","link":"#_0-hello-world","children":[]},{"level":2,"title":"命名","slug":"命名","link":"#命名","children":[]},{"level":2,"title":"1.数据类型","slug":"_1-数据类型","link":"#_1-数据类型","children":[{"level":3,"title":"First. 标量","slug":"first-标量","link":"#first-标量","children":[{"level":4,"title":"1. 整数","slug":"_1-整数","link":"#_1-整数","children":[]},{"level":4,"title":"2. 浮点数","slug":"_2-浮点数","link":"#_2-浮点数","children":[]},{"level":4,"title":"3. 布尔类型","slug":"_3-布尔类型","link":"#_3-布尔类型","children":[]},{"level":4,"title":"4. 字符","slug":"_4-字符","link":"#_4-字符","children":[]}]},{"level":3,"title":"Second. UTF8编码的字符串","slug":"second-utf8编码的字符串","link":"#second-utf8编码的字符串","children":[{"level":4,"title":"5. 字符串","slug":"_5-字符串","link":"#_5-字符串","children":[{"level":5,"title":"字符串的不同表现形式_","slug":"字符串的不同表现形式","link":"#字符串的不同表现形式","children":[]},{"level":5,"title":"强行采用&s[]取值","slug":"强行采用-s-取值","link":"#强行采用-s-取值","children":[]},{"level":5,"title":"字符串的转义","slug":"字符串的转义","link":"#字符串的转义","children":[]},{"level":5,"title":"不转义字符串","slug":"不转义字符串","link":"#不转义字符串","children":[]}]}]},{"level":3,"title":"Third. (6.)数组","slug":"third-6-数组","link":"#third-6-数组","children":[{"level":5,"title":"i.字节串","slug":"i-字节串","link":"#i-字节串","children":[]},{"level":5,"title":"ii. 一般数组","slug":"ii-一般数组","link":"#ii-一般数组","children":[]}]},{"level":3,"title":"7. 动态数组 Vec","slug":"_7-动态数组-vec","link":"#_7-动态数组-vec","children":[]},{"level":3,"title":"8. 哈希表","slug":"_8-哈希表","link":"#_8-哈希表","children":[]},{"level":3,"title":"9. 元组","slug":"_9-元组","link":"#_9-元组","children":[{"level":4,"title":"x. unit类型","slug":"x-unit类型","link":"#x-unit类型","children":[]}]},{"level":3,"title":"11. 结构体","slug":"_11-结构体","link":"#_11-结构体","children":[]},{"level":3,"title":"12. 枚举","slug":"_12-枚举","link":"#_12-枚举","children":[]}]}],"git":{"createdTime":1716739769000,"updatedTime":1716739769000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":15.79,"words":4736},"filePathRelative":"zh/Lilya/program/Rust/note2.md","localizedDate":"2024年5月26日","excerpt":"<p>本文部分内容摘编自： <a href=\\"https://bornforthis.cn/column/Rust/01.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">快速入门：Rust中有哪些你不得不了解的基础语法？</a>（著作权归AI悦创所有）\\n<a href=\\"https://course.rs/basic/compound-type/string-slice.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Rust语言圣经(Rust Course)-字符串与切片</a></p>\\n<h2>0. Hello, World</h2>","autoDesc":true}');export{A as comp,T as data};
