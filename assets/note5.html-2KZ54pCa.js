import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,a as s,b as n,d as c,e as l}from"./app-bEH1wMQD.js";const i={},u=s("hr",null,null,-1),r={href:"https://bornforthis.cn/column/Rust/01.html",target:"_blank",rel:"noopener noreferrer"},d=l(`<h2 id="rust-中的函数和模块-各种代码块" tabindex="-1"><a class="header-anchor" href="#rust-中的函数和模块-各种代码块"><span>Rust 中的函数和模块 （各种代码块）</span></a></h2><p>最后我们来看 Rust 的函数、闭包和模块，它们用于封装和复用代码。</p><h3 id="a-函数" tabindex="-1"><a class="header-anchor" href="#a-函数"><span>a. 函数</span></a></h3><p>函数基本上是所有编程语言的标配，在 Rust 中也不例外，它是一种基本的代码复用方法。在 Rust 中使用 <strong>fn 关键字</strong>来定义一个函数。比如：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">print_a_b</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of a b is: {a}{b}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print_a_b</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">&#39;h&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数定义时的参数叫作<strong>形式参数</strong>（形参），函数调用时传入的参数值叫做<strong>实际参数</strong>（实参）。函数的调用要与函数的签名（函数名、参数个数、参数类型、参数顺序、返回类型）一致，也就是实参和形参要匹配。</p><p>函数对于几乎所有语言都非常重要，实际上各种编程语言在实现时，都是以函数作为基本单元来组织栈上的内存分配和回收的，这个基本的内存单元就是所谓的<strong>栈帧（frame）</strong>，我们在下节课会讲到。</p><h3 id="b-闭包-closure" tabindex="-1"><a class="header-anchor" href="#b-闭包-closure"><span>b. 闭包（Closure）</span></a></h3><p>闭包是另一种风格的函数。它使用两个竖线符号 <code>||</code> 定义，而不是用 <code>fn()</code> 来定义。</p><p>Code1</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token comment">// 标准的函数定义</span>
<span class="token keyword">fn</span>  <span class="token function-definition function">add_one_v1</span>   <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token comment">// 闭包的定义，请注意形式对比</span>
<span class="token keyword">let</span> add_one_v2 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 闭包的定义2，省略了类型标注</span>
<span class="token keyword">let</span> add_one_v3 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span>             <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 闭包的定义3，花括号也省略了</span>
<span class="token keyword">let</span> add_one_v4 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span>               x <span class="token operator">+</span> <span class="token number">1</span>  <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Code2</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// // 标准的函数定义</span>
    <span class="token comment">// fn  add_one_v1   (x: u32) -&gt; u32 { x + 1 }</span>

    <span class="token comment">// // 闭包的定义，请注意形式对比</span>
    <span class="token comment">// let add_one_v2 = |x: u32| -&gt; u32 { x + 1 };</span>

    <span class="token comment">// // 闭包的定义2，省略了类型标注</span>
    <span class="token comment">// let add_one_v3 = |x|             { x + 1 };</span>

    <span class="token comment">// // 闭包的定义3，花括号也省略了</span>
    <span class="token comment">// let add_one_v4 = |x|              x + 1  ;</span>
    
    <span class="token keyword">let</span> add_one <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token keyword">let</span> a_vec<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> vec2<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;</span> <span class="token operator">=</span> a_vec<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>add_one<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭包与函数的一个显著不同就是，闭包可以捕获函数中的局部变量，而函数不行。比如，下面示例中的闭包 <code>add_v2</code> 捕获了 main 函数中的局部变量 a 来使用，但是函数 <code>add_v1</code> 就没有这个能力。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10u32</span><span class="token punctuation">;</span>             <span class="token comment">// 局部变量</span>
    
    <span class="token keyword">fn</span>  <span class="token function-definition function">add_v1</span>   <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> a <span class="token punctuation">}</span>    <span class="token comment">// 定义一个内部函数</span>
    <span class="token keyword">let</span> add_v2 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> a <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// 定义一个闭包</span>
    
    <span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">add_v1</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用函数</span>
    <span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">add_v2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用闭包</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样会编译出错，并提示错误。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>error<span class="token punctuation">[</span><span class="token constant">E0434</span><span class="token punctuation">]</span><span class="token punctuation">:</span> can<span class="token lifetime-annotation symbol">&#39;t</span> capture dynamic environment <span class="token keyword">in</span> a <span class="token keyword">fn</span> <span class="token function-definition function">item</span>
 <span class="token operator">-</span><span class="token punctuation">-&gt;</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">40</span>
  <span class="token operator">|</span>
<span class="token number">4</span> <span class="token operator">|</span>     <span class="token keyword">fn</span>  <span class="token function-definition function">add_v1</span>   <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> a <span class="token punctuation">}</span>    <span class="token comment">// 定义一个内部函数</span>
  <span class="token operator">|</span>                                        <span class="token operator">^</span>
  <span class="token operator">|</span>
  <span class="token operator">=</span> help<span class="token punctuation">:</span> <span class="token keyword">use</span> the \`<span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>\` closure form instead
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭包之所以能够省略类型参数等信息，主要是其定义在某个函数体内部，从闭包的内容和上下文环境中能够分析出来那些类型信息。</p><h3 id="c-模块" tabindex="-1"><a class="header-anchor" href="#c-模块"><span>c. 模块</span></a></h3><p>我们不可能把所有代码都写在一个文件里面。代码量多了后，分成不同的文件模块书写是非常自然的事情。这个需求需要从编程语言层级去做一定的支持才行，Rust 也提供了相应的方案。</p><p>分文件和目录组织代码理解起来其实很简单，主要的知识点在于目录的组织结构上。比如下面示例：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>backyard
├── <span class="token class-name">Cargo</span><span class="token punctuation">.</span>lock
├── <span class="token class-name">Cargo</span><span class="token punctuation">.</span>toml
└── src
    ├── garden              <span class="token comment">// 子目录</span>
    │   └── vegetables<span class="token punctuation">.</span>rs
    ├── garden<span class="token punctuation">.</span>rs           <span class="token comment">// 与子目录同名的.rs文件，表示这个模块的入口</span>
    └── main<span class="token punctuation">.</span>rs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第五行代码到第七行代码组成 garden 模块，在 <code>garden.rs</code> 中，使用 <code>mod vegetables;</code> 导入 vegetables 子模块。</p><p>在 <code>main.rs</code> 中，用同样的方式导入 garden 模块。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">garden</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>整个代码结构就这样一层一层地组织起来了。</p><p>另一种文件的组织形式来自 2015 版，也很常见，有很多人喜欢用。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>backyard
├── <span class="token class-name">Cargo</span><span class="token punctuation">.</span>lock
├── <span class="token class-name">Cargo</span><span class="token punctuation">.</span>toml
└── src
    ├── garden          <span class="token comment">// 子目录</span>
    │   └── <span class="token keyword">mod</span><span class="token punctuation">.</span>rs      <span class="token comment">// 子目录中有一个固定文件名 mod.rs，表示这个模块的入口</span>
    │   └── vegetables<span class="token punctuation">.</span>rs
    └── main<span class="token punctuation">.</span>rs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同上，由第五行到第七行代码组成 garden 模块，在 <code>main.rs</code> 中导入它使用。</p><p>你可以在本地创建文件，来体会两种不同目录组织形式的区别。</p><hr>`,31);function k(m,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("分割线构成的框中内容摘编自："),s("a",r,[n("快速入门：Rust中有哪些你不得不了解的基础语法？"),c(a)]),n("（著作权归AI悦创所有）")]),d])}const h=t(i,[["render",k],["__file","note5.html.vue"]]),f=JSON.parse('{"path":"/zh/Lilya/program/Rust/note5.html","title":"05-函数式编程","lang":"zh-CN","frontmatter":{"title":"05-函数式编程","author":"黑静美","category":["编程"],"tag":["rust"],"icon":"/ico/Rust.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"分割线构成的框中内容摘编自：快速入门：Rust中有哪些你不得不了解的基础语法？（著作权归AI悦创所有） Rust 中的函数和模块 （各种代码块） 最后我们来看 Rust 的函数、闭包和模块，它们用于封装和复用代码。 a. 函数 函数基本上是所有编程语言的标配，在 Rust 中也不例外，它是一种基本的代码复用方法。在 Rust 中使用 fn 关键字来定义...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/Rust/note5.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"05-函数式编程"}],["meta",{"property":"og:description","content":"分割线构成的框中内容摘编自：快速入门：Rust中有哪些你不得不了解的基础语法？（著作权归AI悦创所有） Rust 中的函数和模块 （各种代码块） 最后我们来看 Rust 的函数、闭包和模块，它们用于封装和复用代码。 a. 函数 函数基本上是所有编程语言的标配，在 Rust 中也不例外，它是一种基本的代码复用方法。在 Rust 中使用 fn 关键字来定义..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T21:30:12.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:modified_time","content":"2024-06-18T21:30:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"05-函数式编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-18T21:30:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":2,"title":"Rust 中的函数和模块 （各种代码块）","slug":"rust-中的函数和模块-各种代码块","link":"#rust-中的函数和模块-各种代码块","children":[{"level":3,"title":"a. 函数","slug":"a-函数","link":"#a-函数","children":[]},{"level":3,"title":"b. 闭包（Closure）","slug":"b-闭包-closure","link":"#b-闭包-closure","children":[]},{"level":3,"title":"c. 模块","slug":"c-模块","link":"#c-模块","children":[]}]}],"git":{"createdTime":1718746212000,"updatedTime":1718746212000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":3.82,"words":1146},"filePathRelative":"zh/Lilya/program/Rust/note5.md","localizedDate":"2024年6月18日","excerpt":"<hr>\\n<p>分割线构成的框中内容摘编自：<a href=\\"https://bornforthis.cn/column/Rust/01.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">快速入门：Rust中有哪些你不得不了解的基础语法？</a>（著作权归AI悦创所有）</p>\\n<h2>Rust 中的函数和模块 （各种代码块）</h2>\\n<p>最后我们来看 Rust 的函数、闭包和模块，它们用于封装和复用代码。</p>\\n<h3>a. 函数</h3>\\n<p>函数基本上是所有编程语言的标配，在 Rust 中也不例外，它是一种基本的代码复用方法。在 Rust 中使用 <strong>fn 关键字</strong>来定义一个函数。比如：</p>","autoDesc":true}');export{h as comp,f as data};
