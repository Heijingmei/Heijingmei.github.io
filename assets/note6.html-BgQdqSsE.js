import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DmCgshGM.js";const e="/assets/1704532788566-aa3af337-bec0-49eb-be7e-d03a8a7a08ae-CAeY6_Uu.png",p="/assets/1704534588938-4673e84d-0f59-4d91-969c-dd755f92a29b-BFXdTlzM.png",o={},c=t(`<h2 id="使用内存" tabindex="-1"><a class="header-anchor" href="#使用内存"><span>使用内存</span></a></h2><p>C 被设计为一种<strong>低级语言</strong>，可以轻松访问内存位置并执行与内存相关的操作。 例如，<code>scanf()</code>函数通过使用<code>&amp;</code>符号将用户输入的值 举例：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter a number:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&amp;num</code>是变量<code>num</code>的地址。</p><p>内存地址是以<strong>十六进制数</strong>的形式给出的。十六进制，是一个基数为 16 的数字系统，用数字 0 到 9 和字母 A 到 F（16 个字符）来表示一组四位二进制数，其值可以从 0 到 15。 读取 32 位内存的 8 位十六进制数字要比尝试破译 32 位的二进制代码容易得多。 下面的程序打印变量** i **和 **k **的内存地址:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The address of i is %x \\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The address of i(in k) is %x \\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 printf 语句中，<code>%x</code>是十六进制格式指定符。 程序输出因运行而异，但看起来类似： <img src="`+e+`" alt="image.png" loading="lazy"> 变量的地址从声明时起就保持不变，直到它的作用域结束。</p><p>填空，打印变量 var 的 16 进制内存地址：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> var <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%___&quot;</span><span class="token punctuation">,</span> ___ var<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>x &amp;</p></blockquote><h2 id="什么是指针" tabindex="-1"><a class="header-anchor" href="#什么是指针"><span>什么是指针</span></a></h2><p>指针在 C 语言编程中非常重要，因为它们可以让你轻松地处理内存位置。 指针是数组，字符串以及其他数据结构和算法的基础。 一个<strong>指针</strong>是一个变量，它包含了另一变量的<strong>地址</strong>。换句话说，它“指向”分配给另一个变量的内存位置，并可以间接第访问该变量。 指针使用号用<code>*</code> 声明，其形式为</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>pointer_type <span class="token operator">*</span>identifier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>pointer_type</code>: 指针将指向数据类型。实际的指针的数据类型是一个16进制的数字。但是声明一个指针活动时，你必须指出它将指出什么类型的数据。 星号<code>*</code>声明为一个指针，应该出现在用于指针变量的<strong>标识符</strong>旁边。</p><p>下面的程序演示了变量、指针和地址：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">63</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token operator">&amp;</span>j<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The address of j is %x\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p contains address %x\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//p在前面被赋予了指针的特性，所以这里是p指向的地址（即觉得地址）而不是改地址内的值</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The value of j is %d\\n&quot;</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p is pointing to the value %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//todo 解引用p</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>程序的输出类似于：</strong><img src="`+p+`" alt="image.png" loading="lazy"></p><p>关于这个程序，需要注意以下几点：</p><h6 id="指针应该初始化为null-直到它被分配到一个有效位置。" tabindex="-1"><a class="header-anchor" href="#指针应该初始化为null-直到它被分配到一个有效位置。"><span>指针应该初始化为NULL，直到它被分配到一个有效位置。</span></a></h6><h6 id="指针可以用-来获取变量内存的一个位置" tabindex="-1"><a class="header-anchor" href="#指针可以用-来获取变量内存的一个位置"><span>指针可以用<code>&amp;</code>来获取变量内存的一个位置</span></a></h6><h6 id="解引用" tabindex="-1"><a class="header-anchor" href="#解引用"><span>解引用</span></a></h6><p>要看一个指针指向什么，再使用<code>*</code>，如给<code>p</code>赋值，再打印<code>*p</code>。这种情况下，<code>*</code>被称为间接或取消引用运算符。该过程称为解引用。</p><h6 id="p" tabindex="-1"><a class="header-anchor" href="#p"><span><code>**P</code></span></a></h6><blockquote><p>⚠️注意 一些算法使用指向指针的指针。这种类型的变量声明使用 **，并且可以分配另一个指针的地址，如下所示：</p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>
ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="垃圾值" tabindex="-1"><a class="header-anchor" href="#垃圾值"><span>垃圾值</span></a></h6><div class="hint-container caution"><p class="hint-container-title">警告</p><p>C 语言中 int *n; 这样声明的指针 n 默认是什么？ 在C语言中，当你声明一个指针变量如 int *n；它并没有被自动初始化为特定的某个值。其值是不确定的，通常被称为“垃圾值”。这意味着指针有可能指向<strong>内存任何地址</strong>。 试图在初始化前使用这样的指针（例如解引用）是危险的，并且可能导致未定义行为。</p></div><blockquote><p>如果你试图让指针有一个初始值，你可以初始化它为<code>NULL</code>，这是一个特定值，表示指针不指向任何有效地址：</p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token operator">*</span>n <span class="token operator">=</span> null<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>使用 NULL 初始化指针是一个好习惯，因为你可以容易地检查一个指针是否已被赋值：</p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 指针还没有被赋值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>总之，未初始化的指针在 C 中是危险的，并且在使用它们之前，你应始终确保它们被赋予一个合适的值。</p></blockquote><h6 id="——————————————————————————————————" tabindex="-1"><a class="header-anchor" href="#——————————————————————————————————"><span>——————————————————————————————————</span></a></h6><p>填空，声明指针变量 ptr 指向变量 var:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> var <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ___ ptr <span class="token operator">=</span> ___ var<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li></li></ul><p>&amp;</p></blockquote><h2 id="表达式中的指针" tabindex="-1"><a class="header-anchor" href="#表达式中的指针"><span>表达式中的指针</span></a></h2><p>指针可以在表达式中使用，就像任何变量一样，算术运算符可用于指针所指向的任何对象 例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> y<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>

    y <span class="token operator">=</span> <span class="token operator">*</span>p <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//y被赋予7</span>
    y <span class="token operator">+=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">//y被赋予12</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token comment">// todo x 被赋予12</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// x增加到13</span>
    <span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x增加到14</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p的指向值 %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x的值 %d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>⚠️注意 <code>++</code>运算符需要<code>()</code>括号才能增加所指向的值。使用<code>--</code>运算符时也是如此。</p></blockquote><p>指针适用于哪个？</p><ul><li>[ ] A. 指针是无用的，使程序员陷入噩梦</li><li>[x] B. 指针可以与任何变量一样在表达式中使用</li><li>[ ] C. 指针存储变量的值</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x is %d, y is %d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x is %d, y is %d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>
    temp <span class="token operator">=</span> <span class="token operator">*</span>num1<span class="token punctuation">;</span>
    <span class="token operator">*</span>num1 <span class="token operator">=</span> <span class="token operator">*</span>num2<span class="token punctuation">;</span>
    <span class="token operator">*</span>num2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该代码交换了变量的实际值，因为该函数使用指针地址访问它们。 输出：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>x is <span class="token number">25</span><span class="token punctuation">,</span> y is <span class="token number">100</span>
x is <span class="token number">100</span><span class="token punctuation">,</span> y is <span class="token number">25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面代码的输出是哪一项？</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>x <span class="token operator">+=</span> <span class="token operator">*</span>x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>[ ] A. 12</li><li>[x] B. 8</li><li>[ ] C. 4</li><li>[ ] D. 6</li></ul>`,48),i=[c];function l(u,r){return s(),a("div",null,i)}const v=n(o,[["render",l],["__file","note6.html.vue"]]),m=JSON.parse('{"path":"/zh/Lilya/program/C/C-03-Code-block/note6.html","title":"6-指针","lang":"zh-CN","frontmatter":{"title":"6-指针","author":null,"isOriginal":true,"category":["编程"],"tag":["C","cpp","C井"],"icon":"c","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"使用内存 C 被设计为一种低级语言，可以轻松访问内存位置并执行与内存相关的操作。 例如，scanf()函数通过使用&符号将用户输入的值 举例： &num是变量num的地址。 内存地址是以十六进制数的形式给出的。十六进制，是一个基数为 16 的数字系统，用数字 0 到 9 和字母 A 到 F（16 个字符）来表示一组四位二进制数，其值可以从 0 到 15...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/C/C-03-Code-block/note6.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"6-指针"}],["meta",{"property":"og:description","content":"使用内存 C 被设计为一种低级语言，可以轻松访问内存位置并执行与内存相关的操作。 例如，scanf()函数通过使用&符号将用户输入的值 举例： &num是变量num的地址。 内存地址是以十六进制数的形式给出的。十六进制，是一个基数为 16 的数字系统，用数字 0 到 9 和字母 A 到 F（16 个字符）来表示一组四位二进制数，其值可以从 0 到 15..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-03T17:55:08.000Z"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:tag","content":"C井"}],["meta",{"property":"article:modified_time","content":"2024-06-03T17:55:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6-指针\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-03T17:55:08.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用内存","slug":"使用内存","link":"#使用内存","children":[]},{"level":2,"title":"什么是指针","slug":"什么是指针","link":"#什么是指针","children":[{"level":6,"title":"指针应该初始化为NULL，直到它被分配到一个有效位置。","slug":"指针应该初始化为null-直到它被分配到一个有效位置。","link":"#指针应该初始化为null-直到它被分配到一个有效位置。","children":[]},{"level":6,"title":"指针可以用&来获取变量内存的一个位置","slug":"指针可以用-来获取变量内存的一个位置","link":"#指针可以用-来获取变量内存的一个位置","children":[]},{"level":6,"title":"解引用","slug":"解引用","link":"#解引用","children":[]},{"level":6,"title":"**P","slug":"p","link":"#p","children":[]},{"level":6,"title":"垃圾值","slug":"垃圾值","link":"#垃圾值","children":[]},{"level":6,"title":"——————————————————————————————————","slug":"——————————————————————————————————","link":"#——————————————————————————————————","children":[]}]},{"level":2,"title":"表达式中的指针","slug":"表达式中的指针","link":"#表达式中的指针","children":[]}],"git":{"createdTime":1717437308000,"updatedTime":1717437308000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":4.93,"words":1479},"filePathRelative":"zh/Lilya/program/C/C-03-Code-block/note6.md","localizedDate":"2024年6月3日","excerpt":"<h2>使用内存</h2>\\n<p>C 被设计为一种<strong>低级语言</strong>，可以轻松访问内存位置并执行与内存相关的操作。\\n例如，<code>scanf()</code>函数通过使用<code>&amp;</code>符号将用户输入的值\\n举例：</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> num<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Enter a number:\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">scanf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>num<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\"</span><span class=\\"token punctuation\\">,</span> num<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>","autoDesc":true}');export{v as comp,m as data};
