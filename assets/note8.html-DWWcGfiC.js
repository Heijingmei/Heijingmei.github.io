import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-COC9mz0s.js";const p={},e=t(`<p>摘编自学校课件</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token comment">// let j= i; /* The Ownership changed, x can not be used</span>
    <span class="token keyword">let</span> j<span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//x is still uesfull</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; world&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span>s<span class="token operator">+</span><span class="token string">&quot; world&quot;</span><span class="token punctuation">;</span> <span class="token comment">//s cannot be used anymore</span>
    <span class="token comment">// println!(&quot;{}&quot;, s);</span>
    <span class="token comment">//                ^ value borrowed here after move</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","note8.html.vue"]]),m=JSON.parse('{"path":"/zh/Lilya/program/Rust/note8.html","title":"08-借用","lang":"zh-CN","frontmatter":{"title":"08-借用","author":"黑静美","category":["编程"],"tag":["rust"],"icon":"/ico/Rust.ico","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"摘编自学校课件","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/Rust/note8.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"08-借用"}],["meta",{"property":"og:description","content":"摘编自学校课件"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T11:09:18.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:modified_time","content":"2024-06-19T11:09:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"08-借用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-19T11:09:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[],"git":{"createdTime":1718795358000,"updatedTime":1718795358000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":0.37,"words":111},"filePathRelative":"zh/Lilya/program/Rust/note8.md","localizedDate":"2024年6月19日","excerpt":"<p>摘编自学校课件</p>\\n<div class=\\"language-rust\\" data-ext=\\"rs\\" data-title=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// let j= i; /* The Ownership changed, x can not be used</span>\\n    <span class=\\"token keyword\\">let</span> j<span class=\\"token operator\\">=</span> i<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//x is still uesfull</span>\\n    <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"{}\\"</span><span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"{}\\"</span><span class=\\"token punctuation\\">,</span> j<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> s <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">::</span><span class=\\"token function\\">from</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"hello\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> b <span class=\\"token operator\\">=</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">clone</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span><span class=\\"token string\\">\\" world\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"{}\\"</span><span class=\\"token punctuation\\">,</span> s<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"{}\\"</span><span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> b <span class=\\"token operator\\">=</span>s<span class=\\"token operator\\">+</span><span class=\\"token string\\">\\" world\\"</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//s cannot be used anymore</span>\\n    <span class=\\"token comment\\">// println!(\\"{}\\", s);</span>\\n    <span class=\\"token comment\\">//                ^ value borrowed here after move</span>\\n    <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"{}\\"</span><span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,m as data};
