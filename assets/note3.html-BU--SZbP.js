import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DsRTPofz.js";const p={},e=t(`<h2 id="_1-数组概念" tabindex="-1"><a class="header-anchor" href="#_1-数组概念"><span>1 数组概念</span></a></h2><p><strong>数组</strong>是一种数据结构，存储了所有<strong>相同类型</strong>的值的集合 数组很有用，因为可以用一个描述性名称表示相关数据，而不须分别命名单独的变量。 例如，数组 <code>test_scores[25]</code> 可以容纳 25 个考试分数。</p><h2 id="_2-数组的声明" tabindex="-1"><a class="header-anchor" href="#_2-数组的声明"><span>2 数组的声明</span></a></h2><p>数组的声明包括其储存的值的类型，标识符和</p><h6 id="带有数组大小的数字的方括号-。" tabindex="-1"><a class="header-anchor" href="#带有数组大小的数字的方括号-。"><span>带有数组大小的数字的方括号<code>[ ]</code>。</span></a></h6><p><strong>例如</strong>：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> test_scores<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*数组大小 25*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以初始化：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">float</span> prices<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3.2</span><span class="token punctuation">,</span> <span class="token number">6.55</span><span class="token punctuation">,</span> <span class="token number">10.49</span><span class="token punctuation">,</span> <span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token number">0.99</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="注意-初始值用逗号-隔开" tabindex="-1"><a class="header-anchor" href="#注意-初始值用逗号-隔开"><span>注意，初始值用逗号<code>,</code>隔开，</span></a></h6><h6 id="并放大在大括号-内。" tabindex="-1"><a class="header-anchor" href="#并放大在大括号-内。"><span>并放大在大括号<code>{}</code>内。</span></a></h6><h6 id="一个数组可以部分初始化" tabindex="-1"><a class="header-anchor" href="#一个数组可以部分初始化"><span>一个数组可以<strong>部分初始化</strong></span></a></h6><p>如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">float</span> prices<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3.2</span><span class="token punctuation">,</span> <span class="token number">6.55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>缺少的值默认为0。</p><blockquote><p>⚠️注意 数组存储在<strong>连续</strong>的内存位置，在声明后不能改变大小。</p></blockquote><p>这个描述涉及到数组在 C 语言中的本质特性。</p><h6 id="_1-数组存储在连续的内存位置" tabindex="-1"><a class="header-anchor" href="#_1-数组存储在连续的内存位置"><span>1. <strong>数组存储在连续的内存位置</strong>：</span></a></h6><p>这意味着当你在 C 语言中声明一个数组，例如 <code>int arr[5];</code>，这五个整数值将存储在连续的内存地址中。如果 <code>arr[0]</code> 的地址是 <code>0x1000</code>（假设的地址），那么 <code>arr[1]</code> 的地址可能是 <code>0x1004</code>（考虑到一个 <code>int</code> 通常为4字节）。这使得数组访问非常快，因为知道第一个元素的地址和数组的类型后，就可以通过简单的指针算术找到任何元素。</p><h6 id="_2-在声明后不能改变大小" tabindex="-1"><a class="header-anchor" href="#_2-在声明后不能改变大小"><span>2. <strong>在声明后不能改变大小</strong>：</span></a></h6><p>当你声明了一个数组，例如 <code>int arr[5];</code>，你为这个数组分配了固定大小的内存（在这个例子中是5个整数）。这个大小在数组的生命周期中是固定的，不能在运行时改变。如果你需要更多的空间，你不能简单地“扩展”这个数组。相反，你需要声明一个新的、更大的数组并复制数据，或者考虑使用其他数据结构，例如链表或动态数组（例如 C 语言中的动态内存分配和 <code>realloc</code> 函数）。</p><p>这些特性意味着数组在某些情境中非常高效（例如，当你知道所需的确切大小时），但在其他情境中可能不那么灵活（例如，当你在运行时需要改变数据结构的大小时）。</p><h3 id="声明一个新的、更大的数组并复制数据" tabindex="-1"><a class="header-anchor" href="#声明一个新的、更大的数组并复制数据"><span><strong>声明一个新的、更大的数组并复制数据</strong>：</span></a></h3><h6 id="需要每个地址逐值-元素-替换" tabindex="-1"><a class="header-anchor" href="#需要每个地址逐值-元素-替换"><span>（需要每个地址逐<code>值(元素)</code>替换）</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> old_array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> new_array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        new_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> old_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 初始化新数组的其余元素，或做其他操作</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        new_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> new_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用动态内存分配和-realloc" tabindex="-1"><a class="header-anchor" href="#使用动态内存分配和-realloc"><span>**使用动态内存分配和 **<code>**realloc**</code>：</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配初始大小</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Memory allocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 重新分配内存以容纳更多的元素</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">realloc</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Memory reallocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    array <span class="token operator">=</span> temp<span class="token punctuation">;</span>

    <span class="token comment">// 初始化或修改新分配的内存部分</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">free</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种方法都将原始数组的内容复制到一个更大的数组中，但第二种方法使用动态内存分配，并允许在运行时调整数组的大小。</p><p>当你在 C 语言中声明一个数组并没有为其提供初始值，该数组的元素会有一个“默认值”，但这并不意味着该值是确定的。事实上，对于自动存储期（通常是局部变量）的未初始化数组，其中的值是不确定的。但是，对于静态存储期（例如全局变量或使用 <code>static</code>修饰符声明的变量）的未初始化数组，其元素会被初始化为零值。 以下是一个关于不同类型数组和它们的“默认值”的表格：</p><table><thead><tr><th>数组类型</th><th>默认数据(局部变量/自动存储期)</th><th>默认数据(全局变量/静态存储期)</th></tr></thead><tbody><tr><td><code>int</code></td><td>不确定</td><td>0</td></tr><tr><td><code>float</code></td><td>不确定</td><td>0.0</td></tr><tr><td><code>double</code></td><td>不确定</td><td>0.0</td></tr><tr><td><code>char</code></td><td>不确定</td><td>‘\\0’</td></tr><tr><td><code>pointer</code></td><td>不确定</td><td>NULL</td></tr></tbody></table><p>请注意，对于局部变量或自动存储期的未初始化数组，你不应该假设其中的值是0或任何其他具体的值。最好总是在使用前初始化你的变量，以避免不确定的行为。</p><hr><p><strong>填空，声明大小为 4 的整数数组：</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>___ x ___ <span class="token number">4</span> ___ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>int [ ]</p></blockquote><h2 id="_3-访问数组元素" tabindex="-1"><a class="header-anchor" href="#_3-访问数组元素"><span>3 访问数组元素</span></a></h2><p>数组的内容成为元素，每个元素都可以通过一系列索引号来访问。在 C 语言中，索引号从 **0 **开始。 一个有5个元素的数组，其索引号为0、1、2、3、4。考虑一个数组<code>x</code>：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中对应的元素如下</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>0 =&gt; 20
1 =&gt; 45
2 =&gt; 16
3 =&gt; 18
4 =&gt; 22
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要访问一个数组元素，请使用其索引号。</p><p><strong>例如</strong>：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token comment">/*todo*/</span>
<span class="token keyword">void</span> <span class="token function">print_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*todo*/</span>
<span class="token keyword">int</span> <span class="token function">max_search</span><span class="token punctuation">(</span><span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sum_search</span><span class="token punctuation">(</span><span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//一次性输出所有数据，一行以四个空格间隔</span>
    <span class="token function">print_array</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The second element is %d\\n&quot;</span><span class="token punctuation">,</span> arry<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//对数组求和</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;数组和为%d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">sum_search</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//找到数组中的最大值</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;最大值为%d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">max_search</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;    &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">sum_search</span><span class="token punctuation">(</span><span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">max_search</span><span class="token punctuation">(</span><span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> arry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arry<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            max <span class="token operator">=</span> arry<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-数组循环" tabindex="-1"><a class="header-anchor" href="#_4-数组循环"><span>4 数组循环</span></a></h2><p>许多算法要求访问数组的每个元素，以检查数据，存储信息或其他任务。</p><p>这可以通过遍历数组来完成，该过程通常使用 <strong>for</strong> 循环实现，因为循环控制变量自然对应于数组的索引。</p><p>考虑以下程序：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span> purchases<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10.99</span><span class="token punctuation">,</span> <span class="token number">14.25</span><span class="token punctuation">,</span> <span class="token number">90.50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k<span class="token punctuation">;</span>

    <span class="token comment">/* 遍历 purchases，并累加 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        total <span class="token operator">+=</span> purchases<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Purchases total is %6.2f\\n&quot;</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Output:  Purchases total is 115.74 */</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环控制变量从 <code>0</code> 开始，</p><h6 id="达到数组大小时结束-注意是-数组大小" tabindex="-1"><a class="header-anchor" href="#达到数组大小时结束-注意是-数组大小"><span>达到数组大小时结束(注意是 <code>&lt;数组大小</code></span></a></h6><p>非 <code>&lt;=数组大小</code> )</p><p>也可以通过循环，来改变数组的元素，例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k<span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> k <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>填空，使用<strong>for</strong>循环打印数组的元素：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">___</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> ___<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>___<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>for 5 x</p></blockquote><h1 id="_5-数组长度" tabindex="-1"><a class="header-anchor" href="#_5-数组长度"><span>5 数组长度</span></a></h1><p>在 C 语言中，数组本身不直接存储其长度信息。如果你定义了一个数组，但在其他地方你没有储存或保留它的长度，那么你无法直接从数组本身获取其长度。 但是，有一些常用的方法来获取数组长度，尤其是在定义数组的时候：</p><h2 id="固定大小数组" tabindex="-1"><a class="header-anchor" href="#固定大小数组"><span><code>固定大小数组</code></span></a></h2><p>你定义一个数组时，你可以指定其大小，并始终记住这个大小。例如，<code>int arr[10];</code> 表示一个包含 10 个整数的数组。</p><h2 id="使用sizeof运算符" tabindex="-1"><a class="header-anchor" href="#使用sizeof运算符"><span>使用<code>sizeof</code>运算符：</span></a></h2><p>如果你在定义数组的地方，或者在某个范围内可以直接访问到数组的定义，你可以使用<code>sizeof</code>运算符计算数组的长度。例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>sizeof(arr)</code>返回整个数组的字节大小，而<code>sizeof(arr[0])</code>返回数组中的一个元素的字节大小。两者相除即可得到数组的长度。</p><h2 id="结尾标记法" tabindex="-1"><a class="header-anchor" href="#结尾标记法"><span><code>结尾标记法</code></span></a></h2><p>对于某些特定类型的数组，例如字符串（char构成的字符数组），可以使用一个特殊的值（例如<code>\\0</code>）来表示数组的结束。通过遍历数组来查找这个特殊值，你可以确定数组的实际长度。但是，这种方法并不适用于所有类型的数组。</p><h3 id="方法1" tabindex="-1"><a class="header-anchor" href="#方法1"><span><strong>方法1</strong></span></a></h3><p>字符串在 C 语言中其实就是字符数组，并且已经内建了结尾标记法：每个字符串的结尾都有一个</p><h6 id="_0-字符作为终止标记。" tabindex="-1"><a class="header-anchor" href="#_0-字符作为终止标记。"><span><code>&#39;\\0&#39;</code>字符作为终止标记。</span></a></h6><p>以下是获取字符串长度的代码示例，不使用 <code>strlen()</code> 函数：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hallo, world!&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        length<span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;The length of string is %d\\&quot; \\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码将输出 <code>&quot;The length of the string is: 13&quot;</code>，因为字符串 &quot;<code>Hello, World!</code>&quot; 的长度是 13。</p><p>然而，在实际应用中，你可能会直接使用 C 标准库中的 <code>strlen()</code> 函数，因为它也是使用同样的方式来计算字符串长度的。</p><hr><h6 id="定义标记" tabindex="-1"><a class="header-anchor" href="#定义标记"><span>定义标记</span></a></h6><p>结尾标记法通常用于字符串，但这里我会展示一个整数数组的例子，其中我们将使用 -1 作为数组的结束标志。</p><p>首先是定义数组：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//最后放了一个-1作为标记</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        length<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the length of the array is %d\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们遍历数组直到遇到 -1 这个标记，然后使用一个计数器来计算数组长度。 请注意，结尾标记法的缺点是你不能在数组中使用标记值作为其实际内容。在上述示例中，我们不能有 -1 作为数组的一个实际值，因为它被用作结束标记。在实践中，这可能会限制数组的使用，所以这种方法并不总是理想的选择。</p><h3 id="方法2" tabindex="-1"><a class="header-anchor" href="#方法2"><span><strong>方法2</strong></span></a></h3><h6 id="strlen" tabindex="-1"><a class="header-anchor" href="#strlen"><span><code>strlen（）</code></span></a></h6><p>strlen 是 C 语言中的一个函数，用于获取 C 字符串（以 \\0 结尾的字符数组）的长度。它位于头文件 string.h 中。</p><p>以下是 strlen 的基本用法：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hallo, world!&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    length <span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;The length of string is %d\\&quot; \\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::tips strlen 函数返回的是字符串中字符的数量，不包括结尾的 \\0。所以上述示例中 &quot;Hello, World!&quot; 的长度是 13。 :::</p><p>注意： 使用 strlen 时要确保传递的<strong>字符数组</strong>确实是一个以 <code>\\0</code>结尾的有效字符串。如果传递的字符数组没有以 \\0 结尾，strlen 将会继续读取内存，直到找到一个 \\0，这可能会导致未定义的行为或程序崩溃。</p><p>如果你需要经常获取数组的长度，并且数组的大小可能发生变化，那么你可能需要考虑使用其他数据结构，例如链表或动态数组。在 C 标准库中，也有类似的数据结构，如<code>malloc</code>和<code>realloc</code>，可以用来动态地分配和调整内存。</p><h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1>`,88),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","note3.html.vue"]]),d=JSON.parse(`{"path":"/zh/Lilya/program/C/C-03-Code-block/note3.html","title":"3-数组","lang":"zh-CN","frontmatter":{"title":"3-数组","author":"黑静美","isOriginal":true,"category":["编程"],"tag":["c","c#"],"icon":"c","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":3,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"1 数组概念 数组是一种数据结构，存储了所有相同类型的值的集合 数组很有用，因为可以用一个描述性名称表示相关数据，而不须分别命名单独的变量。 例如，数组 test_scores[25] 可以容纳 25 个考试分数。 2 数组的声明 数组的声明包括其储存的值的类型，标识符和 带有数组大小的数字的方括号[ ]。 例如： 也可以初始化： 注意，初始值用逗号,...","head":[["meta",{"property":"og:url","content":"https://github.com/Heijingmei/Heijingmei.github.io/zh/Lilya/program/C/C-03-Code-block/note3.html"}],["meta",{"property":"og:site_name","content":"BH工作室"}],["meta",{"property":"og:title","content":"3-数组"}],["meta",{"property":"og:description","content":"1 数组概念 数组是一种数据结构，存储了所有相同类型的值的集合 数组很有用，因为可以用一个描述性名称表示相关数据，而不须分别命名单独的变量。 例如，数组 test_scores[25] 可以容纳 25 个考试分数。 2 数组的声明 数组的声明包括其储存的值的类型，标识符和 带有数组大小的数字的方括号[ ]。 例如： 也可以初始化： 注意，初始值用逗号,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-13T11:15:00.000Z"}],["meta",{"property":"article:author","content":"黑静美"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:modified_time","content":"2024-04-13T11:15:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3-数组\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-13T11:15:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"黑静美\\"}]}"]]},"headers":[{"level":2,"title":"1 数组概念","slug":"_1-数组概念","link":"#_1-数组概念","children":[]},{"level":2,"title":"2 数组的声明","slug":"_2-数组的声明","link":"#_2-数组的声明","children":[{"level":6,"title":"带有数组大小的数字的方括号[ ]。","slug":"带有数组大小的数字的方括号-。","link":"#带有数组大小的数字的方括号-。","children":[]},{"level":6,"title":"注意，初始值用逗号,隔开，","slug":"注意-初始值用逗号-隔开","link":"#注意-初始值用逗号-隔开","children":[]},{"level":6,"title":"并放大在大括号{}内。","slug":"并放大在大括号-内。","link":"#并放大在大括号-内。","children":[]},{"level":6,"title":"一个数组可以部分初始化","slug":"一个数组可以部分初始化","link":"#一个数组可以部分初始化","children":[]},{"level":6,"title":"1. 数组存储在连续的内存位置：","slug":"_1-数组存储在连续的内存位置","link":"#_1-数组存储在连续的内存位置","children":[]},{"level":6,"title":"2. 在声明后不能改变大小：","slug":"_2-在声明后不能改变大小","link":"#_2-在声明后不能改变大小","children":[]},{"level":3,"title":"声明一个新的、更大的数组并复制数据：","slug":"声明一个新的、更大的数组并复制数据","link":"#声明一个新的、更大的数组并复制数据","children":[{"level":6,"title":"（需要每个地址逐值(元素)替换）","slug":"需要每个地址逐值-元素-替换","link":"#需要每个地址逐值-元素-替换","children":[]}]},{"level":3,"title":"**使用动态内存分配和 ****realloc**：","slug":"使用动态内存分配和-realloc","link":"#使用动态内存分配和-realloc","children":[]}]},{"level":2,"title":"3 访问数组元素","slug":"_3-访问数组元素","link":"#_3-访问数组元素","children":[]},{"level":2,"title":"4 数组循环","slug":"_4-数组循环","link":"#_4-数组循环","children":[{"level":6,"title":"达到数组大小时结束(注意是 <数组大小","slug":"达到数组大小时结束-注意是-数组大小","link":"#达到数组大小时结束-注意是-数组大小","children":[]}]},{"level":1,"title":"5 数组长度","slug":"_5-数组长度","link":"#_5-数组长度","children":[{"level":2,"title":"固定大小数组","slug":"固定大小数组","link":"#固定大小数组","children":[]},{"level":2,"title":"使用sizeof运算符：","slug":"使用sizeof运算符","link":"#使用sizeof运算符","children":[]},{"level":2,"title":"结尾标记法","slug":"结尾标记法","link":"#结尾标记法","children":[{"level":3,"title":"方法1","slug":"方法1","link":"#方法1","children":[{"level":6,"title":"'\\\\0'字符作为终止标记。","slug":"_0-字符作为终止标记。","link":"#_0-字符作为终止标记。","children":[]},{"level":6,"title":"定义标记","slug":"定义标记","link":"#定义标记","children":[]}]},{"level":3,"title":"方法2","slug":"方法2","link":"#方法2","children":[{"level":6,"title":"strlen（）","slug":"strlen","link":"#strlen","children":[]}]}]}]},{"level":1,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":1713006900000,"updatedTime":1713006900000,"contributors":[{"name":"Heijingmei","email":"bh.heijingmei@gmail.com","commits":1}]},"readingTime":{"minutes":9.36,"words":2807},"filePathRelative":"zh/Lilya/program/C/C-03-Code-block/note3.md","localizedDate":"2024年4月13日","excerpt":"<h2>1 数组概念</h2>\\n<p><strong>数组</strong>是一种数据结构，存储了所有<strong>相同类型</strong>的值的集合\\n数组很有用，因为可以用一个描述性名称表示相关数据，而不须分别命名单独的变量。\\n例如，数组 <code>test_scores[25]</code> 可以容纳 25 个考试分数。</p>\\n<h2>2 数组的声明</h2>\\n<p>数组的声明包括其储存的值的类型，标识符和</p>\\n<h6>带有数组大小的数字的方括号<code>[ ]</code>。</h6>\\n<p><strong>例如</strong>：</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">int</span> test_scores<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">25</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">/*数组大小 25*/</span>\\n</code></pre></div>","autoDesc":true}`);export{k as comp,d as data};
